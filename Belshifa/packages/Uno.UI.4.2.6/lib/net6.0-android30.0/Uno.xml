<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Uno</name>
    </assembly>
    <members>
        <member name="P:Windows.ApplicationModel.Activation.LaunchActivatedEventArgs.PreviousExecutionState">
            <summary>
            Defaults to NotRunning, may not be accurate in all cases for all platforms.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs">
            <summary>
            Provides data when an app is activated because it is the app associated with a URI scheme name.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs.#ctor(System.Uri,Windows.ApplicationModel.Activation.ApplicationExecutionState)">
            <summary>
            Internal-only constructor for protocol activation.
            </summary>
            <param name="uri">Activated uri.</param>
            <param name="previousExecutionState">Previous execution state.</param>
        </member>
        <member name="P:Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs.Kind">
            <summary>
            Gets the activation type.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs.PreviousExecutionState">
            <summary>
            Gets the execution state of the app before it was activated.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs.Uri">
            <summary>
            Gets the Uniform Resource Identifier (URI) for which the app was activated.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.Background.BackgroundTaskDeferral.Complete">
            <summary>
            On Android, BackgroundTaskDeferral has no meaning (background tasks will not be cancelled by OS, unless it takes really much time)
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.Contact">
            <summary>
            Represents a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.FullName">
            <summary>
            Gets the full name of the Contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.DisplayName">
            <summary>
            Gets the display name for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.DisplayNameOverride">
            <summary>
            Gets or sets the display that was manually entered by the user.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.Emails">
            <summary>
            Gets the email addresses for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.Addresses">
            <summary>
            Gets the contact addresses for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.Phones">
            <summary>
            Gets info about the phones for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.FirstName">
            <summary>
            Gets and sets the first name for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.MiddleName">
            <summary>
            Gets and sets the middle name for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.LastName">
            <summary>
            Gets and sets the last name for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.HonorificNamePrefix">
            <summary>
            Gets and sets the honorific prefix for the name for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.HonorificNameSuffix">
            <summary>
            Gets and sets the honorific suffix for the name for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.Nickname">
            <summary>
            Gets or sets the nickname for the Contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.Notes">
            <summary>
            Gets and sets notes for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.YomiGivenName">
            <summary>
            Gets the Yomi (phonetic Japanese equivalent) given name for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.Contact.YomiFamilyName">
            <summary>
            Gets the Yomi (phonetic Japanese equivalent) family name for a contact.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.ContactAddress">
            <summary>
            Represents the address of a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactAddress.Kind">
            <summary>
            Gets and sets the kind of contact address.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactAddress.StreetAddress">
            <summary>
            Gets and sets the street address of a contact address.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactAddress.Region">
            <summary>
            Gets and sets the region of a contact address.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactAddress.PostalCode">
            <summary>
            Gets and sets the postal code of a contact address.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactAddress.Locality">
            <summary>
            Gets and sets the locality of a contact address.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactAddress.Country">
            <summary>
            Gets and sets the country of a contact address.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactAddress.Description">
            <summary>
            Gets and sets the description of a contact address.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.ContactAddressKind">
            <summary>
            Specifies the kinds of contact addresses.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactAddressKind.Home">
            <summary>
            The home address of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactAddressKind.Work">
            <summary>
            The work address of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactAddressKind.Other">
            <summary>
            An address of the contact other than home or work.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.ContactEmail">
            <summary>
            Represents an email address of a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactEmail.Kind">
            <summary>
            Gets and sets the kind of email address of a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactEmail.Address">
            <summary>
            Gets and sets the email address of a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactEmail.Description">
            <summary>
            Gets and sets the description of an email address of a contact.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.ContactEmailKind">
            <summary>
            Specifies the kinds of email addresses for a contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactEmailKind.Personal">
            <summary>
            The personal email address of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactEmailKind.Work">
            <summary>
            The work email address of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactEmailKind.Other">
            <summary>
            An email address of the contact other than personal or work.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.ContactPhone">
            <summary>
            Represents information about the phone for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactPhone.Kind">
            <summary>
            Gets and sets the kind of phone for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactPhone.Number">
            <summary>
            Gets and sets the phone number of a phone for a contact.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Contacts.ContactPhone.Description">
            <summary>
            Gets and sets the description of the phone for a contact.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.ContactPhoneKind">
            <summary>
            Specifies the kinds of phones for a contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.Home">
            <summary>
            The home phone of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.Mobile">
            <summary>
            The mobile phone of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.Work">
            <summary>
            The work phone of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.Other">
            <summary>
            A phone of the contact other than home, mobile, or work.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.Pager">
            <summary>
            The pager number of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.BusinessFax">
            <summary>
            The business fax of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.HomeFax">
            <summary>
            The home fax of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.Company">
            <summary>
            The company phone of the contact.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.Assistant">
            <summary>
            The phone number of the contact's assistant.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactPhoneKind.Radio">
            <summary>
            The radio address of the contact.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.ContactPicker">
            <summary>
            Controls how the Contact Picker user interface opens and what information it shows.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.Contacts.ContactPicker.IsSupportedAsync">
            <summary>
            Gets a Boolean value indicating if the contact picker is supported on the current platform.
            </summary>
            <returns>A Boolean value indicating if the contact picker is supported on the current platform.</returns>
            <remarks>Unsupported platforms return false.</remarks>
        </member>
        <member name="M:Windows.ApplicationModel.Contacts.ContactPicker.PickContactAsync">
            <summary>
            Launches the Contact Picker to select a single contact.
            </summary>
            <returns>The operation that launches the Contact Picker.</returns>
            <remarks>Unsupported platforms only return null.</remarks>
        </member>
        <member name="M:Windows.ApplicationModel.Contacts.ContactPicker.PickContactsAsync">
            <summary>
            Launches the Contact Picker for selecting multiple contacts.
            </summary>
            <returns>The operation that launches the contact picker.</returns>
            <remarks>Unsupported platforms only return empty array.</remarks>
        </member>
        <member name="T:Windows.ApplicationModel.Contacts.ContactQueryDesiredFields">
            <summary>
            Defines which fields must exist on a contact in order to match a search operation.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactQueryDesiredFields.None">
            <summary>
            No required fields.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactQueryDesiredFields.PhoneNumber">
            <summary>
            The contact must have a phone number.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactQueryDesiredFields.EmailAddress">
            <summary>
            The contact must have an email address.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.Contacts.ContactQueryDesiredFields.PostalAddress">
            <summary>
            The contact must have a postal address.
            </summary>
        </member>
        <member name="E:Windows.ApplicationModel.Core.CoreApplication.Resuming">
            <summary>
            Occurs when an app is resuming.
            </summary>
        </member>
        <member name="E:Windows.ApplicationModel.Core.CoreApplication.Suspending">
            <summary>
            Occurs when the app is suspending.
            </summary>
        </member>
        <member name="E:Windows.ApplicationModel.Core.CoreApplication.EnteredBackground">
            <summary>
            Fired when the app enters the running in the background state.
            </summary>
        </member>
        <member name="E:Windows.ApplicationModel.Core.CoreApplication.LeavingBackground">
            <summary>
            Fired just before application UI becomes visible.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.Core.CoreApplication.RaiseResuming">
            <summary>
            Raises the <see cref="E:Windows.ApplicationModel.Core.CoreApplication.Resuming"/> event.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.Core.CoreApplication.RaiseSuspending(Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
            Raises the <see cref="E:Windows.ApplicationModel.Core.CoreApplication.Suspending"/> event.
            </summary>
            <param name="args">Suspending event args.</param>
        </member>
        <member name="M:Windows.ApplicationModel.Core.CoreApplication.RaiseEnteredBackground(Windows.ApplicationModel.EnteredBackgroundEventArgs)">
            <summary>
            Raises the <see cref="E:Windows.ApplicationModel.Core.CoreApplication.EnteredBackground"/> event.
            </summary>
            <param name="args">Entered background event args.</param>
        </member>
        <member name="M:Windows.ApplicationModel.Core.CoreApplication.RaiseLeavingBackground(Windows.ApplicationModel.LeavingBackgroundEventArgs)">
            <summary>
            Raises the <see cref="E:Windows.ApplicationModel.Core.CoreApplication.LeavingBackground"/> event.
            </summary>
            <param name="args">Leaving background event args.</param>
        </member>
        <member name="P:Windows.ApplicationModel.Core.CoreApplication.RequestedTheme">
            <summary>
            This property is kept in sync with the Application.RequestedTheme to enable
            native UI elements in non Uno.UWP to resolve the currently set Application theme.
            </summary>
        </member>
        <member name="F:Windows.ApplicationModel.DataTransfer.DataPackage.UnoPrivateDataPrefix">
            <summary>
            FormatId prefix for internal data that won't be visible to the application
            (cf. <see cref="P:Windows.ApplicationModel.DataTransfer.DataPackageView.AvailableFormats"/>).
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DataPackage.IsUriWebLink(System.String)">
            <summary>
            Determines if the given URI/URL is considered a WebLink.
            This determination is done based on whether the scheme starts with 'http' or 'https'.
            </summary>
            <remarks>
            This method is intended for use during integration with other platforms.
            Therefore, it uses a string instead of a Uri or native URL class.
            </remarks>
            <param name="uri">The URI to determine if it is a WebLink.</param>
            <returns>True if the given URI/URL is considered a WebLink; otherwise, false.</returns>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DataPackage.SeparateUri(System.String,System.String@,System.String@)">
            <summary>
            Separates a single URI/URL into separate URI's for WebLink and ApplicationLink (Uri format is deprecated).
            This is useful for converting a platform-specific URI/URL into formats supported by the <see cref="T:Windows.ApplicationModel.DataTransfer.DataPackage"/>.
            </summary>
            <remarks>
            This method is intended for use during integration with other platforms.
            Therefore, it uses strings as the intermediate type instead of a Uri or native URL class.
            </remarks>
            <param name="uri">The platform-specific URI/URL.</param>
            <param name="webLink">
            The <see cref="P:Windows.ApplicationModel.DataTransfer.StandardDataFormats.WebLink"/> format Uri intended for use in a <see cref="T:Windows.ApplicationModel.DataTransfer.DataPackage"/>.
            Null will be returned if the URI/URL is not in the <see cref="P:Windows.ApplicationModel.DataTransfer.StandardDataFormats.WebLink"/> format.
            </param>
            <param name="applicationLink">
            The <see cref="P:Windows.ApplicationModel.DataTransfer.StandardDataFormats.ApplicationLink"/> format Uri intended for use in a <see cref="T:Windows.ApplicationModel.DataTransfer.DataPackage"/>.
            Null will be returned if the URI/URL is not in the <see cref="P:Windows.ApplicationModel.DataTransfer.StandardDataFormats.ApplicationLink"/> format.
            </param>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DataPackage.CombineUri(System.String,System.String,System.String)">
            <summary>
            Combines separate URI's for WebLink, ApplicationLink and Uri (deprecated) into a single URI/URL.
            This is useful for converting formats supported by the <see cref="T:Windows.ApplicationModel.DataTransfer.DataPackage"/> into a platform-specific URI/URL.
            </summary>
            <remarks>
            This method is intended for use during integration with other platforms.
            Therefore, it uses strings as the intermediate type instead of a Uri or native URL class.
            </remarks>
            <param name="webLink">
            Data from a <see cref="T:Windows.ApplicationModel.DataTransfer.DataPackage"/> for the <see cref="P:Windows.ApplicationModel.DataTransfer.StandardDataFormats.WebLink"/> format.
            Set to null if this format does not exist in the package.
            </param>
            <param name="applicationLink">
            Data from a <see cref="T:Windows.ApplicationModel.DataTransfer.DataPackage"/> for the <see cref="P:Windows.ApplicationModel.DataTransfer.StandardDataFormats.ApplicationLink"/> format.
            Set to null if this format does not exist in the package.
            </param>
            <param name="uri">
            Data from a <see cref="T:Windows.ApplicationModel.DataTransfer.DataPackage"/> for the <see cref="P:Windows.ApplicationModel.DataTransfer.StandardDataFormats.Uri"/> format.
            Set to null if this format does not exist in the package.
            </param>
            <returns></returns>
        </member>
        <member name="T:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet">
            <summary>
            Defines a set of properties to use with a DataPackage object.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.Title">
            <summary>
            Gets or sets the text that displays as a title for the contents of the DataPackage object.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.Thumbnail">
            <summary>
            Gets or sets a thumbnail image for the DataPackage.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.Description">
            <summary>
            Gets or sets text that describes the contents of the DataPackage.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.ApplicationName">
            <summary>
            Gets or sets the name of the app that created the DataPackage object.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.ApplicationListingUri">
            <summary>
            Gets or sets the Uniform Resource Identifier (URI) of the app's location in the store.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.FileTypes">
            <summary>
            Specifies a vector object that contains the types of files stored in the DataPackage object.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.Square30x30Logo">
            <summary>
            Gets or sets the source app's logo.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.PackageFamilyName">
            <summary>
            Gets or sets the package family name of the source app.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.LogoBackgroundColor">
            <summary>
            Gets or sets a background color for the sharing app's Square30x30Logo.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.ContentSourceWebLink">
            <summary>
            Provides a web link to shared content that's currently displayed in the app.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.ContentSourceApplicationLink">
            <summary>
            Gets or sets the application link to the content from the source app.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.EnterpriseId">
            <summary>
            Gets or sets the enterprise identity (see Enterprise data protection).
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.ContentSourceUserActivityJson">
            <summary>
            Gets or sets the UserActivity in serialized JSON format to be shared with another app.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.Size">
            <summary>
            Gets the number of items that are contained in the property set.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DataPackagePropertySet.Clear">
            <summary>
            Removes all items from the property set.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView">
            <summary>
            Gets the set of properties of a DataPackageView object.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.ApplicationListingUri">
            <summary>
            Gets the Uniform Resource Identifier (URI) of the app's location in the Microsoft Store.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.ApplicationName">
            <summary>
            Gets the name of the app that created the DataPackage object.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.Description">
            <summary>
            Gets the text that describes the contents of the DataPackage.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.FileTypes">
            <summary>
            Gets a vector object that contains the types of files stored in the DataPackage object.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.Thumbnail">
            <summary>
            Gets the thumbnail image for the DataPackageView.
            </summary>
            <remarks>
            In UWP this property actually is a RandomAccessStreamReference even though the other properties use IRandomAccessStreamReference.
            </remarks>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.Title">
            <summary>
            Gets the text that displays as a title for the contents of the DataPackagePropertySetView object.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.ContentSourceApplicationLink">
            <summary>
            Gets the application link to the content from the source app.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.ContentSourceWebLink">
            <summary>
            Gets a web link to shared content that's currently displayed in the app.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.LogoBackgroundColor">
            <summary>
            Gets a background color for the sharing app's Square30x30Logo.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.PackageFamilyName">
            <summary>
            Gets the package family name of the source app.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.Square30x30Logo">
            <summary>
            Gets the source app's logo.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.EnterpriseId">
            <summary>
            Gets or sets the enterprise Id.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.ContentSourceUserActivityJson">
            <summary>
            Gets the UserActivity in serialized JSON format to be shared with another app.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.IsFromRoamingClipboard">
            <summary>
            Gets a value that indicates whether the shared content in the DataPackageView comes
            from clipboard data that was synced from another device for the current user.
            </summary>
            <remarks>Always false in Uno Platform.</remarks>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView.Size">
            <summary>
            Gets the number of items that are contained in the property set.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.DataTransfer.DataRequest">
            <summary>
            Lets your app supply the content the user wants to share or specify a message, if an error occurs.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataRequest.Data">
            <summary>
            Sets or gets a DataPackage object that contains the content a user wants to share.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataRequest.Deadline">
            <summary>
            Gets the deadline for finishing a delayed rendering operation. If execution goes beyond that deadline,
            the results of delayed rendering are ignored.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DataRequest.GetDeferral">
            <summary>
            Supports asynchronous sharing operations by creating and returning a DataRequestDeferral object.
            </summary>
            <returns>
            Supports asynchronous sharing operations by creating and returning a DataRequestDeferral object.
            </returns>
        </member>
        <member name="T:Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs">
            <summary>
            Contains information about the DataRequested event. The system fires this
            event when the user invokes the Share UI.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs.Request">
            <summary>
            Enables you to get the DataRequest object
            and either give it data or a failure message.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager.ProcessMoved(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked each time a pointer involved in a drag operation is moved,
            no matter if the drag operation has been initiated from this app or from an external app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager.ProcessDropped(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked when pointer involved in a drag operation is released,
            no matter if the drag operation has been initiated from this app or from an external app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager.ProcessAborted(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked when pointer involved in a drag operation
            is lost for operation initiated by the current app,
            or left the window (a.k.a. the "virtual pointer" is lost) for operation initiated by an other app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager.IDragDropManager.BeginDragAndDrop(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo,Windows.ApplicationModel.DataTransfer.DragDrop.Core.ICoreDropOperationTarget)">
            <summary>
            This method initiate a new dragging operation.
            This method must be followed by either ProcessDropped, either ProcessAborted. 
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager.IDragDropManager.ProcessMoved(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked each time a pointer involved in a drag operation is moved,
            no matter if the drag operation has been initiated from this app or from an external app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager.IDragDropManager.ProcessDropped(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked when pointer involved in a drag operation is released,
            no matter if the drag operation has been initiated from this app or from an external app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragDropManager.IDragDropManager.ProcessAborted(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked when pointer involved in a drag operation
            is lost for operation initiated by the current app,
            or left the window (a.k.a. the "virtual pointer" is lost) for operation initiated by an other app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo.DragUI">
            <summary>
            If this drag operation has been initiated by the current application,
            this is expected to be the Windows.UI.Xaml.DragUI built in the DragStarting event.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo.SourceId">
            <summary>
            A unique identifier of the source that trigger those drag operation (Pointer.UniqueId for internal drag and drop)
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride.Content">
            <summary>
            A Windows.UI.Xaml.Media.ImageSource to override the default Content of the DragUI
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.DataTransfer.FileUriHelper.UrlEncode(System.String)">
            <summary>
            Encodes a file path to a file:// Url.
            While the built-in Uri class can handle this, it does not process files
            such as '/home/user/%51.txt' correctly.
            </summary>
            <param name="path">Path to the file</param>
            <returns>file:// url to the file</returns>
        </member>
        <member name="T:Windows.ApplicationModel.EnteredBackgroundEventArgs">
            <summary>
            Gets the deferral object when an app has entered the background state.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.EnteredBackgroundEventArgs.GetDeferral">
            <summary>
            Gets the deferral object which delays the transition from running in the background
            state to the suspended state until the app calls Deferral.Complete or the deadline
            for navigation has passed.
            </summary>
            <returns>The deferral object you will use to indicate when your processing is complete.</returns>
        </member>
        <member name="T:Windows.ApplicationModel.IEnteredBackgroundEventArgs">
            <summary>
            Gets the deferral object when an app has entered the background state.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.IEnteredBackgroundEventArgs.GetDeferral">
            <summary>
            Gets the deferral object which delays the transition
            from running in the background state to the suspended
            state until the app calls Deferral.Complete or the deadline
            for navigation has passed.
            </summary>
            <returns>
            The deferral object you will use to indicate
            that your processing is complete.
            </returns>
        </member>
        <member name="T:Windows.ApplicationModel.ILeavingBackgroundEventArgs">
            <summary>
            Gets the deferral object when the app is leaving the background state.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.ILeavingBackgroundEventArgs.GetDeferral">
            <summary>
            Gets the deferral object which delays the transition from running
            in the background to running in the foreground until the app calls
            Deferral. Complete or the deadline for navigation has passed.
            </summary>
            <returns>
            The deferral object you will use to indicate
            that your processing is complete.
            </returns>
        </member>
        <member name="T:Windows.ApplicationModel.ISuspendingDeferral">
            <summary>
            Manages a delayed app suspending operation.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.ISuspendingDeferral.Complete">
            <summary>
            Notifies the system that the app has saved its data and is ready to be suspended.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.ISuspendingEventArgs">
            <summary>
            Provides data for an app suspending event.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.ISuspendingEventArgs.SuspendingOperation">
            <summary>
            Gets the app suspending operation.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.ISuspendingOperation">
            <summary>
            Provides information about an app suspending operation.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.ISuspendingOperation.Deadline">
            <summary>
            Gets the time remaining before a delayed app suspending operation continues.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.ISuspendingOperation.GetDeferral">
            <summary>
            Requests that the app suspending operation be delayed.
            </summary>
            <returns>The suspension deferral.</returns>
        </member>
        <member name="T:Windows.ApplicationModel.LeavingBackgroundEventArgs">
            <summary>
            Gets the deferral object when the app is leaving the background state.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.LeavingBackgroundEventArgs.GetDeferral">
            <summary>
            Gets the deferral object which delays the transition from running
            in the background to running in the foreground until the app calls
            Deferral.Complete or the deadline for navigation has passed.
            </summary>
            <returns>The deferral object you will use to indicate that your processing is done.</returns>
        </member>
        <member name="T:Windows.ApplicationModel.Resources.Core.AndroidResourceConverter">
            <summary>
            Converts a resource candidate to an Android resource path.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.Resources.Core.iOSResourceConverter">
            <summary>
            Converts a resource candidate to an iOS resource path.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.Resources.ResourceLoader.DefaultLanguage">
            <summary>
            Provides the default culture if CurrentUICulture cannot provide it.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.Resources.ResourceLoader.AddLookupAssembly(System.Reflection.Assembly)">
            <summary>
            Registers an assembly for resources lookup
            </summary>
            <param name="assembly">The assembly containing upri resources</param>
        </member>
        <member name="T:Windows.ApplicationModel.SuspendingDeferral">
            <summary>
            Manages a delayed app suspending operation.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.SuspendingDeferral.#ctor(System.Action)">
            <summary>
            This can be removed with other breaking changes
            </summary>
            <param name="deferralDone"></param>
        </member>
        <member name="M:Windows.ApplicationModel.SuspendingDeferral.Complete">
            <summary>
            Notifies the operating system that the app has saved its data and is ready to be suspended.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.SuspendingEventArgs">
            <summary>
            Provides data for an app suspending event.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.SuspendingEventArgs.SuspendingOperation">
            <summary>
            Gets the app suspending operation.
            </summary>
        </member>
        <member name="T:Windows.ApplicationModel.SuspendingOperation">
            <summary>
            Provides info about an app suspending operation.
            </summary>
        </member>
        <member name="P:Windows.ApplicationModel.SuspendingOperation.Deadline">
            <summary>
            Gets the time when the delayed app suspending operation continues.
            </summary>
        </member>
        <member name="M:Windows.ApplicationModel.SuspendingOperation.GetDeferral">
            <summary>
            Requests that the app suspending operation be delayed.
            </summary>
            <returns>The suspension deferral.</returns>
        </member>
        <member name="M:Windows.Data.Xml.Dom.XmlDocument.Wrap(System.Object)">
            <summary>
            Wraps System.Xml node to UWP XML node and caches the
            instance for repeated retrieval.
            </summary>
            <param name="node">System.Xml node.</param>
            <returns>UWP XML node.</returns>
        </member>
        <member name="M:Windows.Data.Xml.Dom.XmlDocument.Unwrap(System.Object)">
            <summary>
            Wraps UWP XML node to System.Xml node.
            </summary>
            <param name="node">UWP XML node.</param>
            <returns>System.Xml node.</returns>
        </member>
        <member name="T:Windows.Devices.Bluetooth.BluetoothServiceCapabilities">
            <summary>Indicates the service capabilities of a device.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.None">
            <summary>None.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.LimitedDiscoverableMode">
            <summary>Limited Discoverable Mode.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.PositioningService">
            <summary>Positioning or location identification.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.NetworkingService">
            <summary>Networking, for example, LAN, Ad hoc.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.RenderingService">
            <summary>Rendering, for example, printer, speakers.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.CapturingService">
            <summary>Capturing, for example, scanner, microphone.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.ObjectTransferService">
            <summary>Object Transfer, for example, v-Inbox, v-folder.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.AudioService">
            <summary>Audio, for example, speaker, microphone, headset service.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.TelephoneService">
            <summary>Telephony, for example cordless, modem, headset service.</summary>
        </member>
        <member name="F:Windows.Devices.Bluetooth.BluetoothServiceCapabilities.InformationService">
            <summary>Information, for example, web server, WAP server.</summary>
        </member>
        <member name="T:Windows.Devices.Enumeration.DeviceInformation">
            <summary>
            Represents a device. This class allows access to well-known
            device properties as well as additional properties specified
            during device enumeration.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformation.Id">
            <summary>
            A string representing the identity of the device.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformation.IsDefault">
            <summary>
            Indicates whether this device is the default device for the class.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformation.IsEnabled">
            <summary>
            Indicates whether this device is enabled.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformation.Name">
            <summary>
            The name of the device. This name is in the best
            available language for the app.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformation.Properties">
            <summary>
            Property store containing well-known values as well as additional
            properties that can be specified during device enumeration.
            </summary>
        </member>
        <member name="M:Windows.Devices.Enumeration.DeviceInformation.CreateWatcher(System.String)">
            <summary>
            Creates a DeviceWatcher for devices matching
            the specified Advanced Query Syntax (AQS) string.
            </summary>
            <param name="aqsFilter">An AQS string that filters
            the DeviceInformation objects to enumerate. Typically
            this string is retrieved from the GetDeviceSelector
            method of a class that interacts with devices.</param>
            <returns>The created DeviceWatcher.</returns>
        </member>
        <member name="M:Windows.Devices.Enumeration.DeviceInformation.FindAllAsync(System.String)">
            <summary>
            Enumerates DeviceInformation objects matching the specified
            Advanced Query Syntax (AQS) device interface selector string,
            the device kind, and including the specified collection of properties.
            </summary>
            <param name="aqsFilter">An AQS device interface selector string that
            filters the DeviceInformation objects to enumerate. Typically this string
            is retrieved from the GetDeviceSelector method of a class that interacts
            with devices.</param>
            <returns>The object for managing the asynchronous operation.</returns>
        </member>
        <member name="T:Windows.Devices.Enumeration.DeviceInformationCollection">
            <summary>
            Represents a collection of DeviceInformation objects.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformationCollection.Size">
            <summary>
            The number of DeviceInformation objects in the collection.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformationCollection.Item(System.Int32)">
            <summary>
            Gets the DeviceInformation object at the specified index.
            </summary>
            <param name="index">Index.</param>
            <returns>Device information.</returns>
        </member>
        <member name="M:Windows.Devices.Enumeration.DeviceInformationCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Windows.Devices.Enumeration.DeviceInformationCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformationCollection.Count">
            <summary>
            The number of DeviceInformation objects in the collection.
            </summary>
        </member>
        <member name="T:Windows.Devices.Enumeration.DeviceInformationUpdate">
            <summary>
            Contains updated properties for a DeviceInformation object.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceInformationUpdate.Id">
            <summary>
            The DeviceInformation ID of the updated device.
            </summary>
        </member>
        <member name="T:Windows.Devices.Enumeration.DeviceWatcher">
            <summary>
            Enumerates devices dynamically, so that the app
            receives notifications if devices are added, removed,
            or changed after the initial enumeration is complete.
            </summary>
        </member>
        <member name="P:Windows.Devices.Enumeration.DeviceWatcher.Status">
            <summary>
            The status of the DeviceWatcher.
            </summary>
        </member>
        <member name="M:Windows.Devices.Enumeration.DeviceWatcher.Start">
            <summary>
            Starts a search for devices, and subscribes to device enumeration events.
            </summary>
        </member>
        <member name="M:Windows.Devices.Enumeration.DeviceWatcher.Stop">
            <summary>
            Stop raising the events that add, update and remove enumeration results.
            </summary>
        </member>
        <member name="E:Windows.Devices.Enumeration.DeviceWatcher.Added">
            <summary>
            Event that is raised when a device is added to the collection
            enumerated by the DeviceWatcher.
            </summary>
        </member>
        <member name="E:Windows.Devices.Enumeration.DeviceWatcher.Updated">
            <summary>
            Event that is raised when a device is updated in the collection of enumerated devices.
            </summary>
        </member>
        <member name="E:Windows.Devices.Enumeration.DeviceWatcher.Removed">
            <summary>
            Event that is raised when a device is removed from the collection of enumerated devices.
            </summary>
        </member>
        <member name="E:Windows.Devices.Enumeration.DeviceWatcher.EnumerationCompleted">
            <summary>
            Event that is raised when the enumeration of devices completes.
            </summary>
        </member>
        <member name="E:Windows.Devices.Enumeration.DeviceWatcher.Stopped">
            <summary>
            Event that is raised when the enumeration operation has been stopped.
            </summary>
        </member>
        <member name="T:Windows.Devices.Enumeration.DeviceWatcherStatus">
            <summary>
            Describes the state of a DeviceWatcher object.
            </summary>
        </member>
        <member name="F:Windows.Devices.Enumeration.DeviceWatcherStatus.Created">
            <summary>
            This is the initial state of a Watcher object. During this state clients can register event handlers.
            </summary>
        </member>
        <member name="F:Windows.Devices.Enumeration.DeviceWatcherStatus.Started">
            <summary>
            The watcher transitions to the Started state once Start is called. The watcher is enumerating the initial collection.
            Note that during this enumeration phase it is possible to receive Updated and Removed notifications but only to items that have already been Added.
            </summary>
        </member>
        <member name="F:Windows.Devices.Enumeration.DeviceWatcherStatus.EnumerationCompleted">
            <summary>
            The watcher has completed enumerating the initial collection. Items can still be added, updated or removed from the collection.
            </summary>
        </member>
        <member name="F:Windows.Devices.Enumeration.DeviceWatcherStatus.Stopping">
            <summary>
            The client has called Stop and the watcher is still in the process of stopping. Events may still be raised.
            </summary>
        </member>
        <member name="F:Windows.Devices.Enumeration.DeviceWatcherStatus.Stopped">
            <summary>
            The client has called Stop and the watcher has completed all outstanding events. No further events will be raised.
            </summary>
        </member>
        <member name="F:Windows.Devices.Enumeration.DeviceWatcherStatus.Aborted">
            <summary>
            The watcher has aborted operation. No subsequent events will be raised.
            </summary>
        </member>
        <member name="T:Windows.Devices.Geolocation.Geofencing.GeofenceState">
            <summary>
            Indicates the current state of a Geofence.
            </summary>
        </member>
        <member name="F:Windows.Devices.Geolocation.Geofencing.GeofenceState.None">
            <summary>
            No flag is set.
            </summary>
        </member>
        <member name="F:Windows.Devices.Geolocation.Geofencing.GeofenceState.Entered">
            <summary>
            The device has entered the geofence area.
            </summary>
        </member>
        <member name="F:Windows.Devices.Geolocation.Geofencing.GeofenceState.Exited">
            <summary>
            The device has left the geofence area.
            </summary>
        </member>
        <member name="F:Windows.Devices.Geolocation.Geofencing.GeofenceState.Removed">
            <summary>
            The geofence was removed.
            </summary>
        </member>
        <member name="T:Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates">
            <summary>
            Indicates the state or states of the Geofences that are currently being monitored by the system.
            </summary>
        </member>
        <member name="F:Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates.None">
            <summary>
            No flag is set.
            </summary>
        </member>
        <member name="F:Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates.Entered">
            <summary>
            The device has entered a geofence area.
            </summary>
        </member>
        <member name="F:Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates.Exited">
            <summary>
            The device has left a geofence area.
            </summary>
        </member>
        <member name="F:Windows.Devices.Geolocation.Geofencing.MonitoredGeofenceStates.Removed">
            <summary>
            The geofence has been removed.
            </summary>
        </member>
        <member name="T:Windows.Devices.Geolocation.Geolocator">
            <summary>
            Provides access to the current geographic location.
            </summary>
        </member>
        <member name="M:Windows.Devices.Geolocation.Geolocator.#ctor">
            <summary>
            Initializes a new Geolocator object.
            </summary>
        </member>
        <member name="E:Windows.Devices.Geolocation.Geolocator.StatusChanged">
            <summary>
            Raised when the ability of the Geolocator to provide updated location changes.
            </summary>
        </member>
        <member name="E:Windows.Devices.Geolocation.Geolocator.PositionChanged">
            <summary>
            Raised when the location is updated.
            </summary>
        </member>
        <member name="P:Windows.Devices.Geolocation.Geolocator.DefaultGeoposition">
            <summary>
            Gets or sets the location manually entered into the system by the user, to be utilized if no better options exist.
            </summary>
        </member>
        <member name="P:Windows.Devices.Geolocation.Geolocator.DesiredAccuracy">
            <summary>
            The accuracy level at which the Geolocator provides location updates.
            </summary>
            <remarks>
            Does not overwrite <see cref="P:Windows.Devices.Geolocation.Geolocator.DesiredAccuracyInMeters"/> directly.
            Default is equivalent to 500 meters, High is equivalent to 10 meters
            Matches UWP behavior <see href="https://docs.microsoft.com/en-us/uwp/api/windows.devices.geolocation.geolocator.desiredaccuracy#remarks">Docs</see> 
            </remarks>
        </member>
        <member name="P:Windows.Devices.Geolocation.Geolocator.DesiredAccuracyInMeters">
            <summary>
            Gets or sets the desired accuracy in meters for data returned from the location service.
            </summary>
            <remarks>
            Does not overwrite <see cref="P:Windows.Devices.Geolocation.Geolocator.DesiredAccuracy"/>. When set to null, <see cref="P:Windows.Devices.Geolocation.Geolocator.DesiredAccuracy" /> is reapplied.
            Matches UWP behavior <see href="https://docs.microsoft.com/en-us/uwp/api/windows.devices.geolocation.geolocator.desiredaccuracy#remarks">Docs</see> 
            </remarks>
        </member>
        <member name="P:Windows.Devices.Geolocation.Geolocator.IsDefaultGeopositionRecommended">
            <summary>
            Indicates whether the user should be prompted to set a default location manually.
            </summary>
            <remarks>
            Should be set to true on devices without GPS.
            </remarks>
        </member>
        <member name="P:Windows.Devices.Geolocation.Geolocator.LocationStatus">
            <summary>
            The status that indicates the ability of the Geolocator to provide location updates.
            </summary>
        </member>
        <member name="M:Windows.Devices.Geolocation.Geolocator.BroadcastStatusChanged(Windows.Devices.Geolocation.PositionStatus)">
            <summary>
            Broadcasts status change to all subscribed Geolocator instances
            </summary>
            <param name="positionStatus"></param>
        </member>
        <member name="M:Windows.Devices.Geolocation.Geolocator.OnPositionChanged(Windows.Devices.Geolocation.Geoposition)">
            <summary>
            Invokes <see cref="E:Windows.Devices.Geolocation.Geolocator.PositionChanged" /> event
            </summary>
            <param name="geoposition">Geoposition</param>
        </member>
        <member name="M:Windows.Devices.Geolocation.Geolocator.OnStatusChanged(Windows.Devices.Geolocation.PositionStatus)">
            <summary>
            Invokes <see cref="E:Windows.Devices.Geolocation.Geolocator.StatusChanged" /> event
            </summary>
            <param name="status"></param>
        </member>
        <member name="P:Windows.Devices.Geolocation.Geolocator.MovementThreshold">
            <summary>
            The distance of movement, in meters, relative to the coordinate from the last PositionChanged event,
            that is required for the Geolocator to raise a PositionChanged event. The default value is 0.
            </summary>
        </member>
        <member name="P:Windows.Devices.Geolocation.Geolocator.ReportInterval">
            <summary>
            The requested minimum time interval between location updates, in milliseconds.
            If your application requires updates infrequently, set this value so that
            location services can conserve power by calculating location only when needed.
            The default value is 1000.
            </summary>
        </member>
        <member name="M:Windows.Devices.Geolocation.Geolocator.RequestAccessAsync">
            <summary>
            Requests permission to access location data.
            </summary>
            <returns>A GeolocationAccessStatus that indicates if permission to location data has been granted.</returns>
        </member>
        <member name="M:Windows.Devices.Geolocation.Geolocator.GetGeopositionAsync">
            <summary>
            Starts an asynchronous operation to retrieve the current location of the device.
            </summary>
            <returns>An asynchronous operation that, upon completion, returns a Geoposition marking the found location.</returns>
        </member>
        <member name="M:Windows.Devices.Geolocation.Geolocator.GetGeopositionAsync(System.TimeSpan,System.TimeSpan)">
            <summary>
            Starts an asynchronous operation to retrieve the current location of the device.
            </summary>
            <param name="maximumAge">The maximum acceptable age of cached location data. A TimeSpan is a time period expressed in 100-nanosecond units.</param>
            <param name="timeout">The timeout. A TimeSpan is a time period expressed in 100-nanosecond units.</param>
            <returns>An asynchronous operation that, upon completion, returns a Geoposition marking the found location.</returns>
            <exception cref="T:System.TimeoutException">Thrown when the request times out.</exception>
        </member>
        <member name="T:Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms">
            <summary>
            Provides a set of well-known haptic waveform types
            (based on the Haptic Usage Page HID specification).
            </summary>
            <remarks>Values based on manual test.</remarks>
        </member>
        <member name="P:Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms.BuzzContinuous">
            <summary>
            Gets a buzz waveform that is generated continuously
            without interruption until terminated.
            </summary>
        </member>
        <member name="P:Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms.Click">
            <summary>
            Gets a click waveform.
            </summary>
        </member>
        <member name="P:Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms.Press">
            <summary>
            Gets a press waveform.
            </summary>
        </member>
        <member name="P:Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms.Release">
            <summary>
            Gets a release waveform.
            </summary>
        </member>
        <member name="P:Windows.Devices.Haptics.KnownSimpleHapticsControllerWaveforms.RumbleContinuous">
            <summary>
            Gets a rumble waveform that is generated continuously
            without interruption until terminated.
            </summary>
        </member>
        <member name="F:Windows.Devices.Input.PointerDeviceType.Touch">
            <summary>
            A touch-enabled device
            </summary>
        </member>
        <member name="F:Windows.Devices.Input.PointerDeviceType.Pen">
            <summary>
            Pen
            </summary>
        </member>
        <member name="F:Windows.Devices.Input.PointerDeviceType.Mouse">
            <summary>
            Mouse
            </summary>
        </member>
        <member name="M:Windows.Devices.Input.PointerIdentifier.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Windows.Devices.Input.PointerIdentifier.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Devices.Input.PointerIdentifier.Equals(Windows.Devices.Input.PointerIdentifier)">
            <inheritdoc />
        </member>
        <member name="T:Windows.Devices.Midi.IMidiMessage">
            <summary>
            Represents a MIDI message which is implemented by all MIDI message classes.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.IMidiMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.IMidiMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.IMidiMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.IMidiOutPort">
            <summary>
            Represents a single MIDI out port.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.IMidiOutPort.DeviceId">
            <summary>
            Gets the ID of the device that contains the MIDI out port.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.IMidiOutPort.SendMessage(Windows.Devices.Midi.IMidiMessage)">
            <summary>
            Send the data in the specified MIDI message to the device associated with this MidiOutPort.
            </summary>
            <param name="midiMessage">The MIDI message to send to the device.</param>
        </member>
        <member name="M:Windows.Devices.Midi.IMidiOutPort.SendBuffer(Windows.Storage.Streams.IBuffer)">
            <summary>
            Sends the contents of the buffer through the MIDI out port.
            </summary>
            <param name="midiData">The data to send to the device.</param>
        </member>
        <member name="T:Windows.Devices.Midi.MidiActiveSensingMessage">
            <summary>
            Represents a MIDI message that specifies active sensing.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiActiveSensingMessage.#ctor">
            <summary>
            Creates a new MidiActiveSensingMessage object.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiActiveSensingMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiActiveSensingMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiActiveSensingMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiChannelPressureMessage">
            <summary>
            Represents a MIDI message that specifies the channel pressure.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiChannelPressureMessage.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a new MidiChannelPressureMessage object.
            </summary>
            <param name="channel">The channel from 0-15 that this message applies to.</param>
            <param name="pressure">The pressure from 0-127.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiChannelPressureMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiChannelPressureMessage.Channel">
            <summary>
            Gets the channel from 0-15 that this message applies to.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiChannelPressureMessage.Pressure">
            <summary>
            Gets the pressure from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiChannelPressureMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiChannelPressureMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiContinueMessage">
            <summary>
            Represents a MIDI message that specifies a continue message.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiContinueMessage.#ctor">
            <summary>
            Creates a new MidiContinueMessage object.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiContinueMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiContinueMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiContinueMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiControlChangeMessage">
            <summary>
            Represents a MIDI message that specifies a control change.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiControlChangeMessage.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new MidiControlChangeMessage object.
            </summary>
            <param name="channel">The channel from 0-15 that this message applies to.</param>
            <param name="controller">The controller from 0-127 to receive this message.</param>
            <param name="controlValue">The value from 0-127 to apply to the controller.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiControlChangeMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiControlChangeMessage.Channel">
            <summary>
            Gets the channel from 0-15 that this message applies to.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiControlChangeMessage.ControlValue">
            <summary>
            Gets the value from 0-127 to apply to the controller.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiControlChangeMessage.Controller">
            <summary>
            Gets controller from 0-127 to receive this message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiControlChangeMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiControlChangeMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiInPort">
            <summary>
            Represents a port used to receive MIDI messages from a MIDI device.
            </summary>
        </member>
        <member name="E:Windows.Devices.Midi.MidiInPort.MessageReceived">
            <summary>
            Gets the id of the device that was used to initialize the MidiInPort.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiInPort.DeviceId">
            <summary>
            Gets the id of the device that was used to initialize the MidiInPort.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiInPort.FromIdAsync(System.String)">
            <summary>
            Creates a MidiInPort object for the specified device.
            </summary>
            <param name="deviceId">The device ID, which can be obtained by enumerating the devices on the system.</param>
            <returns>The asynchronous operation. Upon completion, IAsyncOperation.GetResults returns a MidiInPort object.</returns>
        </member>
        <member name="M:Windows.Devices.Midi.MidiInPort.GetDeviceSelector">
            <summary>
            Gets a query string that can be used to enumerate all MidiInPort objects on the system.
            </summary>
            <returns>The query string used to enumerate the MidiInPort objects on the system.</returns>
        </member>
        <member name="F:Windows.Devices.Midi.MidiInPort._midiPort">
            <summary>
            This is not a bug, Android uses "output" for input.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiMessageReceivedEventArgs">
            <summary>
            Provides data for the MessageReceived event.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiMessageReceivedEventArgs.Message">
            <summary>
            The MIDI message.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiMessageType">
            <summary>
            Provides constants used to map MIDI message types
            into their corresponding byte codes.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiNoteOffMessage">
            <summary>
            Represents a MIDI messages that specifies a MIDI note to turn off.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiNoteOffMessage.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new MidiNoteOffMessage object.
            </summary>
            <param name="channel">The channel from 0-15 that this message applies to.</param>
            <param name="note">The note which is specified as a value from 0-127.</param>
            <param name="velocity">The velocity which is specified as a value from 0-127.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOffMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOffMessage.Channel">
            <summary>
            Gets the channel from 0-15 that this message applies to.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOffMessage.Note">
            <summary>
            Gets the note to turn off which is specified as a value from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOffMessage.Velocity">
            <summary>
            Gets the value of the velocity from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOffMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOffMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiNoteOnMessage">
            <summary>
            Represents a MIDI message that specifies a MIDI note to turn on.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiNoteOnMessage.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new MidiNoteOnMessage object.
            </summary>
            <param name="channel">The channel from 0-15 that this message applies to.</param>
            <param name="note">The note which is specified as a value from 0-127.</param>
            <param name="velocity">The velocity which is specified as a value from 0-127.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOnMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOnMessage.Channel">
            <summary>
            Gets the channel from 0-15 that this message applies to.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOnMessage.Note">
            <summary>
            Gets the note to turn off which is specified as a value from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOnMessage.Velocity">
            <summary>
            Gets the value of the velocity from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOnMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiNoteOnMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiOutPort">
            <summary>
            Represents a port used to send MIDI messages to a MIDI device.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiOutPort.DeviceId">
            <summary>
            Gets the id of the device that was used to initialize the MidiOutPort.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiOutPort.GetDeviceSelector">
            <summary>
            Gets a query string that can be used to enumerate all MidiOutPort objects on the system.
            </summary>
            <returns>The query string used to enumerate the MidiOutPort objects on the system.</returns>
        </member>
        <member name="M:Windows.Devices.Midi.MidiOutPort.FromIdAsync(System.String)">
            <summary>
            Creates a MidiOutPort object for the specified device.
            </summary>
            <param name="deviceId">The device ID, which can be obtained by enumerating the devices on the system</param>
            <returns>The asynchronous operation. Upon completion, IAsyncOperation.GetResults returns a MidiOutPort object.</returns>
        </member>
        <member name="M:Windows.Devices.Midi.MidiOutPort.SendMessage(Windows.Devices.Midi.IMidiMessage)">
            <summary>
            Send the data in the specified MIDI message to the device associated with this MidiOutPort.
            </summary>
            <param name="midiMessage">The MIDI message to send to the device.</param>
        </member>
        <member name="M:Windows.Devices.Midi.MidiOutPort.SendBuffer(Windows.Storage.Streams.IBuffer)">
            <summary>
            Sends the contents of the buffer through the MIDI out port.
            </summary>
            <param name="midiData">The data to send to the device.</param>
        </member>
        <member name="F:Windows.Devices.Midi.MidiOutPort._midiPort">
            <summary>
            This is not a bug, Android uses "input" for output.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiPitchBendChangeMessage">
            <summary>
            Represents a MIDI message that specifies a pitch bend change.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiPitchBendChangeMessage.#ctor(System.Byte,System.UInt16)">
            <summary>
            Creates a new MidiPitchBendChangeMessage object.
            </summary>
            <param name="channel">Channel.</param>
            <param name="bend">Bend.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPitchBendChangeMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPitchBendChangeMessage.Channel">
            <summary>
            Gets the channel from 0-15 that this message applies to.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPitchBendChangeMessage.Bend">
            <summary>
            Gets the pitch bend value which is specified as a 14-bit value from 0-16383.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPitchBendChangeMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPitchBendChangeMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage">
            <summary>
            Represents a MIDI message that specifies the polyphonic key pressure.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new MidiPolyphonicKeyPressureMessage object.
            </summary>
            <param name="channel">The channel from 0-15 that this message applies to.</param>
            <param name="note">The note which is specified as a value from 0-127.</param>
            <param name="pressure">The polyphonic key pressure which is specified as a value from 0-127.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage.Channel">
            <summary>
            Gets the channel from 0-15 that this message applies to.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage.Note">
            <summary>
            Gets the note which is specified as a value from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage.Pressure">
            <summary>
            Gets the polyphonic key pressure which is specified as a value from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiPolyphonicKeyPressureMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiProgramChangeMessage">
            <summary>
            Represents a MIDI message that specifies a program change.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiProgramChangeMessage.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a new MidiProgramChangeMessage object.
            </summary>
            <param name="channel">The channel from 0-15 that this message applies to.</param>
            <param name="program">The program to change from 0-127.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiProgramChangeMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiProgramChangeMessage.Channel">
            <summary>
            Gets the channel from 0-15 that this message applies to.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiProgramChangeMessage.Program">
            <summary>
            Gets the program to change from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiProgramChangeMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiProgramChangeMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiSongPositionPointerMessage">
            <summary>
            Represents a MIDI message that specifies a song position pointer.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiSongPositionPointerMessage.#ctor(System.UInt16)">
            <summary>
            Creates a new MidiSongPositionPointerMessage object.
            </summary>
            <param name="beats">The song position pointer encoded in a 14-bit value from 0-16383.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSongPositionPointerMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSongPositionPointerMessage.Beats">
            <summary>
            Gets the song position pointer encoded in a 14-bit value from 0-16383.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSongPositionPointerMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSongPositionPointerMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiSongSelectMessage">
            <summary>
            Represents a MIDI message that specifies the selected song.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiSongSelectMessage.#ctor(System.Byte)">
            <summary>
            Creates a new MidiSongSelectMessage object.
            </summary>
            <param name="song">The song to select from 0-127.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSongSelectMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSongSelectMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSongSelectMessage.Song">
            <summary>
            Gets the song to select from 0-127.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSongSelectMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiStartMessage">
            <summary>
            Represents a MIDI message that specifies a start message.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiStartMessage.#ctor">
            <summary>
            Creates a new MidiStartMessage object.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiStartMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiStartMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiStartMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiStopMessage">
            <summary>
            Represents a MIDI message that specifies a stop message.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiStopMessage.#ctor">
            <summary>
            Creates a new MidiStopMessage object.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiStopMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiStopMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiStopMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiSystemExclusiveMessage">
            <summary>
            Represents a MIDI message that specifies a system exclusive message.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiSystemExclusiveMessage.#ctor(Windows.Storage.Streams.IBuffer)">
            <summary>
            Creates a new MidiSystemExclusiveMessage object.
            </summary>
            <param name="rawData">The system exclusive data.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSystemExclusiveMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSystemExclusiveMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSystemExclusiveMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiSystemResetMessage">
            <summary>
            Represents a MIDI message that specifies a system reset.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiSystemResetMessage.#ctor">
            <summary>
            Creates a new MidiSystemResetMessage object.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSystemResetMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSystemResetMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiSystemResetMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiTimeCodeMessage">
            <summary>
            Represents a MIDI message that specifies a time code.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiTimeCodeMessage.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a new MidiTimeCodeMessage object.
            </summary>
            <param name="frameType">The frame type from 0-7.</param>
            <param name="values">The time code from 0-15.</param>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTimeCodeMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTimeCodeMessage.FrameType">
            <summary>
            Gets the value of the frame type from 0-7.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTimeCodeMessage.Values">
            <summary>
            Gets the time code value from 0-15.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTimeCodeMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTimeCodeMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiTimingClockMessage">
            <summary>
            Represents a MIDI message that specifies a timing clock.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiTimingClockMessage.#ctor">
            <summary>
            Creates a new MidiTimingClockMessage object.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTimingClockMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTimingClockMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTimingClockMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="T:Windows.Devices.Midi.MidiTuneRequestMessage">
            <summary>
            Represents a MIDI message that specifies a tune request.
            </summary>
        </member>
        <member name="M:Windows.Devices.Midi.MidiTuneRequestMessage.#ctor">
            <summary>
            Creates a new MidiTuneRequestMessage object.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTuneRequestMessage.Type">
            <summary>
            Gets the type of this MIDI message.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTuneRequestMessage.RawData">
            <summary>
            Gets the array of bytes associated with the MIDI message, including status byte.
            </summary>
        </member>
        <member name="P:Windows.Devices.Midi.MidiTuneRequestMessage.Timestamp">
            <summary>
            Gets the duration from when the MidiInPort was created to the time the message was received.
            For messages being sent to a MidiOutPort, this value has no meaning.
            </summary>
        </member>
        <member name="M:Windows.Devices.Radios.Radio.GetRadiosAsync">
            <summary>
            Gets info about radio devices which exist on the system
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.Accelerometer.ReadingTransform">
            <summary>
            Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
            </summary>
            <remarks>
            This is not currently implemented, and acts as if <see cref="P:Windows.Devices.Sensors.Accelerometer.ReadingTransform" /> was set to <see cref="F:Windows.Graphics.Display.DisplayOrientations.Portrait" />.
            </remarks>
        </member>
        <member name="M:Windows.Devices.Sensors.Barometer.#ctor">
            <summary>
            Hides the public parameterless constructor
            </summary>
        </member>
        <member name="T:Windows.Devices.Sensors.LightSensor">
            <summary>
            Represents an ambient-light sensor.
            This sensor returns the ambient-light reading as a LUX value.
            </summary>
        </member>
        <member name="M:Windows.Devices.Sensors.LightSensor.GetDefault">
            <summary>
            Returns the default ambient-light sensor.
            </summary>
            <returns>
            The default ambient-light sensor or null
            if no integrated light sensors are found.
            </returns>
        </member>
        <member name="E:Windows.Devices.Sensors.LightSensor.ReadingChanged">
            <summary>
            Occurs each time the ambient-light sensor reports a new sensor reading.
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.LightSensor.ReportInterval">
            <summary>
            Gets or sets the current report interval for the ambient light sensor.
            </summary>
        </member>
        <member name="T:Windows.Devices.Sensors.LightSensorReading">
            <summary>
            Represents an ambient light–sensor reading.
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.LightSensorReading.IlluminanceInLux">
            <summary>
            Gets the illuminance level in lux.
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.LightSensorReading.Timestamp">
            <summary>
            Gets the time at which the sensor reported the reading.
            </summary>
        </member>
        <member name="T:Windows.Devices.Sensors.LightSensorReadingChangedEventArgs">
            <summary>
            Provides data for the ambient-light sensor reading-changed event.
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.LightSensorReadingChangedEventArgs.Reading">
            <summary>
            Gets the current ambient light-sensor reading.
            </summary>
        </member>
        <member name="T:Windows.Devices.Sensors.SimpleOrientation">
            <summary>
            Indicates the orientation of the device.
            </summary>
        </member>
        <member name="F:Windows.Devices.Sensors.SimpleOrientation.NotRotated">
            <summary>
            The device is not rotated.
            </summary>
        </member>
        <member name="F:Windows.Devices.Sensors.SimpleOrientation.Rotated90DegreesCounterclockwise">
            <summary>
            The device is rotated 90-degrees counter-clockwise.
            </summary>
        </member>
        <member name="F:Windows.Devices.Sensors.SimpleOrientation.Rotated180DegreesCounterclockwise">
            <summary>
            The device is rotated 180-degrees counter-clockwise.
            </summary>
        </member>
        <member name="F:Windows.Devices.Sensors.SimpleOrientation.Rotated270DegreesCounterclockwise">
            <summary>
            The device is rotated 270-degrees counter-clockwise.
            </summary>
        </member>
        <member name="F:Windows.Devices.Sensors.SimpleOrientation.Faceup">
            <summary>
            The device is face-up and the display is visible to the user.
            Because of a limitation of Android OnrientationListener we always return faceup when being faceup or facedown.
            </summary>
        </member>
        <member name="F:Windows.Devices.Sensors.SimpleOrientation.Facedown">
            <summary>
            The device is face-down and the display is hidden from the user.
            </summary>
        </member>
        <member name="M:Windows.Devices.Sensors.SimpleOrientationSensor.#ctor">
            <summary>
            Represents a simple orientation sensor.
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.SimpleOrientationSensor.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.SimpleOrientationSensor.ReadingTransform">
            <summary>
            Gets or sets the transformation that needs to be applied to sensor data. Transformations to be applied are tied to the display orientation with which to align the sensor data.
            </summary>
            <remarks>
            This is not currently implemented, and acts as if <see cref="P:Windows.Devices.Sensors.SimpleOrientationSensor.ReadingTransform" /> was set to <see cref="F:Windows.Graphics.Display.DisplayOrientations.Portrait" />.
            </remarks>
        </member>
        <member name="M:Windows.Devices.Sensors.SimpleOrientationSensor.GetCurrentOrientation">
            <summary>
            Gets the default simple orientation sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Windows.Devices.Sensors.SimpleOrientationSensor.OrientationChanged">
            <summary>
            Occurs each time the simple orientation sensor reports a new sensor reading.
            </summary>
        </member>
        <member name="T:Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs">
            <summary>
            Provides data for the sensor reading–changed event.
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs.Orientation">
            <summary>
            Gets the current sensor orientation.
            </summary>
        </member>
        <member name="P:Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs.Timestamp">
            <summary>
            Gets the time of the current sensor reading.
            </summary>
        </member>
        <member name="T:Windows.Extensions.PermissionsHelper">
            <summary>
            A service that determines if a permission is granted and if not, request it to the user.
            </summary>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.IsDeclaredInManifest(System.String)">
            <summary>
            Checks if the given Android permission is declared in manifest file.
            </summary>
            <param name="permission">Permission.</param>
            <returns></returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.TryGetPermission(System.Threading.CancellationToken,System.String)">
            <summary>
            Validate if a given permission was granted to the app and if not, request it to the user.
            <remarks>
            This operation is not cancellable.
            This should not be invoked directly from the application code.
            You should use the extension methods in PermissionsServiceExtensions.
            </remarks>
            </summary>
            <param name="ct">Cancellation Token</param>
            <param name="permissionIdentifier">A permission identifier defined in Manifest.Permission.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.CheckPermission(System.Threading.CancellationToken,System.String)">
            <summary>
            Validate if a given permission was granted to the app but not request it to the user
            <remarks>
            This should not be invoked directly from the application code.
            You should use the extension methods in PermissionsServiceExtensions.
            </remarks>
            </summary>
            <param name="ct">Cancellation Token</param>
            <param name="permissionIdentifier">A permission identifier defined in Manifest.Permission.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.TryGetFineLocationPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.AccessFineLocation
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.TryGetCoarseLocationPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.AccessCoarseLocation
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.TryGetWriteExternalStoragePermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.WriteExternalStorage
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.TryGetReadContactsPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.ReadContacts
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.TryGetWriteContactsPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.WriteContacts
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.TryGetCameraPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.Camera
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.CheckFineLocationPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.AccessFineLocation
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.CheckCoarseLocationPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.AccessCoarseLocation
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.CheckWriteExternalStoragePermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.WriteExternalStorage
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.CheckReadContactsPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.ReadContacts
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.CheckWriteContactsPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.WriteContacts
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Windows.Extensions.PermissionsHelper.CheckCameraPermission(System.Threading.CancellationToken)">
            <summary>
            Manifest.Permission.Camera
            </summary>
            <param name="ct">Cancellation Token</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Windows.Foundation.GuidHelper">
            <summary>
            A class containing static helper methods for working with the Guid type.
            </summary>
        </member>
        <member name="P:Windows.Foundation.GuidHelper.Empty">
            <summary>
            Gets an empty, zeroed Guid.
            </summary>
        </member>
        <member name="M:Windows.Foundation.GuidHelper.CreateNewGuid">
            <summary>
            Creates a new, unique Guid.
            </summary>
            <returns>New Guid.</returns>
        </member>
        <member name="M:Windows.Foundation.GuidHelper.Equals(System.Guid@,System.Guid@)">
            <summary>
            Checks whether given Guids are equal.
            </summary>
            <param name="target">First Guid.</param>
            <param name="value">Second Guid.</param>
            <returns>A value indicating whether the Guids are equal.</returns>
        </member>
        <member name="T:Windows.Foundation.Metadata.CreateFromStringAttribute">
            <summary>
            Creates a metadata object from a string.
            </summary>
        </member>
        <member name="M:Windows.Foundation.Metadata.CreateFromStringAttribute.#ctor">
            <summary>
            Creates an instance of the attribute.
            </summary>
        </member>
        <member name="F:Windows.Foundation.Metadata.CreateFromStringAttribute.MethodName">
            <summary>
            Full name of the method performing conversion from string.
            </summary>
        </member>
        <member name="M:Windows.Graphics.Display.BrightnessOverride.GetForCurrentView">
            <summary>
            Returns a brightness override object.
            </summary>
        </member>
        <member name="P:Windows.Graphics.Display.BrightnessOverride.BrightnessLevel">
            <summary>
            Gets the current screen brightness level.
            </summary>
        </member>
        <member name="P:Windows.Graphics.Display.BrightnessOverride.IsOverrideActive">
            <summary>
            BOOLEAN value that indicates whether the brightness override is active. 
            If TRUE, the current brightness level matches the override brightness level. 
            This property value will always be FALSE if StartOverride() isn’t called.
            </summary>
        </member>
        <member name="M:Windows.Graphics.Display.BrightnessOverride.SetBrightnessLevel(System.Double,Windows.Graphics.Display.DisplayBrightnessOverrideOptions)">
            <summary>
            Sets the brightness level within a range of 0 to 1 and the override options. 
            When your app is ready to change the current brightness with what you want to override it with, call StartOverride().
            </summary>
            <param name="brightnessLevel"> double 0 to 1  </param>
            <param name="options"></param>
        </member>
        <member name="M:Windows.Graphics.Display.BrightnessOverride.StartOverride">
            <summary>
            Request to start overriding the screen brightness level. 
            </summary>
        </member>
        <member name="M:Windows.Graphics.Display.BrightnessOverride.StopOverride">
            <summary>
            Stops overriding the brightness level.
            </summary>
        </member>
        <member name="P:Windows.Graphics.Display.DisplayInformation.NativeOrientation">
            <summary>
            Gets the native orientation of the display monitor, 
             which is typically the orientation where the buttons
             on the device match the orientation of the monitor.
            </summary>
        </member>
        <member name="P:Windows.Graphics.Display.DisplayInformation.RawDpiX">
            <summary>
            Gets the raw dots per inch (DPI) along the x axis of the display monitor.
            </summary>
            <remarks>
            As per <see href="https://docs.microsoft.com/en-us/uwp/api/windows.graphics.display.displayinformation.rawdpix#remarks">Docs</see> 
            defaults to 0 if not set
            </remarks>
        </member>
        <member name="P:Windows.Graphics.Display.DisplayInformation.RawDpiY">
            <summary>
            Gets the raw dots per inch (DPI) along the y axis of the display monitor.
            </summary>
            <remarks>
            As per <see href="https://docs.microsoft.com/en-us/uwp/api/windows.graphics.display.displayinformation.rawdpiy#remarks">Docs</see> 
            defaults to 0 if not set
            </remarks>
        </member>
        <member name="P:Windows.Graphics.Display.DisplayInformation.DiagonalSizeInInches">
            <summary>
            Diagonal size of the display in inches.
            </summary>
            <remarks>
            As per <see href="https://docs.microsoft.com/en-us/uwp/api/windows.graphics.display.displayinformation.diagonalsizeininches#property-value">Docs</see> 
            defaults to null if not set
            </remarks>
        </member>
        <member name="M:Windows.Graphics.Display.DisplayInformation.GetNativeOrientation">
            <summary>
            Sets the NativeOrientation property
            </summary>
            <remarks>
            Based on responses in
            https://stackoverflow.com/questions/4553650/how-to-check-device-natural-default-orientation-on-android-i-e-get-landscape this SO question
            </remarks>
        </member>
        <member name="M:Windows.Graphics.Display.DisplayInformation.GetCurrentOrientation">
            <summary>
            Sets the CurrentOrientation property
            </summary>
            <remarks>
            Again quite complicated to do on Android, based on accepted solution at
            https://stackoverflow.com/questions/10380989/how-do-i-get-the-current-orientation-activityinfo-screen-orientation-of-an-a this SO question
            </remarks>
        </member>
        <member name="T:Windows.Graphics.Display.DisplayBrightnessOverrideOptions">
            <summary>
            Describes the options that modify the brightness level of the screen during the override session. When UseDimmedPolicyWhenBatteryIsLow is set, it reduces the specified override brightness level in order to conserve battery if the device battery is low during the override session. For example, if the override brightness level is set to 100% and UseDimmedPolicyWhenBatteryIsLow is set, the screen will dim to 70% instead.
            </summary>
        </member>
        <member name="F:Windows.Graphics.Display.DisplayBrightnessOverrideOptions.None">
            <summary>
            Screen display stays at the specified override brightness level when the device battery is low.
            </summary>
        </member>
        <member name="F:Windows.Graphics.Display.DisplayBrightnessOverrideOptions.UseDimmedPolicyWhenBatteryIsLow">
            <summary>
            Screen display dims when the device battery is low and a brightness override session is running.
            </summary>
        </member>
        <member name="T:Windows.Graphics.Display.DisplayOrientations">
            <summary>
            Describes the orientation of a rectangular monitor.
            </summary>
        </member>
        <member name="F:Windows.Graphics.Display.DisplayOrientations.None">
            <summary>
            No display orientation is specified.
            </summary>
        </member>
        <member name="F:Windows.Graphics.Display.DisplayOrientations.Landscape">
            <summary>
            Specifies that the monitor is oriented in landscape mode where the width of the display viewing area is greater than the height.
            </summary>
        </member>
        <member name="F:Windows.Graphics.Display.DisplayOrientations.Portrait">
            <summary>
            Specifies that the monitor rotated 90 degrees in the clockwise direction to orient the display in portrait mode where the height of the display viewing area is greater than the width.
            </summary>
        </member>
        <member name="F:Windows.Graphics.Display.DisplayOrientations.LandscapeFlipped">
            <summary>
            Specifies that the monitor rotated another 90 degrees in the clockwise direction (to equal 180 degrees) to orient the display in landscape mode where the width of the display viewing area is greater than the height. This landscape mode is flipped 180 degrees from the **Landscape** mode.
            </summary>
        </member>
        <member name="F:Windows.Graphics.Display.DisplayOrientations.PortraitFlipped">
            <summary>
            Specifies that the monitor rotated another 90 degrees in the clockwise direction (to equal 270 degrees) to orient the display in portrait mode where the height of the display viewing area is greater than the width. This portrait mode is flipped 180 degrees from the **Portrait** mode.
            </summary>
        </member>
        <member name="T:Windows.Networking.Connectivity.ConnectionCost">
            <summary>
            Provides access to property values that indicate the current cost of a network connection.
            </summary>
        </member>
        <member name="P:Windows.Networking.Connectivity.ConnectionCost.NetworkCostType">
            <summary>
            Gets a value that indicates the current network cost for a connection.
            </summary>
        </member>
        <member name="T:Windows.Networking.Connectivity.ConnectionProfile">
            <summary>
            Represents a network connection, which includes either the currently
            connected network or prior network connections. Provides information
            about the connection status and connectivity statistics.
            </summary>
            <summary>
            Current Android implementation covers the active network connection (Internet connection profile).
            </summary>
        </member>
        <member name="M:Windows.Networking.Connectivity.ConnectionProfile.GetNetworkConnectivityLevel">
            <summary>
            Gets the network connectivity level for this connection.
            This value indicates what network resources, if any, are currently available.
            </summary>
            <returns>The level of network connectivity.</returns>
        </member>
        <member name="P:Windows.Networking.Connectivity.ConnectionProfile.IsWwanConnectionProfile">
            <summary>
            Gets a value that indicates if connection profile is a WWAN (mobile) connection.
            </summary>
            <remarks>If this cannot be determined on the given platform, it remains false.</remarks>
        </member>
        <member name="P:Windows.Networking.Connectivity.ConnectionProfile.IsWlanConnectionProfile">
            <summary>
            Gets a value that indicates if connection profile is a WLAN (WiFi) connection.
            </summary>
            <remarks>If this cannot be determined on the given platform, it remains false.</remarks>		
        </member>
        <member name="M:Windows.Networking.Connectivity.ConnectionProfile.GetNetworkConnectivityLevelImpl">
            <summary>
            Code based on Xamarin.Essentials implementation with some modifications.
            </summary>		
            <returns>Connectivity level.</returns>
        </member>
        <member name="M:Windows.Networking.Connectivity.NetworkInformation.GetInternetConnectionProfile">
            <summary>
            Gets the connection profile associated with the internet connection currently used by the local machine.
            </summary>
            <returns>The profile for the connection currently used to connect the machine to the Internet,
            or null if there is no connection profile with a suitable connection.</returns>
        </member>
        <member name="M:Windows.Networking.Connectivity.NetworkInformation.OnDelayedNetworkStatusChanged">
            <summary>
            This raises the NetworkStatusChanged event with a delay.
            Delay is necessary as network information is not updated before
            the connectivity broadcast on Android is received.
            </summary>
        </member>
        <member name="T:Windows.Networking.Connectivity.NetworkConnectivityLevel">
            <summary>
            Defines the level of connectivity currently available.
            </summary>
        </member>
        <member name="F:Windows.Networking.Connectivity.NetworkConnectivityLevel.None">
            <summary>
            No connectivity.
            </summary>
        </member>
        <member name="F:Windows.Networking.Connectivity.NetworkConnectivityLevel.LocalAccess">
            <summary>
            Local network access only.
            </summary>
        </member>
        <member name="F:Windows.Networking.Connectivity.NetworkConnectivityLevel.ConstrainedInternetAccess">
            <summary>
            Limited internet access.		
            </summary>
            <remarks>
            This value indicates captive portal connectivity, where local access to a web portal is provided,
            but access to the Internet requires that specific credentials are provided via the portal.
            This level of connectivity is generally encountered when using connections hosted in public
            locations(for example, coffee shops and book stores).
            </remarks>
        </member>
        <member name="F:Windows.Networking.Connectivity.NetworkConnectivityLevel.InternetAccess">
            <summary>
            Local and Internet access.
            </summary>
        </member>
        <member name="T:Windows.Networking.Connectivity.NetworkCostType">
            <summary>
            Defines the network cost types.
            </summary>
        </member>
        <member name="F:Windows.Networking.Connectivity.NetworkCostType.Unknown">
            <summary>
            Cost information is not available.
            </summary>
        </member>
        <member name="F:Windows.Networking.Connectivity.NetworkCostType.Unrestricted">
            <summary>
            The connection is unlimited and has unrestricted usage charges and capacity constraints.
            </summary>
        </member>
        <member name="F:Windows.Networking.Connectivity.NetworkCostType.Fixed">
            <summary>
            The use of this connection is unrestricted up to a specific limit.
            </summary>
        </member>
        <member name="F:Windows.Networking.Connectivity.NetworkCostType.Variable">
            <summary>
            The connection is costed on a per-byte basis.
            </summary>
        </member>
        <member name="T:Windows.Networking.Connectivity.NetworkStatusChangedEventHandler">
            <summary>
            Represents the method that handles network status change notifications.
            This method is called when any properties exposed by the NetworkInformation object changes while the app is active.
            </summary>
            <param name="sender">A Object that raised the event.</param>
        </member>
        <member name="T:Windows.Networking.HostName">
            <summary>
            Provides data for a hostname or an IP address.
            </summary>
        </member>
        <member name="P:Windows.Networking.HostName.CanonicalName">
            <summary>
            Gets the canonical name for the HostName object.
            </summary>
        </member>
        <member name="P:Windows.Networking.HostName.DisplayName">
            <summary>
            Gets the display name for the HostName object.
            </summary>
        </member>
        <member name="P:Windows.Networking.HostName.IPInformation">
            <summary>
            Gets the IPInformation object for a local IP address assigned to a HostName object.
            </summary>
        </member>
        <member name="P:Windows.Networking.HostName.RawName">
            <summary>
            Gets the original string used to construct the HostName object.
            </summary>
        </member>
        <member name="P:Windows.Networking.HostName.Type">
            <summary>
            Gets the HostNameType of the HostName object.
            </summary>
        </member>
        <member name="T:Windows.Networking.HostNameType">
            <summary>
            The type of a HostName object.	
            </summary>
        </member>
        <member name="F:Windows.Networking.HostNameType.DomainName">
            <summary>
            A domain name.
            </summary>
        </member>
        <member name="F:Windows.Networking.HostNameType.Ipv4">
            <summary>
            An IPv4 address.
            </summary>
        </member>
        <member name="F:Windows.Networking.HostNameType.Ipv6">
            <summary>
            An IPv6 address.
            </summary>
        </member>
        <member name="F:Windows.Networking.HostNameType.Bluetooth">
            <summary>
            A Bluetooth address. This represents the hardware or media access control (MAC) address for a Bluetooth device.
            </summary>
        </member>
        <member name="T:Windows.Security.Authentication.Web.WebAuthenticationOptions">
            <summary>
            Contains the options available to the asynchronous operation.
            </summary>
        </member>
        <member name="F:Windows.Security.Authentication.Web.WebAuthenticationOptions.None">
            <summary>
            No options are requested.
            </summary>
        </member>
        <member name="F:Windows.Security.Authentication.Web.WebAuthenticationOptions.SilentMode">
            <summary>
            Tells the web authentication broker to not render any UI. This option will throw an exception if used with AuthenticateAndContinue; AuthenticateSilentlyAsync, which includes this option implicitly, should be used instead.
            </summary>
        </member>
        <member name="F:Windows.Security.Authentication.Web.WebAuthenticationOptions.UseTitle">
            <summary>
            Tells the web authentication broker to return the window title string of the webpage in the ResponseData property.
            </summary>
        </member>
        <member name="F:Windows.Security.Authentication.Web.WebAuthenticationOptions.UseHttpPost">
            <summary>
            Tells the web authentication broker to return the body of the HTTP POST in the ResponseData property. For use with single sign-on (SSO) only.
            </summary>
        </member>
        <member name="F:Windows.Security.Authentication.Web.WebAuthenticationOptions.UseCorporateNetwork">
            <summary>
            Tells the web authentication broker to render the webpage in an app container that supports privateNetworkClientServer, enterpriseAuthentication, and sharedUserCertificate capabilities. Note the application that uses this flag must have these capabilities as well.
            </summary>
        </member>
        <member name="T:Windows.Security.Credentials.PasswordVault.IPersister">
            <summary>
            A persister responsible to securely persist the credentials managed by a PasswordVault
            </summary>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.IPersister.TryOpenRead(System.IO.Stream@)">
            <summary>
            Tries to open the source stream from which credentials can be read.
            </summary>
            <param name="inputStream">The source stream which should be parsed to reload credentials</param>
            <returns>A bool which indicates if the <paramref name="inputStream"/> is valid or not.</returns>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.IPersister.OpenWrite(System.IO.Stream@)">
            <summary>
            Open the target stream which where credentials should be stored.
            </summary>
            <param name="outputStream">The target stream where credentials can be stored</param>
            <returns>A <see cref="T:Windows.Security.Credentials.PasswordVault.WriteTransaction"/> which ensure to atomatically update the credentials</returns>
        </member>
        <member name="T:Windows.Security.Credentials.PasswordVault.WriteTransaction">
            <summary>
            A transaction used to persist credentials to ensure ACID
            </summary>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.WriteTransaction.#ctor(System.Action,System.Action{System.Boolean})">
            <summary>
            Creates a new transaction
            </summary>
            <param name="onCommit">Callback invoked when this transaction is committed (cf. <see cref="M:Windows.Security.Credentials.PasswordVault.WriteTransaction.Commit"/>.</param>
            <param name="onComplete">Callback invoked when this transaction completes (i.e. Disposed).</param>
        </member>
        <member name="P:Windows.Security.Credentials.PasswordVault.WriteTransaction.IsCommited">
            <summary>
            A boolean which indicates if this transaction was committed or not (cf. <see cref="M:Windows.Security.Credentials.PasswordVault.WriteTransaction.Commit"/>).
            </summary>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.WriteTransaction.Commit">
            <summary>
            Makes the changes persistent
            </summary>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.WriteTransaction.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Windows.Security.Credentials.PasswordVault.FilePersister">
            <summary>
            A base class to persist a PasswordVault in a file on the disk
            </summary>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.FilePersister.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="filePath">The path where the vault should be persisted</param>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.FilePersister.Encrypt(System.IO.Stream)">
            <summary>
            Wraps a given encrypted stream into a stream which ensure decryption
            </summary>
            <param name="outputStream">The encrypted stream</param>
            <returns>The decrypted stream</returns>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.FilePersister.Decrypt(System.IO.Stream)">
            <summary>
            Wraps a given raw stream into a stream which ensure encryption
            </summary>
            <param name="inputStream">The raw stream</param>
            <returns>The encrypted stream</returns>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.FilePersister.TryOpenRead(System.IO.Stream@)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.FilePersister.OpenWrite(System.IO.Stream@)">
            <inheritdoc />
        </member>
        <member name="T:Windows.Security.Credentials.PasswordVault.UnsecuredPersister">
            <summary>
            A basically encrypted persister which does not provide an acceptable security level for sensitive data like a password.
            </summary>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.UnsecuredPersister.#ctor(System.Byte[],System.Byte[],System.String)">
            <summary>
            Creates a new instance providing the secrets for encryption (TripleDES)
            </summary>
            <param name="key">The key, must be 24 bytes length</param>
            <param name="iv">The IV, must be 8 bytes length</param>
            <param name="filePath">The path where the vault should be persisted</param>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.UnsecuredPersister.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance providing a simple password used to encrypt the file
            </summary>
            <param name="password">The password used to encrypt the file</param>
            <param name="filePath">The path where the vault should be persisted</param>
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.KeyStorePersister.Encrypt(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Security.Credentials.PasswordVault.KeyStorePersister.Decrypt(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:Windows.Security.Credentials.PasswordVault.UnSecureKeyStorePersister">
            <summary>
            Persister for devices bellow Android level 23.
            RSA/ECB/PKCS1Padding only is supported and is not considered secure.
            </summary>
        </member>
        <member name="T:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation">
            <summary>
            Provides the app with the ability to retrieve device information from the local device.
            </summary>
        </member>
        <member name="M:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.#ctor">
            <summary>
            Creates an instance of an object that allows the caller
            app to retrieve device information from the local device.
            </summary>
        </member>
        <member name="P:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.FriendlyName">
            <summary>
            Gets the friendly name of the local device.
            This value might come from a NetBIOS computer name.
            </summary>
        </member>
        <member name="P:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.Id">
            <summary>
            Returns the identifier of the local device.
            </summary>
        </member>
        <member name="P:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.OperatingSystem">
            <summary>
            Gets the name of the operating system of the local device.
            </summary>
        </member>
        <member name="P:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.SystemManufacturer">
            <summary>
            Gets the system manufacturer of the local device.
            Use SystemManufacturer only if the value of SystemSku is empty.
            </summary>
        </member>
        <member name="P:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.SystemProductName">
            <summary>
            Gets the system product name of the local device.
            Use SystemProductName only if the value of SystemSku is empty.
            </summary>
        </member>
        <member name="P:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.SystemSku">
            <summary>
            Gets the system SKU of the local device.
            </summary>
        </member>
        <member name="P:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.SystemFirmwareVersion">
            <summary>
            Gets the system firmware version of the local device.
            </summary>
        </member>
        <member name="P:Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.SystemHardwareVersion">
            <summary>
            Gets the system hardware version of the local device.
            </summary>
        </member>
        <member name="P:Windows.Services.Store.StoreProduct.StoreId">
            <summary>
            Gets the Store ID for this product.
            </summary>
            <remarks>
            For example (Twitter app):
            Windows: 9wzdncrfj140
            iOS: 333903271
            Android: com.twitter.android
            </remarks>
        </member>
        <member name="P:Windows.Services.Store.StoreProduct.LinkUri">
            <summary>
            Gets the URI to the Store listing for the product.
            </summary>
            <remarks>
            For example (Twitter app): 
            Windows: https://www.microsoft.com/store/apps/9wzdncrfj140
            iOS: https://itunes.apple.com/app/id333903271
            Android: https://play.google.com/store/apps/details?id=com.twitter.android
            </remarks>
        </member>
        <member name="T:Windows.Storage.Pickers.FileExtensionVector">
            <summary>
            Represents a random-access collection of file name extensions.
            </summary>
        </member>
        <member name="T:Windows.Storage.Pickers.FileOpenPicker">
            <summary>
            Represents a UI element that lets the user choose and open files.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileOpenPicker.FileTypeFilter">
            <summary>
            Gets the collection of file types that the folder picker displays.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileOpenPicker.ViewMode">
            <summary>
            Gets or sets the view mode that the folder picker uses to display items.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileOpenPicker.SuggestedStartLocation">
            <summary>
            Gets or sets the location that the file save picker suggests to the user as the location to save a file.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileOpenPicker.SettingsIdentifier">
            <summary>
            Gets or sets the settings identifier associated with the current FileSavePicker instance.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileOpenPicker.CommitButtonText">
            <summary>
            Gets or sets the label text of the commit button in the file picker UI.
            </summary>
        </member>
        <member name="M:Windows.Storage.Pickers.FileOpenPicker.PickSingleFileAsync(System.String)">
            <summary>
            Shows the file picker so that the user can pick one file.
            </summary>
            <param name="pickerOperationId">This argument is ignored and has no effect.</param>
            <returns>When the call to this method completes successfully, it returns a <see cref="T:Windows.Storage.StorageFile"/> 
            object that represents the file that the user picked.</returns>
        </member>
        <member name="M:Windows.Storage.Pickers.FileOpenPicker.PickSingleFileAsync">
            <summary>
            Shows the file picker so that the user can pick one file.
            </summary>
            <returns>When the call to this method completes successfully, it returns a <see cref="T:Windows.Storage.StorageFile"/> 
            object that represents the file that the user picked.</returns>
        </member>
        <member name="M:Windows.Storage.Pickers.FileOpenPicker.PickMultipleFilesAsync">
            <summary>
            Shows the file picker so that the user can pick multiple files.
            </summary>
            <returns>When the call to this method completes successfully, it returns a <see cref="T:Windows.Storage.Pickers.FilePickerSelectedFilesArray"/> object that contains
            all the files that were picked by the user. Picked files in this array are represented by <see cref="T:Windows.Storage.StorageFile"/> objects.</returns>
        </member>
        <member name="T:Windows.Storage.Pickers.FilePickerFileTypesOrderedMap">
            <summary>
            Represents a collection of display names mapped to the associated file types (extensions).
            Each element in this collection maps a display name to a corresponding collection of file name extensions.
            The key is a single string, the value is a list/vector of strings representing one or more extension choices.
            </summary>
        </member>
        <member name="T:Windows.Storage.Pickers.FilePickerSelectedFilesArray">
            <summary>
            Represents a collection of storage files that the user has selected by using a file picker.
            </summary>
        </member>
        <member name="T:Windows.Storage.Pickers.FileSavePicker">
            <summary>
            Represents a file picker that lets the user choose the file name, extension, and storage location for a file.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileSavePicker.FileTypeChoices">
            <summary>
            Gets the collection of valid file types that the user can choose to assign to a file.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileSavePicker.SuggestedStartLocation">
            <summary>
            Gets or sets the location that the file save picker suggests to the user as the location to save a file.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileSavePicker.SuggestedFileName">
            <summary>
            Gets or sets the file name that the file save picker suggests to the user.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileSavePicker.SettingsIdentifier">
            <summary>
            Gets or sets the settings identifier associated with the current FileSavePicker instance.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileSavePicker.SuggestedSaveFile">
            <summary>
            Gets or sets the storageFile that the file picker suggests to the user for saving a file.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FileSavePicker.CommitButtonText">
            <summary>
            Gets or sets the label text of the commit button in the file picker UI.
            </summary>
        </member>
        <member name="M:Windows.Storage.Pickers.FileSavePicker.PickSaveFileAsync">
            <summary>
            Shows the file picker so that the user can save a file and set the file name, extension, and location of the file to be saved.
            </summary>
            <returns>
            When the call to this method completes successfully, it returns a <see cref="T:Windows.Storage.StorageFile"/> object that was created to represent the saved file.
            The file name, extension, and location of this <see cref="T:Windows.Storage.StorageFile"/> match those specified by the user, but the file has no content.
            To save the content of the file, your app must write the content to this <see cref="T:Windows.Storage.StorageFile"/>.
            </returns>
        </member>
        <member name="T:Windows.Storage.Pickers.FolderPicker">
            <summary>
            Represents a UI element that lets the user choose folders.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FolderPicker.FileTypeFilter">
            <summary>
            Gets the collection of file types that the folder picker displays.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FolderPicker.ViewMode">
            <summary>
            Gets or sets the view mode that the folder picker uses to display items.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FolderPicker.SuggestedStartLocation">
            <summary>
            Gets or sets the location that the file save picker suggests to the user as the location to save a file.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FolderPicker.SuggestedFileName">
            <summary>
            Gets or sets the file name that the file save picker suggests to the user.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FolderPicker.SettingsIdentifier">
            <summary>
            Gets or sets the settings identifier associated with the current FileSavePicker instance.
            </summary>
        </member>
        <member name="P:Windows.Storage.Pickers.FolderPicker.CommitButtonText">
            <summary>
            Gets or sets the label text of the commit button in the file picker UI.
            </summary>
        </member>
        <member name="M:Windows.Storage.Pickers.FolderPicker.PickSingleFolderAsync">
            <summary>
            Shows the folderPicker object so that the user can pick a folder.
            </summary>
            <returns>When the call to this method completes successfully, it returns a <see cref="T:Windows.Storage.StorageFolder"/>
            object that represents the folder that the user picked.</returns>
        </member>
        <member name="T:Windows.Storage.Pickers.PickerViewMode">
            <summary>
            Indicates the view mode that the file picker is using to present items.
            </summary>
        </member>
        <member name="F:Windows.Storage.Pickers.PickerViewMode.List">
            <summary>
            A list of items.
            </summary>
        </member>
        <member name="F:Windows.Storage.Pickers.PickerViewMode.Thumbnail">
            <summary>
            A set of thumbnail images.
            </summary>
        </member>
        <member name="T:Windows.Storage.Provider.FileUpdateStatus">
            <summary>
            Describes the status of a file update request.
            </summary>
        </member>
        <member name="F:Windows.Storage.Provider.FileUpdateStatus.Incomplete">
            <summary>
            The file update was not fully completed and should be retried.
            </summary>
        </member>
        <member name="F:Windows.Storage.Provider.FileUpdateStatus.Complete">
            <summary>
            The file update was completed successfully.
            </summary>
        </member>
        <member name="F:Windows.Storage.Provider.FileUpdateStatus.UserInputNeeded">
            <summary>
            User input (like credentials) is needed to update the file.
            </summary>
        </member>
        <member name="F:Windows.Storage.Provider.FileUpdateStatus.CurrentlyUnavailable">
            <summary>
            The remote version of the file was not updated because the storage location
            wasn't available. The file remains valid and subsequent updates
            to the file may succeed.
            </summary>
        </member>
        <member name="F:Windows.Storage.Provider.FileUpdateStatus.Failed">
            <summary>
            The file is now invalid and can't be updated now or in the future. For example,
            this could occur if the remote version of the file was deleted.
            </summary>
        </member>
        <member name="F:Windows.Storage.Provider.FileUpdateStatus.CompleteAndRenamed">
            <summary>
            The file update was completed successfully and the file has been renamed.
            For example, this could occur if the user chose to save their changes under
            a different file name because of conflicting changes made to the remote
            version of the file.
            </summary>
        </member>
        <member name="F:Windows.Storage.Streams.Buffer.DefaultCapacity">
            <summary>
            A default length to use for buffer copy when none specified
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.Buffer.Span">
            <summary>
            Retrieve the underlying data array.
            WARNING: DANGEROUS PROPERTY cf. remarks
            </summary>
            <remarks>
            This property gives direct access to the underlying data, which means that if it is being modified,
            this buffer won't automatically reflect the change.
            **It's your responsibility to update it.**
            For instance if you write some data in the array,
            you have to make sure to update the <see cref="P:Windows.Storage.Streams.Buffer.Length"/> of this buffer accordingly.
            </remarks>
        </member>
        <member name="M:Windows.Storage.Streams.Buffer.GetSegment">
            <summary>
            Retrieve the underlying data array.
            WARNING: DANGEROUS METHOD cf. remarks
            </summary>
            <remarks>
            The <see cref="P:System.ArraySegment`1.Array"/> of the return cannot be null.
            This method will throw an <see cref="T:System.InvalidOperationException"/> in that case.
            </remarks>
            <remarks>
            This method gives direct access to the underlying data, which means that if it is being modified,
            this buffer won't automatically reflect the change.
            **It's your responsibility to update it.**
            For instance if you write some data in the array,
            you have to make sure to update the <see cref="P:Windows.Storage.Streams.Buffer.Length"/> of this buffer accordingly.
            </remarks>
        </member>
        <member name="M:Windows.Storage.Streams.Buffer.ToArray">
            <summary>
            **CLONES** the content of this buffer into a new byte[]
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.Buffer.AsReadOnlyMemory">
            <summary>
            Gets a <see cref="T:System.ReadOnlyMemory`1"/> of the current buffer
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.Buffer.ToArray(System.UInt32,System.Int32)">
            <summary>
            **CLONES** a part of the content of this buffer into a new byte[]
            </summary>
        </member>
        <member name="T:Windows.Storage.Streams.DataReader">
            <summary>
            Reads data from an input stream.
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.FromBuffer(Windows.Storage.Streams.IBuffer)">
            <summary>
            Creates a new instance of the data reader with data from the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The data reader.</returns>
        </member>
        <member name="P:Windows.Storage.Streams.DataReader.UnicodeEncoding">
            <summary>
            Gets or sets the Unicode character encoding for the input stream.
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.DataReader.ByteOrder">
            <summary>
            Gets or sets the byte order of the data in the input stream.
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.DataReader.UnconsumedBufferLength">
            <summary>
            Gets the size of the buffer that has not been read.
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadByte">
            <summary>
            Reads a byte value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadBytes(System.Byte[])">
            <summary>
            Reads an array of byte values from the input stream.
            </summary>
            <param name="value">The array that receives the byte values.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadBuffer(System.UInt32)">
            <summary>
            Reads a buffer from the input stream.
            </summary>
            <param name="length">The length of the buffer, in bytes.</param>
            <returns>The buffer.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadDateTime">
            <summary>
            Reads a date and time value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadBoolean">
            <summary>
            Reads a Boolean value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadGuid">
            <summary>
            Reads a GUID value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadInt16">
            <summary>
            Reads a 16-bit integer value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadInt32">
            <summary>
            Reads a 32-bit integer value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadInt64">
            <summary>
            Reads a 64-bit integer value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadSingle">
            <summary>
            Reads a floating-point value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadDouble">
            <summary>
            Reads a floating-point value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadString(System.UInt32)">
            <summary>
            Reads a string value from the input stream.
            </summary>
            <param name="codeUnitCount">The length of the string.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.ReadTimeSpan">
            <summary>
            Reads a time-interval value from the input stream.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.DetachBuffer">
            <summary>
            Detaches the buffer that is associated with the data reader.
            This is useful if you want to retain the buffer after you dispose the data reader.
            </summary>
            <returns>The detached buffer.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Windows.Storage.Streams.DataWriter">
            <summary>
            Writes data to an output stream.
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.#ctor">
            <summary>
            Creates and initializes a new instance of the data writer.
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.DataWriter.UnicodeEncoding">
            <summary>
            Gets or sets the Unicode character encoding for the output stream.
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.DataWriter.ByteOrder">
            <summary>
            Gets or sets the byte order of the data in the output stream.
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.DataWriter.UnstoredBufferLength">
            <summary>
            Gets the size of the buffer that has not been used.
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.FlushAsync">
            <summary>
            Flushes data asynchronously.
            </summary>
            <returns>The stream flush operation.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes an array of byte values to the output stream.
            </summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteBuffer(Windows.Storage.Streams.IBuffer)">
            <summary>
            Writes the contents of the specified buffer to the output stream.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteBuffer(Windows.Storage.Streams.IBuffer,System.UInt32,System.UInt32)">
            <summary>
            Writes the specified bytes from a buffer to the output stream.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="start">The starting byte.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a Boolean value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteGuid(System.Guid)">
            <summary>
            Writes a GUID value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a 16-bit integer value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteInt32(System.Int32)">
            <summary>
            Writes a 32-bit integer value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a 64-bit integer value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteUInt32(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteUInt64(System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteSingle(System.Single)">
            <summary>
            Writes a floating-point value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteDouble(System.Double)">
            <summary>
            Writes a floating-point value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteDateTime(System.DateTimeOffset)">
            <summary>
            Writes a date and time value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteTimeSpan(System.TimeSpan)">
            <summary>
            Writes a time-interval value to the output stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.WriteString(System.String)">
            <summary>
            Writes a string value to the output stream.
            </summary>
            <param name="value">The value.</param>
            <returns>The length of the string, in bytes.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.MeasureString(System.String)">
            <summary>
            Gets the size of a string.
            </summary>
            <param name="value">The string.</param>
            <returns>The size of the string, in bytes.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.DetachBuffer">
            <summary>
            Detaches the buffer that is associated with the data writer.
            </summary>
            <returns>The detached buffer.</returns>
        </member>
        <member name="M:Windows.Storage.Streams.DataWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.FileInputStream.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.FileInputStream.ReadAsync(Windows.Storage.Streams.IBuffer,System.UInt32,Windows.Storage.Streams.InputStreamOptions)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.FileOutputStream.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.FileOutputStream.WriteAsync(Windows.Storage.Streams.IBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.FileOutputStream.FlushAsync">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.InputStreamOverStream.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.InputStreamOverStream.ReadAsync(Windows.Storage.Streams.IBuffer,System.UInt32,Windows.Storage.Streams.InputStreamOptions)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.OutputStreamOverStream.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.OutputStreamOverStream.WriteAsync(Windows.Storage.Streams.IBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.OutputStreamOverStream.FlushAsync">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamOverStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamOverStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamOverStream.Position">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamOverStream.Size">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamOverStream.ReadAsync(Windows.Storage.Streams.IBuffer,System.UInt32,Windows.Storage.Streams.InputStreamOptions)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamOverStream.WriteAsync(Windows.Storage.Streams.IBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamOverStream.FlushAsync">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamOverStream.CloneStream">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamOverStream.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Windows.Storage.Streams.InMemoryBuffer">
            <summary>
            This class is no longer needed and can be removed
            as part of breaking changes batch (all its occurences can be replaced by
            Buffer class, which has equivalent functionality.
            </summary>
        </member>
        <member name="T:Windows.Storage.Streams.IStreamedDataLoader">
            <summary>
            This is responsible to asynchronously load the content of a remote content into a temporary file
            </summary>
            <remarks>
            The temporary file belong to this downloader.
            It's is responsibility to delete it on dispose.
            Users have to keep an active reference on this downloader to maintain the file alive.
            It might however has to share the file with an <see cref="T:Windows.Storage.Streams.IStreamedDataUploader"/>.
            </remarks>
        </member>
        <member name="E:Windows.Storage.Streams.IStreamedDataLoader.DataUpdated">
            <summary>
            An event raised when some data has been saved into the temporary file.
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.IStreamedDataLoader.File">
            <summary>
            Gets the temporary file in which data is loaded
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.IStreamedDataLoader.ContentType">
            <summary>
            The content type of the loaded data
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.IStreamedDataLoader.CheckState">
            <summary>
            Throws an exception if the load failed
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.IStreamedDataLoader.CanRead(System.UInt64)">
            <summary>
            Indicates if the given position has been or not yet,
            **or** the load is now completed and the given position will never be present.
            </summary>
        </member>
        <member name="T:Windows.Storage.Streams.IStreamedDataUploader">
            <summary>
            This is responsible to asynchronously upload the content of a remote
            </summary>
            <remarks>
            The temporary file belong to this uploader.
            It's is responsibility to delete it on dispose.
            Users have to keep an active reference on this uploader to maintain the file alive.
            It might however has to share the file with an <see cref="T:Windows.Storage.Streams.IStreamedDataLoader"/>.
            </remarks>
        </member>
        <member name="P:Windows.Storage.Streams.IStreamedDataUploader.File">
            <summary>
            Gets the temporary file in which data is loaded
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.IStreamedDataUploader.CheckState">
            <summary>
            Throws an exception if the load failed
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.IStreamedDataUploader.Push(System.UInt64,System.UInt64,System.Threading.CancellationToken)">
            <summary>
            Send a chunk of data to the remote
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.#ctor(Windows.Storage.Streams.IRandomAccessStream,System.String)">
            <summary>
            -- DO NOT USE -- Prefer to use the System.IO.WindowsRuntimeStreamExtensions.TrySetContentType
            The only valid use-case is when you explicitly know that the provided stream does not implement IRandomAccessStreamWithContentType
            </summary>
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamWithContentType.ContentType">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.ReadAsync(Windows.Storage.Streams.IBuffer,System.UInt32,Windows.Storage.Streams.InputStreamOptions)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.WriteAsync(Windows.Storage.Streams.IBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.FlushAsync">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamWithContentType.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamWithContentType.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamWithContentType.Position">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.RandomAccessStreamWithContentType.Size">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.GetInputStreamAt(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.GetOutputStreamAt(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.Seek(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.RandomAccessStreamWithContentType.CloneStream">
            <inheritdoc />
        </member>
        <member name="E:Windows.Storage.Streams.StreamedCustomDataLoader.DataUpdated">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamedCustomDataLoader.File">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamedCustomDataLoader.ContentType">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedCustomDataLoader.CheckState">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedCustomDataLoader.CanRead(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedOutputStream.#ctor(Windows.Storage.Streams.IStreamedDataUploader,System.UInt64)">
            <summary>
            Creates a new StreamedOutputStream.
            This will self-open the temporary file and will take ownership of the opened stream.
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.StreamedOutputStream.#ctor(System.IO.Stream,Windows.Storage.Streams.IStreamedDataUploader)">
            <summary>
            Creates a new StreamedOutputStream using a **shared** file stream.
            This stream won't have ownership of the file and won't close/dispose it.
            </summary>
        </member>
        <member name="M:Windows.Storage.Streams.StreamedOutputStream.WriteAsync(Windows.Storage.Streams.IBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedOutputStream.FlushAsync">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamedRandomAccessStream.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamedRandomAccessStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamedRandomAccessStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamedRandomAccessStream.Position">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamedRandomAccessStream.Size">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedRandomAccessStream.ReadAsync(Windows.Storage.Streams.IBuffer,System.UInt32,Windows.Storage.Streams.InputStreamOptions)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedRandomAccessStream.WriteAsync(Windows.Storage.Streams.IBuffer)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedRandomAccessStream.FlushAsync">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedRandomAccessStream.GetInputStreamAt(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedRandomAccessStream.GetOutputStreamAt(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedRandomAccessStream.Seek(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedRandomAccessStream.CloneStream">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedRandomAccessStream.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedUriDataLoader.Create(System.Threading.CancellationToken,System.Uri,System.Net.Http.HttpMethod,System.Net.Http.HttpClient,Windows.Storage.TemporaryFile)">
            <summary>
            Asynchronously creates a StreamedDataLoader.
            </summary>
            <remarks>This will make sure to have successfully contacted the server and loaded the ContentType before completing this async method.</remarks>
        </member>
        <member name="M:Windows.Storage.Streams.StreamedUriDataLoader.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamedUriDataUploader.File">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedUriDataUploader.CheckState">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamedUriDataUploader.Push(System.UInt64,System.UInt64,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverBuffer.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverBuffer.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverBuffer.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverBuffer.Length">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverBuffer.Position">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverBuffer.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverBuffer.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverInputStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverInputStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverInputStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverInputStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverInputStream.Position">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverInputStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverInputStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverInputStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverInputStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverInputStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverOutputStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverOutputStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverOutputStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverOutputStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverOutputStream.Position">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverOutputStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverOutputStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverOutputStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverOutputStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverOutputStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverRandomAccessStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverRandomAccessStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverRandomAccessStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverRandomAccessStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.Streams.StreamOverRandomAccessStream.Position">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverRandomAccessStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverRandomAccessStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverRandomAccessStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverRandomAccessStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverRandomAccessStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverRandomAccessStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverRandomAccessStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.Streams.StreamOverRandomAccessStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Windows.Storage.CachedFileManager">
            <summary>
            Lets apps manage real-time updates to files.
            </summary>
        </member>
        <member name="M:Windows.Storage.CachedFileManager.DeferUpdates(Windows.Storage.IStorageFile)">
            <summary>
            Lets apps defer real-time updates for a specified file.
            </summary>
            <param name="file">The file to defer updates for.</param>
            <remarks>
            In case of Uno Platform, this method currently
            does not have any impact.
            </remarks>
        </member>
        <member name="M:Windows.Storage.CachedFileManager.CompleteUpdatesAsync(Windows.Storage.IStorageFile)">
            <summary>
            Initiates updates for the specified file. This method contacts the app that provided the file to perform the updates.
            </summary>
            <param name="file">The file to update.</param>
            <returns>
            When this method completes, it returns a FileUpdateStatus
            enum value that describes the status of the updates to the file.
            </returns>
            <remarks>
            On most Uno Platform targets, this method immediately returns
            success, as the file is already updated. In case of WASM using
            the download file picker, this triggers the download file dialog.
            </remarks>
        </member>
        <member name="T:Windows.Storage.FileIO">
            <summary>
            Provides helper methods for reading and writing files that
            are represented by objects of type <see cref="T:Windows.Storage.IStorageFile" />.
            </summary>
        </member>
        <member name="M:Windows.Storage.FileIO.ReadTextAsync(Windows.Storage.IStorageFile)">
            <summary>
            Reads the contents of the specified file and returns text.
            </summary>
            <param name="file">The file to read.</param>
            <returns>When this method completes successfully, it returns the contents
            of the file as a text string.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.ReadTextAsync(Windows.Storage.IStorageFile,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Reads the contents of the specified file using the specified character
            encoding and returns text.
            </summary>
            <param name="file">The file to read.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>When this method completes successfully, it returns the contents
            of the file as a text string.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.ReadLinesAsync(Windows.Storage.IStorageFile)">
            <summary>
            Reads the contents of the specified file and returns lines of text.
            </summary>
            <param name="file">The file to read.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a list
            (type <see cref="T:System.Collections.Generic.IList`1" />) of lines of text. Each line of text in the list is represented
            by a <see cref="T:System.String"/> object.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.ReadLinesAsync(Windows.Storage.IStorageFile,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Reads the contents of the specified file using the specified character encoding and returns lines of text.
            </summary>
            <param name="file">The file to read.</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a list
            (type <see cref="T:System.Collections.Generic.IList`1" />) of lines of text. Each line of text in the list is represented
            by a <see cref="T:System.String"/> object.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteTextAsync(Windows.Storage.IStorageFile,System.String)">
            <summary>
            Writes text to the specified file.
            </summary>
            <param name="file">The file that the text is written to.</param>
            <param name="contents">The text to write.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteTextAsync(Windows.Storage.IStorageFile,System.String,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Writes text to the specified file using the specified character encoding.
            </summary>
            <param name="file">The file that the text is written to.</param>
            <param name="contents">The text to write.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteLinesAsync(Windows.Storage.IStorageFile,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes lines of text to the specified file.
            </summary>
            <param name="file">The file that the lines are written to.</param>
            <param name="lines">The list of text strings to write as lines.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteLinesAsync(Windows.Storage.IStorageFile,System.Collections.Generic.IEnumerable{System.String},Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Writes lines of text to the specified file using the specified character encoding.
            </summary>
            <param name="file">The file that the lines are written to.</param>
            <param name="lines">The list of text strings to write as lines.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.AppendTextAsync(Windows.Storage.IStorageFile,System.String)">
            <summary>
            Appends text to the specified file.
            </summary>
            <param name="file">The file that the text is appended to.</param>
            <param name="contents">The text to append.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.AppendTextAsync(Windows.Storage.IStorageFile,System.String,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Appends text to the specified file using the specified character encoding.
            </summary>
            <param name="file">The file that the text is appended to.</param>
            <param name="contents">The text to append.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.AppendLinesAsync(Windows.Storage.IStorageFile,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines of text to the specified file.
            </summary>
            <param name="file">The file that the lines are appended to.</param>
            <param name="lines">The list of text strings to append as lines.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.AppendLinesAsync(Windows.Storage.IStorageFile,System.Collections.Generic.IEnumerable{System.String},Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Appends lines of text to the specified file using the specified character encoding.
            </summary>
            <param name="file">The file that the lines are appended to.</param>
            <param name="lines">The list of text strings to append as lines.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteBytesAsync(Windows.Storage.IStorageFile,System.Byte[])">
            <summary>
            Writes an array of bytes of data to the specified file.
            </summary>
            <param name="file">The file that the byte is written to.</param>
            <param name="buffer">The array of bytes to write.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.ReadBufferAsync(Windows.Storage.IStorageFile)">
            <summary>
            Reads the contents of the specified file and returns a buffer.
            </summary>
            <param name="file">The file to read.</param>
            <returns>When this method completes, it returns an object
            (type <see cref="T:Windows.Storage.Streams.IBuffer" />) that represents the contents of the file.</returns>
        </member>
        <member name="M:Windows.Storage.FileIO.WriteBufferAsync(Windows.Storage.IStorageFile,Windows.Storage.Streams.IBuffer)">
            <summary>
            Writes data from a buffer to the specified file.
            </summary>
            <param name="file">The file that the buffer of data is written to.</param>
            <param name="buffer">The buffer that contains the data to write.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="T:Windows.Storage.PathIO">
            <summary>
            Provides helper methods for reading and writing a file using
            the absolute path or Uniform Resource Identifier (URI) of the file.
            </summary>
        </member>
        <member name="M:Windows.Storage.PathIO.ReadTextAsync(System.String)">
            <summary>
            Reads the contents of the file at the specified path or Uniform Resource Identifier (URI) and returns text.
            </summary>
            <param name="absolutePath">The path of the file to read.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a text string.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.ReadTextAsync(System.String,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Reads the contents of the file at the specified path or Uniform Resource Identifier (URI)
            using the specified character encoding and returns text.
            </summary>
            <param name="absolutePath">The path of the file to read.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a text string.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.WriteTextAsync(System.String,System.String)">
            <summary>
            Writes text to the file at the specified path or Uniform Resource Identifier (URI).
            </summary>
            <param name="absolutePath">The path of the file to read.</param>
            <param name="contents">The text to write.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.WriteTextAsync(System.String,System.String,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Writes text to the file at the specified path or Uniform Resource Identifier (URI)
            using the specified character encoding.
            </summary>
            <param name="absolutePath">The path of the file to read.</param>
            <param name="contents">The text to write.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.AppendTextAsync(System.String,System.String)">
            <summary>
            Appends text to the file at the specified path or Uniform Resource Identifier (URI).
            </summary>
            <param name="absolutePath">The path of the file that the lines are appended to.</param>
            <param name="contents">The text to append.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.AppendTextAsync(System.String,System.String,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Appends text to the file at the specified path or Uniform Resource Identifier (URI)
            using the specified character encoding.
            </summary>
            <param name="absolutePath">The path of the file that the lines are appended to.</param>
            <param name="contents">The text to append.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.ReadLinesAsync(System.String)">
            <summary>
            Reads the contents of the file at the specified path or Uniform Resource Identifier (URI)
            and returns lines of text.
            </summary>
            <param name="absolutePath">The path of the file to read.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a list (type IList)
            of lines of text. Each line of text in the list is represented by a String object.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.ReadLinesAsync(System.String,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Reads the contents of the file at the specified path or Uniform Resource Identifier (URI)
            using the specified character encoding and returns lines of text.
            </summary>
            <param name="absolutePath">The path of the file to read.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a list (type IList)
            of lines of text. Each line of text in the list is represented by a String object.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.WriteLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes lines of text to the file at the specified path or Uniform Resource Identifier (URI)
            using the specified character encoding.
            </summary>
            <param name="absolutePath">The path of the file to write.</param>
            <param name="lines">The list of text strings to write as lines.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.WriteLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Writes lines of text to the file at the specified path or Uniform Resource Identifier (URI).
            </summary>
            <param name="absolutePath">The path of the file to write.</param>
            <param name="lines">The list of text strings to write as lines.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.AppendLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines of text to the file at the specified path or Uniform Resource Identifier (URI).
            </summary>
            <param name="absolutePath">The path of the file that the lines are appended to.</param>
            <param name="lines">The list of text strings to append as lines.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.AppendLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
            Appends lines of text to the file at the specified path or
            Uniform Resource Identifier (URI) using the specified character encoding.
            </summary>
            <param name="absolutePath">The path of the file that the lines are appended to.</param>
            <param name="lines">The list of text strings to append as lines.</param>
            <param name="encoding">The character encoding of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.ReadBufferAsync(System.String)">
            <summary>
            Reads the contents of the file at the specified path or Uniform Resource Identifier (URI) and returns a buffer.
            </summary>
            <param name="absolutePath">The path of the file to read.</param>
            <returns>When this method completes, it returns an object (type IBuffer) that represents the contents of the file.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.WriteBufferAsync(System.String,Windows.Storage.Streams.IBuffer)">
            <summary>
            Writes data from a buffer to the file at the specified path or Uniform Resource Identifier (URI).
            </summary>
            <param name="absolutePath">The path of the file to write.</param>
            <param name="buffer">The buffer that contains the data to write.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Windows.Storage.PathIO.WriteBytesAsync(System.String,System.Byte[])">
            <summary>
            Writes a single byte of data to the file at the specified path or Uniform Resource Identifier (URI).
            </summary>
            <param name="absolutePath">The path of the file to write.</param>
            <param name="buffer">The buffer that contains the data to write.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="P:Windows.Storage.StorageFile.ProviderOverride">
            <summary>
            Allows internal Uno implementations to override the storage provider.
            </summary>
        </member>
        <member name="M:Windows.Storage.StorageStreamTransaction.AsAutoCommitStream">
            <summary>
            Gets a wrapper of this transaction which will auto commit the changes when it is being disposed.
            </summary>
        </member>
        <member name="M:Windows.Storage.StorageStreamTransaction.TransactionRandomStream.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.StorageStreamTransaction.AutoCommitStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.StorageStreamTransaction.AutoCommitStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.StorageStreamTransaction.AutoCommitStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.StorageStreamTransaction.AutoCommitStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.StorageStreamTransaction.AutoCommitStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.StorageStreamTransaction.AutoCommitStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.StorageStreamTransaction.AutoCommitStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.StorageStreamTransaction.AutoCommitStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.StorageStreamTransaction.AutoCommitStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.StorageStreamTransaction.AutoCommitStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Windows.Storage.StorageStreamTransaction.AutoCommitStream.Position">
            <inheritdoc />
        </member>
        <member name="M:Windows.Storage.MimeTypeService.GetFromFileExtension(System.String)">
            <summary>
            Gets the MIME type from the file extension (a.k.a. file type)
            </summary>
        </member>
        <member name="T:Windows.Storage.StorageItemTypes">
            <summary>
            Describes whether an item that implements the IStorageItem interface is a file or a folder.
            </summary>
        </member>
        <member name="F:Windows.Storage.StorageItemTypes.None">
            <summary>
            A storage item that is neither a file nor a folder.
            </summary>
        </member>
        <member name="F:Windows.Storage.StorageItemTypes.File">
            <summary>
            A file that is represented as a StorageFile instance.
            </summary>
        </member>
        <member name="F:Windows.Storage.StorageItemTypes.Folder">
            <summary>
            A folder that is represented as a StorageFolder instance.
            </summary>
        </member>
        <member name="T:Windows.Storage.StorageOpenOptions">
            <summary>
            Provides options to use when opening a file.
            </summary>
        </member>
        <member name="F:Windows.Storage.StorageOpenOptions.None">
            <summary>
            No options are specified.
            </summary>
        </member>
        <member name="F:Windows.Storage.StorageOpenOptions.AllowOnlyReaders">
            <summary>
            Only allow the file to be read.
            </summary>
        </member>
        <member name="F:Windows.Storage.StorageOpenOptions.AllowReadersAndWriters">
            <summary>
            Allows both readers and writers to coexist.
            </summary>
        </member>
        <member name="T:Windows.Storage.TemporaryFile">
            <summary>
            A file that self deletes himself when no longer used
            </summary>
        </member>
        <member name="P:Windows.Storage.TemporaryFile.IsActive">
            <summary>
            Gets a boolean which indicates if this temporary file is still available for read/write
            </summary>
            <remarks>
            This is use-full essentially for weak streams that want to check if this temp file is still
            active before reading or writing data in order to avoid exception.
            </remarks>
        </member>
        <member name="M:Windows.Storage.TemporaryFile.Open(System.IO.FileAccess)">
            <summary>
            Opens a stream to the temporary file.
            This temporary file will remain active (cf. <see cref="P:Windows.Storage.TemporaryFile.IsActive"/>) until the returned stream is being disposed.
            </summary>
        </member>
        <member name="M:Windows.Storage.TemporaryFile.OpenWeak(System.IO.FileAccess)">
            <summary>
            Opens a stream to the temporary file.
            This temporary file might become inactive (i.e. deleted - cf. <see cref="P:Windows.Storage.TemporaryFile.IsActive"/>) even if this stream has not been closed yet.
            If the temporary file becomes inactive, attempt to read / write data on the resulting stream, will throw exception.
            </summary>
        </member>
        <member name="M:Windows.Storage.TemporaryFile.ToString">
            <inheritdoc />
        </member>
        <member name="T:Windows.System.Profile.AnalyticsInfo">
            <summary>
            Provides version information about the device family.
            </summary>
        </member>
        <member name="F:Windows.System.Profile.AnalyticsInfo._analyticsVersionInfo">
            <summary>
            Initializing AnalyticsVersionInfo lazily as it accesses the DeviceForm property, which could otherwise
            happen while the static AnalyticsInfo class is still initializing - causing unpredicatable behavior.
            </summary>
        </member>
        <member name="P:Windows.System.Profile.AnalyticsInfo.DeviceForm">
            <summary>
            Gets the device form factor running the OS. For example,
            the app could be running on a phone, tablet, desktop, and so on.
            </summary>
        </member>
        <member name="P:Windows.System.Profile.AnalyticsInfo.VersionInfo">
            <summary>
            Gets version info about the device family.
            </summary>
        </member>
        <member name="T:Windows.System.Profile.AnalyticsVersionInfo">
            <summary>
            Provides version information about the device family.
            </summary>
        </member>
        <member name="P:Windows.System.Profile.AnalyticsVersionInfo.DeviceFamily">
            <summary>
            Gets a string that represents the type of device the application is running on.
            </summary>
        </member>
        <member name="P:Windows.System.Profile.AnalyticsVersionInfo.DeviceFamilyVersion">
            <summary>
            Gets the version within the device family.
            </summary>
            <remarks>
            Needs to be parsable long number.
            </remarks>
        </member>
        <member name="T:Windows.System.Threading.WorkItemOptions">
            <summary>
            Specifies how work items should be run.
            </summary>
        </member>
        <member name="F:Windows.System.Threading.WorkItemOptions.None">
            <summary>
            The work item should be run when the thread pool has an available worker thread.
            </summary>
        </member>
        <member name="F:Windows.System.Threading.WorkItemOptions.TimeSliced">
            <summary>
            The work items should be run simultaneously with other work items sharing a processor.
            </summary>
        </member>
        <member name="M:Windows.System.DispatcherQueue.CheckThreadAccess">
            <summary>
            Enforce access on the UI thread.
            </summary>
        </member>
        <member name="P:Windows.System.DispatcherQueueTimer.LastTickElapsed">
            <summary>
            Gets the elapsed time on last <see cref="E:Windows.System.DispatcherQueueTimer.Tick"/> since the last time that this timer has been [re]-started.
            NOTE:
            	This is updated **BEFORE** the event is being raised.
            	It can safely be used to get the absolute time in the Tick event handler.
            </summary>
        </member>
        <member name="P:Windows.System.DispatcherQueueTimer.State">
            <summary>
            An internal state that can be used to store a value in order to prevent a closure in the click handler.
            </summary>
        </member>
        <member name="M:Windows.System.DispatcherQueueTimer.Stop">
            <summary>
            Stops the DispatcherTimer.
            </summary>
        </member>
        <member name="T:Windows.System.VirtualKeyModifiers">
            <summary>Specifies the virtual key used to modify another keypress. For example, the Ctrl key when pressed in conjunction with another key, as in Ctrl+C.</summary>
        </member>
        <member name="F:Windows.System.VirtualKeyModifiers.None">
            <summary>No virtual key modifier.</summary>
        </member>
        <member name="F:Windows.System.VirtualKeyModifiers.Control">
            <summary>The Ctrl (control) virtual key.</summary>
        </member>
        <member name="F:Windows.System.VirtualKeyModifiers.Menu">
            <summary>The Menu virtual key.</summary>
        </member>
        <member name="F:Windows.System.VirtualKeyModifiers.Shift">
            <summary>The Shift virtual key.</summary>
        </member>
        <member name="F:Windows.System.VirtualKeyModifiers.Windows">
            <summary>The Windows virtual key.</summary>
        </member>
        <member name="M:Windows.UI.Core.Preview.SystemNavigationCloseRequestedPreviewEventArgs.#ctor">
            <summary>
            Constructor is not public in UWP.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.CoreDispatcher">
            <summary>
            Defines a priority-based UI Thread scheduler.
            </summary>
            <remarks>
            This implementation is based on the fact that the native queue will 
            only contain one instance of the callback for the current core dispatcher.
            
            This gives the native events, such as touch, the priority over managed-side queued
            events, and will allow a properly prioritized processing of idle events.
            </remarks>
        </member>
        <member name="P:Windows.UI.Core.CoreDispatcher.Main">
            <summary>
            Gets the dispatcher for the main thread.
            </summary>
        </member>
        <member name="M:Windows.UI.Core.CoreDispatcher.CheckThreadAccess">
            <summary>
            Enforce access on the UI thread.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.CoreDispatcher.HasThreadAccess">
            <summary>
            Determines if the current thread has access to this CoreDispatcher.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.CoreDispatcher.CurrentPriority">
            <summary>
            Gets the priority of the current task.
            </summary>
            <remarks>Sets has no effect on Uno</remarks>
        </member>
        <member name="M:Windows.UI.Core.CoreDispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority,Windows.UI.Core.DispatchedHandler)">
            <summary>
            Schedules the provided handler on the dispatcher.
            </summary>
            <param name="priority">The execution priority for the handler</param>
            <param name="handler">The handler to execute</param>
            <returns>An async operation for the scheduled handler.</returns>
        </member>
        <member name="M:Windows.UI.Core.CoreDispatcher.RunIdleAsync(Windows.UI.Core.IdleDispatchedHandler)">
            <summary>
            Schedules the provided handler using the idle priority
            </summary>
            <param name="handler">The handler to execute</param>
            <returns>An async operation for the scheduled handler.</returns>
        </member>
        <member name="T:Windows.UI.Core.CoreWindow">
            <summary>
            Represents the UWP app with input events and basic user interface behaviors.
            </summary>
        </member>
        <member name="E:Windows.UI.Core.CoreWindow.SizeChanged">
            <summary>
            Occurs when the window size is changed.
            </summary>
        </member>
        <member name="E:Windows.UI.Core.CoreWindow.Activated">
            <summary>
            Is fired when the window completes activation or deactivation.
            </summary>
        </member>
        <member name="E:Windows.UI.Core.CoreWindow.VisibilityChanged">
            <summary>
            Is fired when the window visibility is changed.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.CoreWindow.Dispatcher">
            <summary>
            Gets the event dispatcher for the window.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.CoreWindow.PointerPosition">
            <summary>
            Gets the client coordinates of the pointer.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.CoreWindow.PointerCursor">
            <summary>
            Gets or sets the cursor used by the app.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.CoreWindow.Visible">
            <summary>
            Gets a value that indicates whether the window is visible.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.CoreWindow.ActivationMode">
            <summary>
            Gets a value that indicates the activation state of the window.
            </summary>
        </member>
        <member name="M:Windows.UI.Core.CoreWindow.GetForCurrentThread">
            <summary>
            Gets the CoreWindow instance for the currently active thread.
            </summary>
            <returns>The CoreWindow for the currently active thread.</returns>
        </member>
        <member name="T:Windows.UI.Core.CoreWindowEventArgs">
            <summary>
            Contains the set of arguments returned to an app after a window input or behavior event.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.CoreWindowEventArgs.Handled">
            <summary>
            Specifies the property that gets or sets whether the event was handled.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.ICoreWindow">
            <summary>
            Specifies an interface for a window object and its input events as well as basic user interface behaviors.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.ICoreWindow.Dispatcher">
            <summary>
            Specifies a property that gets the event dispatcher for the window.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.ICoreWindow.Visible">
            <summary>
            Specifies the property that gets whether the window is visible or not.
            </summary>
        </member>
        <member name="E:Windows.UI.Core.ICoreWindow.Activated">
            <summary>
            Specifies the event that is fired when the window completes activation or deactivation.
            </summary>
        </member>
        <member name="E:Windows.UI.Core.ICoreWindow.SizeChanged">
            <summary>
            Specifies the event that raises when the window size is changed.
            </summary>
        </member>
        <member name="E:Windows.UI.Core.ICoreWindow.VisibilityChanged">
            <summary>
            Specifies the event that occurs when the window visibility is changed.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.ICoreWindowEventArgs">
            <summary>
            Defines the set of arguments returned to an app after a window input or behavior event.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.ICoreWindowEventArgs.Handled">
            <summary>
            Specifies the property that gets or sets whether the event was handled.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.IdleDispatchedHandlerArgs.IsDispatcherIdle">
            <summary>
            Determines if the dispatcher is currently idle
            </summary>
        </member>
        <member name="M:Windows.UI.Core.PointerEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Core.SystemNavigationManager.RequestBack">
            <summary>
            Raise BackRequested
            </summary>
            <returns>True is the BackRequested event was handled.</returns>
        </member>
        <member name="T:Windows.UI.Core.VisibilityChangedEventArgs">
            <summary>
            Contains the arguments returned by the event fired when a CoreWindow instance's visibility changes.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.VisibilityChangedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the VisibilityChanged event was handled.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.VisibilityChangedEventArgs.Visible">
            <summary>
            Gets whether the window is visible or not.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.WindowActivatedEventArgs">
            <summary>
            Contains the windows activation state information returned by the CoreWindow.Activated event.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.WindowActivatedEventArgs.Handled">
            <summary>
            Specifies the property that gets or sets whether the window activation event was handled.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.WindowActivatedEventArgs.WindowActivationState">
            <summary>
            Gets the activation state of the window at the time the Activated event was raised.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.WindowSizeChangedEventArgs">
            <summary>
            Contains the argument returned by a window size change event.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.WindowSizeChangedEventArgs.Handled">
            <summary>
            Gets or sets whether the window size event was handled.
            </summary>
        </member>
        <member name="P:Windows.UI.Core.WindowSizeChangedEventArgs.Size">
            <summary>
            Gets the new size of the window in units of effective (view) pixels.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.AppViewBackButtonVisibility">
            <summary>
            Defines constants that specify whether the back button is shown in the system UI.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.AppViewBackButtonVisibility.Visible">
            <summary>
            The back button is shown.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.AppViewBackButtonVisibility.Collapsed">
            <summary>
            The back button is not shown and space is not reserved for it in the layout.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.AppViewBackButtonVisibility.Disabled">
            <summary>
            The back button is shown, but not enabled.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.CoreCursorType">
            <summary>Specifies the set of cursor types.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.Arrow">
            <summary>The left-upward (northwest) arrow Windows cursor.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.Cross">
            <summary>The "cross" Windows cursor.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.Custom">
            <summary>A custom cursor.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.Hand">
            <summary>The "hand" Windows cursor.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.Help">
            <summary>The left-upward (northwest) arrow Windows cursor with a question mark.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.IBeam">
            <summary>The "I"-shaped Windows cursor used for text selection.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.SizeAll">
            <summary>The "cross arrow" Windows cursor used for user interface (UI) element sizing.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.SizeNortheastSouthwest">
            <summary>The "right-upward, left-downward" dual arrow Windows cursor often used for element sizing.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.SizeNorthSouth">
            <summary>The up-down dual arrow Windows cursor often used for vertical (height) sizing.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.SizeNorthwestSoutheast">
            <summary>The "left-upward, right-downward" dual arrow Windows cursor often used for element sizing.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.SizeWestEast">
            <summary>The left-right dual arrow Windows cursor often used for horizontal (width) sizing.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.UniversalNo">
            <summary>The red "circle slash" Windows cursor often used to indicate that a UI behavor cannot be performed.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.UpArrow">
            <summary>The up arrow Windows cursor.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.Wait">
            <summary>The cycling Windows "wait" cursor often used to indicate that an element or behavior is in a wait state and cannot respond at the time.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.Pin">
            <summary>The "hand" Windows cursor with a pin symbol.</summary>
        </member>
        <member name="F:Windows.UI.Core.CoreCursorType.Person">
            <summary>The "hand" Windows cursor with a person symbol.</summary>
        </member>
        <member name="T:Windows.UI.Core.CoreDispatcherSynchronizationContext">
            <summary>
            Provides a CoreDispatched Synchronization context, to allow for async methods to keep the dispatcher priority.
            </summary>
        </member>
        <member name="M:Windows.UI.Core.CoreDispatcherSynchronizationContext.Apply">
            <summary>
            Creates a scoped assignment of <see cref="P:System.Threading.SynchronizationContext.Current"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Windows.UI.Core.CoreVirtualKeyStates">
            <summary>
            Specifies flags for indicating the possible states of a virtual key.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreVirtualKeyStates.None">
            <summary>
            The key is up or in no specific state.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreVirtualKeyStates.Down">
            <summary>
            The key is pressed down for the input event.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreVirtualKeyStates.Locked">
            <summary>
            The key is in a toggled or modified state (for example, Caps Lock) for the input event.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.CoreWindowActivationMode">
            <summary>
            Defines constants that specify the activation state of a window.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreWindowActivationMode.None">
            <summary>
            No state is specified.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreWindowActivationMode.Deactivated">
            <summary>
            The window is deactivated.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreWindowActivationMode.ActivatedNotForeground">
            <summary>
            The window is activated, but not in the foreground.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreWindowActivationMode.ActivatedInForeground">
            <summary>
            The window is activated and in the foreground.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.CoreWindowActivationState">
            <summary>
            Specifies the set of reasons that a CoreWindow's Activated event was raised.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreWindowActivationState.CodeActivated">
            <summary>
            The window was activated by a call to Activate.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreWindowActivationState.Deactivated">
            <summary>
            The window was deactivated.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreWindowActivationState.PointerActivated">
            <summary>
            The window was activated by pointer interaction.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.WeakEventHelper.EventRaiseHandler">
            <summary>
            Defines a event raise method.
            </summary>
            <param name="delegate">The delegate to call with <paramref name="source"/> and <paramref name="args"/>.</param>
            <param name="source">The source of the event raise</param>
            <param name="args">The args used to raise the event</param>
        </member>
        <member name="T:Windows.UI.Core.WeakEventHelper.GenericEventHandler">
            <summary>
            An abstract handler to be called when raising the weak event.
            </summary>
            <param name="source">The source of the event</param>
            <param name="args">
            The args of the event, which must match the explicit cast
            performed in the matching <see cref="T:Windows.UI.Core.WeakEventHelper.EventRaiseHandler"/> instance.
            </param>
        </member>
        <member name="M:Windows.UI.Core.WeakEventHelper.RegisterEvent(System.Collections.Generic.IList{Windows.UI.Core.WeakEventHelper.GenericEventHandler},System.Delegate,Windows.UI.Core.WeakEventHelper.EventRaiseHandler)">
            <summary>
            Provides a bi-directional weak event handler management.
            </summary>
            <param name="list">A list of registrations to manage</param>
            <param name="handler">The actual handler to execute.</param>
            <param name="raise">The delegate used to raise <paramref name="handler"/> if it has not been collected.</param>
            <returns>A disposable that keeps the registration alive.</returns>
            <remarks>
            The bi-directional relation is defined by the fact that both the 
            source and the target are weak. The source must be kept alive by 
            another longer-lived reference, and the target is kept alive by the
            return disposable.
            
            If the returned disposable is collected, the handler will also be
            collected. Conversely, if the <paramref name="list"/> is collected
            raising the event will produce nothing.
            </remarks>
        </member>
        <member name="P:Windows.UI.Input.Preview.Injection.InputInjector.Mouse">
            <summary>
            Gets the current state of the mouse pointer
            </summary>
        </member>
        <member name="P:Windows.UI.Input.GestureRecognizer.Owner">
            <summary>
            This is the owner provided in the ctor. It might be `null` if none provided.
            It's purpose it to allow usage of static event handlers.
            </summary>
        </member>
        <member name="E:Windows.UI.Input.GestureRecognizer.DragReady">
            <summary>
            This is being raised for touch only, when the pointer remained long enough at the same location so the drag can start.
            </summary>
        </member>
        <member name="T:Windows.UI.Input.GestureRecognizer.Gesture">
            <summary>
            This is the state machine which handles the gesture ([Double|Right]Tapped and Holding gestures)
            </summary>
        </member>
        <member name="P:Windows.UI.Input.GestureRecognizer.Manipulation.IsDragManipulation">
            <summary>
            Indicates that this manipulation **has started** and is for drag-and-drop.
            (i.e. raises Drag event instead of Manipulation&lt;Started Delta Completed&gt; events).
            </summary>
        </member>
        <member name="P:Windows.UI.Input.GestureRecognizer.Manipulation.InertiaProcessor.Elapsed">
            <summary>
            Gets the elapsed time of the inertia (cf. Remarks)
            </summary>
            <remarks>
            Depending of the platform, the timestamp provided by pointer events might not be absolute,
            so it's preferable to not compare timestamp between pointers and inertia processor.
            </remarks>
        </member>
        <member name="M:Windows.UI.Input.GestureRecognizer.Manipulation.InertiaProcessor.GetCumulative">
            <summary>
            Gets the cumulative delta, including the manipulation cumulative when this processor was started
            </summary>
        </member>
        <member name="M:Windows.UI.Input.GestureRecognizer.Manipulation.InertiaProcessor.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Input.ManipulationCompletedEventArgs.Pointers">
            <summary>
            Gets identifiers of all pointer that has been involved in that manipulation (cf. Remarks).
            </summary>
            <remarks>This collection might contains pointers that has been released. <see cref="P:Windows.UI.Input.ManipulationCompletedEventArgs.CurrentContactCount"/> gives the actual number of active pointers.</remarks>
            <remarks>All pointers are expected to have the same <see cref="P:Windows.Devices.Input.PointerIdentifier.Type"/>.</remarks>
        </member>
        <member name="P:Windows.UI.Input.ManipulationDelta.Empty">
            <summary>
            A manipulation that does nothing.
            This differs to 'default' by having a 'Scale' of 1.
            </summary>
        </member>
        <member name="M:Windows.UI.Input.ManipulationDelta.ToString">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Input.ManipulationInertiaStartingEventArgs.Pointers">
            <summary>
            Gets identifiers of all pointer that has been involved in that manipulation (cf. Remarks).
            </summary>
            <remarks>This collection might contains pointers that has been released. <see cref="P:Windows.UI.Input.ManipulationInertiaStartingEventArgs.ContactCount"/> gives the actual number of active pointers.</remarks>
            <remarks>All pointers are expected to have the same <see cref="P:Windows.Devices.Input.PointerIdentifier.Type"/>.</remarks>
        </member>
        <member name="P:Windows.UI.Input.ManipulationStartedEventArgs.Pointers">
            <summary>
            Gets identifiers of all pointer that has been involved in that manipulation.
            </summary>
            <remarks>All pointers are expected to have the same <see cref="P:Windows.Devices.Input.PointerIdentifier.Type"/>.</remarks>
        </member>
        <member name="P:Windows.UI.Input.ManipulationUpdatedEventArgs.Pointers">
            <summary>
            Gets identifiers of all pointer that has been involved in that manipulation (cf. Remarks).
            </summary>
            <remarks> This collection might contains pointers that has been released. <see cref="P:Windows.UI.Input.ManipulationUpdatedEventArgs.CurrentContactCount"/> gives the actual number of active pointers.</remarks>
            <remarks>All pointers are expected to have the same <see cref="P:Windows.Devices.Input.PointerIdentifier.Type"/>.</remarks>
        </member>
        <member name="F:Windows.UI.Input.ManipulationVelocities.Linear">
            <summary>
            The expansion, or scaling, velocity in device-independent pixel (DIP) per millisecond.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.ManipulationVelocities.Angular">
            <summary>
            The rotational velocity in degrees per millisecond.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.ManipulationVelocities.Expansion">
            <summary>
            The expansion, or scaling, velocity in device-independent pixel (DIP) per millisecond.
            </summary>
        </member>
        <member name="M:Windows.UI.Input.ManipulationVelocities.ToString">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Input.PointerPoint.ToString">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Input.PointerPointProperties.HasPressedButton">
            <summary>
            This is actually equivalent to pointer.IsInContact
            </summary>
        </member>
        <member name="M:Windows.UI.Input.PointerPointProperties.ToString">
            <inheritdoc />
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.None">
            <summary>Disable support for gestures and manipulations.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.Tap">
            <summary>Enable support for the tap gesture.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.DoubleTap">
            <summary>Enable support for the double-tap gesture.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.Hold">
            <summary>Enable support for the press and hold gesture (from a single touch or pen/stylus contact). The Holding event is raised if a time threshold is crossed before the contact is lifted, an additional contact is detected, or a gesture is started.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.HoldWithMouse">
            <summary>Enable support for the press and hold gesture through the left button on a mouse. The Holding event is raised if a time threshold is crossed before the left button is released or a gesture is started.This gesture can be used to display a context menu.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.RightTap">
            <summary>Enable support for a right-tap interaction. The RightTapped event is raised when the contact is lifted or the mouse button released.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.Drag">
            <summary>Enable support for the slide or swipe gesture with a mouse or pen/stylus (single contact). The Dragging event is raised when either gesture is detected.This gesture can be used for text selection, selecting or rearranging objects, or scrolling and panning.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationTranslateX">
            <summary>Enable support for the slide gesture through pointer input, on the horizontal axis. The ManipulationStarted, ManipulationUpdated, and ManipulationCompleted events are all raised during the course of this interaction.This gesture can be used for rearranging objects.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationTranslateY">
            <summary>Enable support for the slide gesture through pointer input, on the vertical axis. The ManipulationStarted, ManipulationUpdated, and ManipulationCompleted events are all raised during the course of this interaction.This gesture can be used for rearranging objects.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationTranslateRailsX">
            <summary>Enable support for the slide gesture through pointer input, on the horizontal axis using rails (guides). The ManipulationStarted, ManipulationUpdated, and ManipulationCompleted events are all raised during the course of this interaction.This gesture can be used for rearranging objects.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationTranslateRailsY">
            <summary>Enable support for the slide gesture through pointer input, on the vertical axis using rails (guides). The ManipulationStarted, ManipulationUpdated, and ManipulationCompleted events are all raised during the course of this interaction.This gesture can be used for rearranging objects.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationRotate">
            <summary>Enable support for the rotation gesture through pointer input. The ManipulationStarted, ManipulationUpdated, and ManipulationCompleted events are all raised during the course of this interaction.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationScale">
            <summary>Enable support for the pinch or stretch gesture through pointer input.These gestures can be used for optical or semantic zoom and resizing an object. The ManipulationStarted, ManipulationUpdated, and ManipulationCompleted events are all raised during the course of this interaction.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationTranslateInertia">
            <summary>Enable support for translation inertia after the slide gesture (through pointer input) is complete. The ManipulationInertiaStarting event is raised if inertia is enabled.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationRotateInertia">
            <summary>Enable support for rotation inertia after the rotate gesture (through pointer input) is complete. The ManipulationInertiaStarting event is raised if inertia is enabled.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationScaleInertia">
            <summary>Enable support for scaling inertia after the pinch or stretch gesture (through pointer input) is complete. The ManipulationInertiaStarting event is raised if inertia is enabled.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.CrossSlide">
            <summary>Enable support for the CrossSliding interaction when using the slide or swipe gesture through a single touch contact.This gesture can be used for selecting or rearranging objects.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettings.ManipulationMultipleFingerPanning">
            <summary>Enable panning and disable zoom when two or more touch contacts are detected.Prevents unintentional zoom interactions when panning with multiple fingers.</summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettingsHelper.Manipulations">
            <summary>
            A combination of all "manipulation" flags
            </summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettingsHelper.Gestures">
            <summary>
            A combination of all "gesture" flags
            </summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettingsHelper.SupportedGestures">
            <summary>
            A combination of all "gesture" flags that can be raised by the GestureRecognizer
            </summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettingsHelper.DragAndDrop">
            <summary>
            A combination of all "drag and drop" flags
            </summary>
        </member>
        <member name="F:Windows.UI.Input.GestureSettingsHelper.Inertia">
            <summary>
            A combination of all "inertia" flags
            </summary>
        </member>
        <member name="P:Windows.UI.Input.ManipulationStartingEventArgs.Pointer">
            <summary>
            Gets identifier of the first pointer for which a manipulation is considered
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.Other">
            <summary>
            Pointer updates not identified by other PointerUpdateKind values.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.LeftButtonPressed">
            <summary>
            Left button pressed.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.LeftButtonReleased">
            <summary>
            Left button released.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.RightButtonPressed">
            <summary>
            Right button pressed.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.RightButtonReleased">
            <summary>
            Right button released.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.MiddleButtonPressed">
            <summary>
            Middle button pressed.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.MiddleButtonReleased">
            <summary>
            Middle button released.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.XButton1Pressed">
            <summary>
            XBUTTON1 pressed.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.XButton1Released">
            <summary>
            XBUTTON1 released.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.XButton2Pressed">
            <summary>
            XBUTTON2 pressed.
            </summary>
        </member>
        <member name="F:Windows.UI.Input.PointerUpdateKind.XButton2Released">
            <summary>
            XBUTTON2 released.
            </summary>
        </member>
        <member name="T:Windows.UI.Popups.IUICommand">
            <summary>
            Represents a command in a context menu or message dialog box.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.IUICommand.Id">
            <summary>
            Gets or sets the identifier of the command.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.IUICommand.Invoked">
            <summary>
            Gets or sets the handler for the event that is fired when the user invokes the command. 
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.IUICommand.Label">
            <summary>
            Gets or sets the label for the command.
            </summary>
        </member>
        <member name="T:Windows.UI.Popups.MessageDialog">
            <summary>
            Represents a dialog for showing messages to the user.
            </summary>
        </member>
        <member name="M:Windows.UI.Popups.MessageDialog.#ctor(System.String)">
            <summary>
            Creates a new instance of the MessageDialog class, using the specified message content and no title.
            </summary>
            <param name="content">The message displayed to the user.</param>
        </member>
        <member name="M:Windows.UI.Popups.MessageDialog.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the MessageDialog class, using the specified message content and title.
            </summary>
            <param name="content">The message displayed to the user.</param>
            <param name="title">The title you want displayed on the dialog.</param>
        </member>
        <member name="P:Windows.UI.Popups.MessageDialog.CancelCommandIndex">
            <summary>
            Gets or sets the index of the command you want to use as the cancel command.
            This is the command that fires when users press the ESC key.	
            Add the commands before you set the index.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.MessageDialog.Commands">
            <summary>
            Gets an array of commands that appear in the command bar of the message dialog. These commands makes the dialog actionable.
            </summary>
            <remarks>
            Maximum of 3 commands is allowed.
            </remarks>
        </member>
        <member name="P:Windows.UI.Popups.MessageDialog.Content">
            <summary>
            Gets or sets the message to be displayed to the user.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.MessageDialog.DefaultCommandIndex">
            <summary>
            Gets or sets the index of the command you want to use as the default.
            This is the command that fires by default when users press the ENTER key.
            Add the commands before you set the index.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.MessageDialog.Options">
            <summary>
            Gets or sets the options for a MessageDialog.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.MessageDialog.Title">
            <summary>
            Gets or sets the title to display on the dialog, if any.
            </summary>
        </member>
        <member name="T:Windows.UI.Popups.UICommand">
            <summary>
            Represents a command in a context menu.
            </summary>
        </member>
        <member name="M:Windows.UI.Popups.UICommand.#ctor">
            <summary>
            Creates a new instance of the UICommand class.
            </summary>
        </member>
        <member name="M:Windows.UI.Popups.UICommand.#ctor(System.String)">
            <summary>
            Creates a new instance of the UICommand class using the specified label.
            </summary>
            <param name="label">The label for the UICommand.</param>
        </member>
        <member name="M:Windows.UI.Popups.UICommand.#ctor(System.String,Windows.UI.Popups.UICommandInvokedHandler)">
            <summary>
             Creates a new instance of the UICommand class using the specified label and optional event handler.
            </summary>
            <param name="label">The label for the UICommand.</param>
            <param name="action">The event handler for the new command.</param>
        </member>
        <member name="M:Windows.UI.Popups.UICommand.#ctor(System.String,Windows.UI.Popups.UICommandInvokedHandler,System.Object)">
            <summary>
            Creates a new instance of the UICommand class using the specified label, and optional event handler and command identifier.
            </summary>
            <param name="label">The label for the UICommand.</param>
            <param name="action">The event handler for the new command.</param>
            <param name="commandId">The command identifier for the new command.</param>
        </member>
        <member name="P:Windows.UI.Popups.UICommand.Id">
            <summary>
            Gets or sets the identifier of the command.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.UICommand.Invoked">
            <summary>
            Gets or sets the handler for the event that is fired when the user invokes the command. 
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.UICommand.Label">
            <summary>
            Gets or sets the label for the command.
            </summary>
        </member>
        <member name="M:Windows.UI.Popups.UICommandSeparator.#ctor">
            <summary>
            Creates a new instance of the UICommand class.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.UICommandSeparator.Id">
            <summary>
            Gets or sets the identifier of the command.
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.UICommandSeparator.Invoked">
            <summary>
            Gets or sets the handler for the event that is fired when the user invokes the command. 
            </summary>
        </member>
        <member name="P:Windows.UI.Popups.UICommandSeparator.Label">
            <summary>
            Gets or sets the label for the command.
            </summary>
        </member>
        <member name="T:Windows.UI.Popups.MessageDialogOptions">
            <summary>
            Specifies less frequently used options for a MessageDialog.
            </summary>
        </member>
        <member name="F:Windows.UI.Popups.MessageDialogOptions.None">
            <summary> 
            No options are specified and default behavior is used.
            </summary>
        </member>
        <member name="F:Windows.UI.Popups.MessageDialogOptions.AcceptUserInputAfterDelay">
            <summary>
            Ignore user input for a short period. This enables browsers to defend against clickjacking.
            </summary>
        </member>
        <member name="F:Windows.UI.Popups.Placement.Default">
            <summary>
            Place the context menu above the selection rectangle. 
            </summary>
        </member>
        <member name="F:Windows.UI.Popups.Placement.Above">
            <summary>
            Place the context menu above the selection rectangle.
            </summary>
        </member>
        <member name="F:Windows.UI.Popups.Placement.Below">
            <summary>
            Place the context menu below the selection rectangle.
            </summary>
        </member>
        <member name="F:Windows.UI.Popups.Placement.Left">
            <summary>
            Place the context menu to the left of the selection rectangle.
            </summary>
        </member>
        <member name="F:Windows.UI.Popups.Placement.Right">
            <summary>
            Place the context menu to the right of the selection rectangle.
            </summary>
        </member>
        <member name="T:Windows.UI.Text.TextDecorations">
            <summary>
            Defines constants that specify the decorations applied to text.
            </summary>
        </member>
        <member name="F:Windows.UI.Text.TextDecorations.None">
            <summary>
            No text decorations are applied.
            </summary>
        </member>
        <member name="F:Windows.UI.Text.TextDecorations.Underline">
            <summary>
            Underline is applied to the text.
            </summary>
        </member>
        <member name="F:Windows.UI.Text.TextDecorations.Strikethrough">
            <summary>
            Strikethrough is applied to the text.
            </summary>
        </member>
        <member name="T:Windows.UI.ViewManagement.AccessibilitySettings">
            <summary>
            Provides access to the high contrast accessibility settings.
            </summary>
        </member>
        <member name="M:Windows.UI.ViewManagement.AccessibilitySettings.#ctor">
            <summary>
            Initializes a new AccessibilitySettings object.
            </summary>
        </member>
        <member name="P:Windows.UI.ViewManagement.AccessibilitySettings.HighContrast">
            <summary>
            Gets a value that indicates whether the system high contrast feature is on or off.
            </summary>
            <remarks>
            In Uno Platform this returns the value of <see cref="P:Uno.WinRTFeatureConfiguration.Accessibility.HighContrast"/>.
            The default is false.
            </remarks>
        </member>
        <member name="P:Windows.UI.ViewManagement.AccessibilitySettings.HighContrastScheme">
            <summary>
            Gets the name of the default high contrast color scheme.
            </summary>
            <remarks>
            In Uno Platform this returns the value of <see cref="P:Uno.WinRTFeatureConfiguration.Accessibility.HighContrastScheme"/>.
            The default is "High Contrast Black".
            </remarks>
        </member>
        <member name="E:Windows.UI.ViewManagement.AccessibilitySettings.HighContrastChanged">
            <summary>
            Occurs when the system high contrast feature turns on or off.
            </summary>
            <remarks>
            Raised when <see cref="P:Uno.WinRTFeatureConfiguration.Accessibility.HighContrast"/> changes.
            </remarks>
        </member>
        <member name="P:Windows.UI.ViewManagement.ApplicationView.TrueVisibleBounds">
             <summary>
             All other platforms: equivalent to <see cref="P:Windows.UI.ViewManagement.ApplicationView.VisibleBounds"/>.
            
             Android: returns the visible bounds taking the status bar into account. The status bar is not removed from <see cref="P:Windows.UI.ViewManagement.ApplicationView.VisibleBounds"/>
             on Android when it's opaque, on the grounds that the root managed view is already arranged below the status bar in y-direction by
             default (unlike iOS), but in some cases the correct total height is needed, hence this property.
             </summary>
        </member>
        <member name="P:Windows.UI.ViewManagement.ApplicationView.VisibleBoundsOverride">
            <summary>
            If set, overrides the 'real' visible bounds. Used for testing visible bounds-related behavior on devices that have no native
            'unsafe area'.
            </summary>
        </member>
        <member name="M:Windows.UI.ViewManagement.ApplicationViewTitleBar.#ctor">
            <summary>
            Constructor is not public in UWP
            </summary>
        </member>
        <member name="T:Windows.UI.ViewManagement.StatusBar">
            <summary>
            Provides methods and properties for interacting with the status bar on a window (app view).
            </summary>
        </member>
        <member name="M:Windows.UI.ViewManagement.StatusBar.GetForCurrentView">
            <summary>
            Gets the status bar for the current window (app view).
            </summary>
            <returns>The status bar for the current window (app view).</returns>
        </member>
        <member name="P:Windows.UI.ViewManagement.StatusBar.OccludedRect">
            <summary>
            Gets the region of the core window currently occluded by the status bar.
            </summary>
        </member>
        <member name="P:Windows.UI.ViewManagement.StatusBar.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the status bar. The alpha channel of the color is not used.
            </summary>
            <remarks>
            <para>iOS and Android (API 23+) only allow their status bar foreground to be set to either Light or Dark. 
            The provided color will automatically be converted to the nearest supported color to preserve contrast.</para>
            <para>In general, you should set this property to either White or Black to avoid confusion.</para>
            <para>This property is only supported on Android starting from Marshmallow (API 23).</para>
            </remarks>
        </member>
        <member name="T:Windows.UI.ViewManagement.UISettings">
            <summary>
            Contains a set of common app user interface settings and operations.
            </summary>
            <remarks>Events on this class are fired as long as the instance is alive.
            To ensure the class does not get garbage collected, keep a strong reference to it.</remarks>
        </member>
        <member name="T:Windows.UI.ViewManagement.UIColorType">
            <summary>
            Defines constants that specify known system color values.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.Background">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.Foreground">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.AccentDark3">
            <summary>
            The darkest accent color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.AccentDark2">
            <summary>
            The darker accent color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.AccentDark1">
            <summary>
            The dark accent color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.Accent">
            <summary>
            The accent color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.AccentLight1">
            <summary>
            The light accent color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.AccentLight2">
            <summary>
            The lighter accent color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.AccentLight3">
            <summary>
            The lightest accent color.
            </summary>
        </member>
        <member name="F:Windows.UI.ViewManagement.UIColorType.Complement">
            <summary>
            Not supported. Do not use.
            </summary>
        </member>
        <member name="M:Windows.UI.Colors.Parse(System.String)">
            <summary>
            Parses a string representing a color 
            </summary>
            <param name="colorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Colors.FromARGB(System.String)">
            <summary>
            Takes a color code as an ARGB, RGB, #ARGB, #RGB string and returns a color. 
            
            Remark: if single digits are used to define the color, they will
            be duplicated (example: FFD8 will become FFFFDD88)
            </summary>
            <param name="colorCode"></param>
            <returns></returns>
        </member>
        <member name="F:Windows.UI.Color._color">
            <summary>
            Alias individual fields to avoid bitshifting and GetHashCode / compare costs
            </summary>
        </member>
        <member name="T:Windows.UI.ColorOffset">
            <summary>
            Mapping of a <see cref="T:Windows.UI.Color"/> which permits negative values, which is convenient for calculations during animation.
            </summary>
        </member>
        <member name="T:Windows.Web.Http.HttpCookie">
            <summary>
            Provides a set of properties and methods to manage an HTTP cookie.
            </summary>
        </member>
        <member name="M:Windows.Web.Http.HttpCookie.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the HttpCookie class with a specified name, domain, and path.
            </summary>
            <param name="name">The name for the HttpCookie.</param>
            <param name="domain">The domain for which the HttpCookie is valid.</param>
            <param name="path">The URIs to which the HttpCookie applies.</param>
            <remarks>
            For parameter value limitations https://docs.microsoft.com/en-us/uwp/api/windows.web.http.httpcookie.-ctor?view=winrt-19041#remarks UWP docs.
            </remarks>
        </member>
        <member name="P:Windows.Web.Http.HttpCookie.Domain">
            <summary>
            Get the domain for which the HttpCookie is valid.
            </summary>
        </member>
        <member name="P:Windows.Web.Http.HttpCookie.Name">
            <summary>
            Get the token that represents the HttpCookie name.
            </summary>
        </member>
        <member name="P:Windows.Web.Http.HttpCookie.Path">
            <summary>
            Get the URI path component to which the HttpCookie applies.
            </summary>
        </member>
        <member name="P:Windows.Web.Http.HttpCookie.Value">
            <summary>
            Get or set the value for the HttpCookie.
            </summary>
        </member>
        <member name="P:Windows.Web.Http.HttpCookie.Secure">
            <summary>
            Get or set the security level for the HttpCookie.
            </summary>
        </member>
        <member name="P:Windows.Web.Http.HttpCookie.HttpOnly">
            <summary>
            Get or set a value that controls whether a script or other active content can access this HttpCookie.
            </summary>
        </member>
        <member name="P:Windows.Web.Http.HttpCookie.Expires">
            <summary>
            Get or set the expiration date and time for the HttpCookie.
            </summary>
        </member>
        <member name="M:Windows.Web.Http.HttpCookie.ToString">
            <summary>
            Rreturns a string that matches a Set-Cookie HTTP header suitable for including on a request message.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Uno.Buffers.ArrayPool`1">
            <summary>
            Provides a resource pool that enables reusing instances of type <see cref="T:T[]"/>. 
            </summary>
            <remarks>
            <para>
            Renting and returning buffers with an <see cref="T:Uno.Buffers.ArrayPool`1"/> can increase performance
            in situations where arrays are created and destroyed frequently, resulting in significant
            memory pressure on the garbage collector.
            </para>
            <para>
            This class is thread-safe.  All members may be used by multiple threads concurrently.
            </para>
            </remarks>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1.s_sharedInstance">
            <summary>The lazily-initialized shared pool instance.</summary>
        </member>
        <member name="P:Uno.Buffers.ArrayPool`1.Shared">
            <summary>
            Retrieves a shared <see cref="T:Uno.Buffers.ArrayPool`1"/> instance.
            </summary>
            <remarks>
            The shared pool provides a default implementation of <see cref="T:Uno.Buffers.ArrayPool`1"/>
            that's intended for general applicability.  It maintains arrays of multiple sizes, and 
            may hand back a larger array than was actually requested, but will never hand back a smaller 
            array than was requested. Renting a buffer from it with <see cref="M:Uno.Buffers.ArrayPool`1.Rent(System.Int32)"/> will result in an 
            existing buffer being taken from the pool if an appropriate buffer is available or in a new 
            buffer being allocated if one is not available.
            </remarks>
        </member>
        <member name="M:Uno.Buffers.ArrayPool`1.EnsureSharedCreated">
            <summary>Ensures that <see cref="F:Uno.Buffers.ArrayPool`1.s_sharedInstance"/> has been initialized to a pool and returns it.</summary>
        </member>
        <member name="M:Uno.Buffers.ArrayPool`1.Create">
            <summary>
            Creates a new <see cref="T:Uno.Buffers.ArrayPool`1"/> instance using default configuration options.
            </summary>
            <returns>A new <see cref="T:Uno.Buffers.ArrayPool`1"/> instance.</returns>
        </member>
        <member name="M:Uno.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Uno.Buffers.ArrayPool`1"/> instance using custom configuration options.
            </summary>
            <param name="maxArrayLength">The maximum length of array instances that may be stored in the pool.</param>
            <param name="maxArraysPerBucket">
            The maximum number of array instances that may be stored in each bucket in the pool.  The pool
            groups arrays of similar lengths into buckets for faster access.
            </param>
            <returns>A new <see cref="T:Uno.Buffers.ArrayPool`1"/> instance with the specified configuration options.</returns>
            <remarks>
            The created pool will group arrays into buckets, with no more than <paramref name="maxArraysPerBucket"/>
            in each bucket and with those arrays not exceeding <paramref name="maxArrayLength"/> in length.
            </remarks>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1.DefaultMaxArrayLength">
            <summary>The default maximum length of each array in the pool.</summary>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1.DefaultAutomaticMaxNumberOfArraysPerBucket">
            <summary>The default maximum number of arrays per bucket that are available for rent when using automatic memory management.</summary>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1.DefaultMaxNumberOfArraysPerBucket">
            <summary>The default maximum number of arrays per bucket that are available for rent.</summary>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1.EnableAutomaticMemoryManagement">
            <summary>Determines if automatic memory management can be used.</summary>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1.s_emptyArray">
            <summary>Lazily-allocated empty array used when arrays of length 0 are requested.</summary>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1._buckets">
            <summary>Buckets list for different array sizes</summary>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1._automaticManagement">
            <summary>Determines if automatic memory management is enabled</summary>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1._trimCallbackCreated">
            <summary>Determines if GC trim callback has been registerd if non-zero</summary>
        </member>
        <member name="F:Uno.Buffers.ArrayPool`1._platformProvider">
            <summary>Current platform features provider</summary>
        </member>
        <member name="P:Uno.Buffers.ArrayPool`1.Id">
            <summary>Gets an ID for the pool to use with events.</summary>
        </member>
        <member name="M:Uno.Buffers.ArrayPool`1.Rent(System.Int32)">
            <summary>
            Retrieves a buffer that is at least the requested length.
            </summary>
            <param name="minimumLength">The minimum length of the array needed.</param>
            <returns>
            An <see cref="T:T[]"/> that is at least <paramref name="minimumLength"/> in length.
            </returns>
            <remarks>
            This buffer is loaned to the caller and should be returned to the same pool via 
            <see cref="M:Uno.Buffers.ArrayPool`1.Return(`0[],System.Boolean)"/> so that it may be reused in subsequent usage of <see cref="M:Uno.Buffers.ArrayPool`1.Rent(System.Int32)"/>.  
            It is not a fatal error to not return a rented buffer, but failure to do so may lead to 
            decreased application performance, as the pool may need to create a new buffer to replace
            the one lost.
            </remarks>
        </member>
        <member name="M:Uno.Buffers.ArrayPool`1.Return(`0[],System.Boolean)">
            <summary>
            Returns to the pool an array that was previously obtained via <see cref="M:Uno.Buffers.ArrayPool`1.Rent(System.Int32)"/> on the same 
            <see cref="T:Uno.Buffers.ArrayPool`1"/> instance.
            </summary>
            <param name="array">
            The buffer previously obtained from <see cref="M:Uno.Buffers.ArrayPool`1.Rent(System.Int32)"/> to return to the pool.
            </param>
            <param name="clearArray">
            If <c>true</c> and if the pool will store the buffer to enable subsequent reuse, <see cref="M:Uno.Buffers.ArrayPool`1.Return(`0[],System.Boolean)"/>
            will clear <paramref name="array"/> of its contents so that a subsequent consumer via <see cref="M:Uno.Buffers.ArrayPool`1.Rent(System.Int32)"/> 
            will not see the previous consumer's content.  If <c>false</c> or if the pool will release the buffer,
            the array's contents are left unchanged.
            </param>
            <remarks>
            Once a buffer has been returned to the pool, the caller gives up all ownership of the buffer 
            and must not use it. The reference returned from a given call to <see cref="M:Uno.Buffers.ArrayPool`1.Rent(System.Int32)"/> must only be
            returned via <see cref="M:Uno.Buffers.ArrayPool`1.Return(`0[],System.Boolean)"/> once.  The default <see cref="T:Uno.Buffers.ArrayPool`1"/>
            may hold onto the returned buffer in order to rent it again, or it may release the returned buffer
            if it's determined that the pool already has enough buffers stored.
            </remarks>
        </member>
        <member name="T:Uno.Buffers.ArrayPool`1.Bucket">
            <summary>Provides a thread-safe bucket containing buffers that can be Rent'd and Return'd.</summary>
        </member>
        <member name="M:Uno.Buffers.ArrayPool`1.Bucket.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the pool with numberOfBuffers arrays where each buffer is of bufferLength length.
            </summary>
        </member>
        <member name="P:Uno.Buffers.ArrayPool`1.Bucket.Id">
            <summary>Gets an ID for the bucket to use with events.</summary>
        </member>
        <member name="M:Uno.Buffers.ArrayPool`1.Bucket.Rent">
            <summary>Takes an array from the bucket.  If the bucket is empty, returns null.</summary>
        </member>
        <member name="M:Uno.Buffers.ArrayPool`1.Bucket.Return(`0[])">
            <summary>
            Attempts to return the buffer to the bucket.  If successful, the buffer will be stored
            in the bucket and true will be returned; otherwise, the buffer won't be stored, and false
            will be returned.
            </summary>
        </member>
        <member name="T:Uno.Buffers.DefaultArrayPoolPlatformProvider">
            <summary>
            Platform features provider for <see cref="T:Uno.Buffers.ArrayPool`1"/>
            </summary>
            <remarks>
            Used primarily to allow for deterministic testing of ArrayPool trimming features.
            </remarks>
        </member>
        <member name="T:Uno.Buffers.IArrayPoolPlatformProvider">
            <summary>
            Platform features provider for <see cref="T:Uno.Buffers.ArrayPool`1"/>
            </summary>
            <remarks>
            Used primarily to allow for deterministic testing of ArrayPool trimming features.
            </remarks>
        </member>
        <member name="P:Uno.Buffers.IArrayPoolPlatformProvider.CanUseMemoryManager">
            <summary>
            Determines if memory manager can be used
            </summary>
        </member>
        <member name="P:Uno.Buffers.IArrayPoolPlatformProvider.AppMemoryUsageLevel">
            <summary>
            Determine current memory pressure
            </summary>
        </member>
        <member name="P:Uno.Buffers.IArrayPoolPlatformProvider.Now">
            <summary>
            Gets the current time
            </summary>
        </member>
        <member name="M:Uno.Buffers.IArrayPoolPlatformProvider.RegisterTrimCallback(System.Func{System.Object,System.Boolean},System.Object)">
            <summary>
            Registers a callback to be called when GC triggerd
            </summary>
            <param name="callback">Function called with <paramref name="arrayPool"/> as the first parameter</param>
            <param name="arrayPool">instance to be provided when invoking <paramref name="callback"/></param>
        </member>
        <member name="T:Uno.Collections.HashtableEx">
            <summary>
            Specialized version of <see cref="T:System.Collections.Hashtable"/> providing TryGetValue and single-threaded optimizations
            </summary>
        </member>
        <member name="M:Uno.Collections.HashHelpers.GetFastModMultiplier(System.UInt32)">
            <summary>Returns approximate reciprocal of the divisor: ceil(2**64 / divisor).</summary>
            <remarks>This should only be used on 64-bit.</remarks>
        </member>
        <member name="M:Uno.Collections.HashHelpers.FastMod(System.UInt32,System.UInt32,System.UInt64)">
            <summary>Performs a mod operation using the multiplier pre-computed with <see cref="M:Uno.Collections.HashHelpers.GetFastModMultiplier(System.UInt32)"/>.</summary>
            <remarks>This should only be used on 64-bit.</remarks>
        </member>
        <member name="T:Uno.Collections.MaterializableList`1">
            <summary>
            List using a materialized version to enumerate itself to prevent
            "Collection was modified" error.
            </summary>
            <remarks>
            THIS IS NOT THREAD-SAFE. It is designed to be used on
            the UI thread.
            </remarks>
        </member>
        <member name="P:Uno.Collections.MaterializableList`1.Materialized">
            <summary>
            Get a materialized copy of the inner list. DON'T UPDATE IT!!
            </summary>
            <remarks>
            You should NEVER update directly this list or you can still produce a
            "Collection was modified" exception.
            </remarks>
        </member>
        <member name="M:Uno.Collections.MaterializableList`1.GetUpdatableCopy">
            <summary>
            Get an exclusive copy of the inner list which can be freely updated
            without impacting any concurrent enumeration.
            </summary>
        </member>
        <member name="M:Uno.Collections.MaterializableList`1.ClearMaterialized">
            <summary>
            Force this instance to regenerate a new `Materialized` instance.
            </summary>
            <remarks>
            Useful it you're planning to "own" the MaterializedList and update it.
            </remarks>
        </member>
        <member name="P:Uno.UI.ContextHelper.Current">
            <summary>
            Get the current android content context
            </summary>
        </member>
        <member name="M:Uno.UI.ContextHelper.TryGetCurrent(Android.Content.Context@)">
            <summary>
            Tries getting the current context.
            </summary>
            <param name="context">The context if available</param>
            <returns>true if the current context is available, otherwise false.</returns>
        </member>
        <member name="T:Uno.UI.Core.KeyboardStateTracker">
            <summary>
            Tracks keyboard key state.
            </summary>
            <remarks>
            The behavior is based on description in https://docs.microsoft.com/en-us/uwp/api/windows.ui.core.corevirtualkeystates.
            In UWP/WinUI, every key has a locked state (not only Caps Lock, etc.). The sequence of states is as follows:
            (None) -> (Down) -> (None) -> (Down + Locked) -> (None + Locked) -> (Down) -> (None) -> etc.
            </remarks>
        </member>
        <member name="M:Uno.UI.Core.KeyboardStateTracker.GetKeyState(Windows.System.VirtualKey)">
            <summary>
            Retrieves the current state for a given key.
            </summary>
            <param name="key">Key.</param>
            <returns>Key state.</returns>
        </member>
        <member name="M:Uno.UI.ViewManagement.ApplicationViewHelper.GetBaseActivityEvents">
            <summary>
            Gets an instance to <see cref="T:Uno.UI.ViewManagement.IBaseActivityEvents"/> which provides a set of events
            raised on key Activity method overrides.
            </summary>
        </member>
        <member name="T:Uno.UI.ViewManagement.IBaseActivityEvents">
            <summary>
            A set of events to be raised when key methods are invoked from the main activity
            </summary>
        </member>
        <member name="T:Uno.Devices.Enumeration.Internal.DeviceIdentifier">
            <summary>
            Represents full device identifier.
            </summary>
        </member>
        <member name="M:Uno.Devices.Enumeration.Internal.DeviceIdentifier.#ctor(System.String,System.Guid)">
            <summary>
            Initializes device identifier.
            </summary>
            <param name="id">Id of the device.</param>
            <param name="deviceClass">Class the device belongs to.</param>
        </member>
        <member name="P:Uno.Devices.Enumeration.Internal.DeviceIdentifier.DeviceClass">
            <summary>
            Gets the device class.
            </summary>
        </member>
        <member name="P:Uno.Devices.Enumeration.Internal.DeviceIdentifier.Id">
            <summary>
            Gets the device ID.
            </summary>
        </member>
        <member name="M:Uno.Devices.Enumeration.Internal.DeviceIdentifier.TryParse(System.String,Uno.Devices.Enumeration.Internal.DeviceIdentifier@)">
            <summary>
            Attempts to parse the device class identifier from a string.
            </summary>
            <param name="deviceId">Device ID.</param>
            <param name="deviceIdentifier">Parsed device identifier.</param>
            <returns>Value indicating whether the ID can be parsed.</returns>
        </member>
        <member name="M:Uno.Devices.Enumeration.Internal.DeviceIdentifier.ToString">
            <summary>
            Serializes the device identifier as a string.
            </summary>
            <returns>Formatted device identifier.</returns>
        </member>
        <member name="M:Uno.Devices.Midi.Internal.MidiHelpers.GetChannel(System.Byte)">
            <summary>
            Returns the MIDI channel from the message's first byte.
            </summary>
            <param name="firstMessageByte">First byte in a MIDI message.</param>
            <returns>Channel.</returns>
        </member>
        <member name="M:Uno.Devices.Midi.Internal.MidiHelpers.GetBend(System.Byte,System.Byte)">
            <summary>
            Returns the MIDI bend value from two bytes in message.
            </summary>
            <param name="firstByte">First byte of the value in MIDI message order.</param>
            <param name="secondByte">Second byte of the value in MIDI message order.</param>
            <returns>Bend.</returns>
        </member>
        <member name="M:Uno.Devices.Midi.Internal.MidiHelpers.GetBeats(System.Byte,System.Byte)">
            <summary>
            Returns the MIDI beats value from two bytes in message.
            </summary>
            <param name="firstByte">First byte of the value in MIDI message order.</param>
            <param name="secondByte">Second byte of the value in MIDI message order.</param>
            <returns>Beats.</returns>
        </member>
        <member name="M:Uno.Devices.Midi.Internal.MidiHelpers.GetUshort(System.Byte,System.Byte)">
            <summary>
            Reads an ushort value from two bytes (used for beats and bend).
            The parameter value is encoded as using 7 bits of each byte.
            </summary>
            <param name="firstByte">First byte.</param>
            <param name="secondByte">Second byte.</param>
            <returns>Ushort value</returns>
        </member>
        <member name="M:Uno.Devices.Midi.Internal.MidiMessageParser.Parse(System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Parses input byte array to MIDI messages.
            For Android, multiple messages can be received
            in a single batch.
            </summary>
            <param name="bytes">Bytes.</param>
            <param name="startingOffset">Starting offset.</param>
            <param name="length">Length.</param>
            <param name="timestamp">Timestamp.</param>
            <returns>Parsed MIDI messages.</returns>
        </member>
        <member name="M:Uno.Extensions.CoreDispatcherExtensions.RunWithResultAsync``1(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.CoreDispatcherPriority,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the specified <see cref="T:System.Threading.Tasks.Task"/> on the a <see cref="T:Windows.UI.Core.CoreDispatcher"/>.
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="dispatcher">The <see cref="T:Windows.UI.Core.CoreDispatcher"/> to run the task on</param>
            <param name="priority">The task execution priority</param>
            <param name="task">A function providing the task to execute</param>
            <returns>The result of the task's execution</returns>
        </member>
        <member name="M:Uno.Extensions.MathEx.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp a value to lie within a supplied range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value (inclusive).</param>
            <param name="max">The maximum allowed value (inclusive).</param>
            <returns>A clamped value.</returns>
        </member>
        <member name="M:Uno.Extensions.MathEx.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamp a value to lie within a supplied range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value (inclusive).</param>
            <param name="max">The maximum allowed value (inclusive).</param>
            <returns>A clamped value.</returns>
        </member>
        <member name="M:Uno.Extensions.MathEx.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamp a value to lie within a supplied range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value (inclusive).</param>
            <param name="max">The maximum allowed value (inclusive).</param>
            <returns>A clamped value.</returns>
        </member>
        <member name="M:Uno.Extensions.MathEx.ToRadians(System.Double)">
            <summary>
            Converts an angle in degree into radians
            </summary>
        </member>
        <member name="M:Uno.Extensions.MathEx.ToDegree(System.Double)">
            <summary>
            Converts an angle in radians into degrees
            </summary>
        </member>
        <member name="M:Uno.Extensions.MathEx.ToDegreeNormalized(System.Double)">
            <summary>
            Converts an angle in radians into degrees normalized in the [0, 360[ range.
            </summary>
        </member>
        <member name="M:Uno.Extensions.MathEx.NormalizeDegree(System.Double)">
            <summary>
            Normalize an angle in degrees in the [0, 360[ range.
            </summary>
        </member>
        <member name="M:Uno.Extensions.MathEx.ApproxEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tests if two values are equal to within the specified error.
            </summary>
            <param name="value1">First value</param>
            <param name="value2">Second value</param>
            <param name="delta">Permitted error</param>
            <returns>True if the difference is less than the permitted error, false otherwise</returns>
        </member>
        <member name="M:Uno.Extensions.MathEx.Max(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Returns the maximum of two nullable doubles if both have values. Returns null if either or both are null.
            </summary>
        </member>
        <member name="M:Uno.Extensions.Matrix3x2Extensions.Transform(System.Numerics.Matrix3x2,Windows.Foundation.Point)">
            <summary>
            Creates a transformed <see cref="T:Windows.Foundation.Point"/> using a <see cref="T:System.Numerics.Matrix3x2"/>.
            </summary>
            <param name="point">The point to transform</param>
            <param name="matrix">The matrix to use to transform the <paramref name="point"/></param>
            <returns>A new rectangle</returns>
        </member>
        <member name="M:Uno.Extensions.Matrix3x2Extensions.Transform(System.Numerics.Matrix3x2,System.Double,System.Double)">
            <summary>
            Creates a transformed point using a <see cref="T:System.Numerics.Matrix3x2"/>.
            </summary>
            <param name="x">The x coordinate of the point to transform</param>
            <param name="y">The y coordinate of the point to transform</param>
            <param name="matrix">The matrix to use to transform the point</param>
            <returns>A new rectangle</returns>
        </member>
        <member name="M:Uno.Extensions.Matrix3x2Extensions.Transform(System.Numerics.Matrix3x2,Windows.Foundation.Rect)">
            <summary>
            Creates a transformed bounds <see cref="T:Windows.Foundation.Rect"/> using a <see cref="T:System.Numerics.Matrix3x2"/>.
            </summary>
            <param name="rect">The rectangle to transform</param>
            <param name="matrix">The matrix to use to transform the <paramref name="rect"/></param>
            <returns>A new rectangle</returns>
        </member>
        <member name="M:Uno.Extensions.RectExtensions.Transform(Windows.Foundation.Rect,System.Numerics.Matrix3x2)">
            <summary>
            Creates a transformed <see cref="T:Windows.Foundation.Rect"/> using a <see cref="T:System.Numerics.Matrix3x2"/>.
            </summary>
            <param name="rect">The rectangle to transform</param>
            <param name="m">The matrix to use to transform the <paramref name="rect"/></param>
            <returns>A new rectangle</returns>
        </member>
        <member name="M:Uno.Extensions.RectExtensions.GetOrientation(Windows.Foundation.Rect)">
            <summary>
            Returns the orientation of the rectangle.
            </summary>
            <param name="rect">A rectangle.</param>
            <returns>Portrait, Landscape, or None (if the rectangle has an exact 1:1 ratio)</returns>
        </member>
        <member name="M:Uno.Extensions.RectExtensions.GetDistance(Windows.Foundation.Rect,Windows.Foundation.Point)">
            <summary>
            Gets the shortest distance from the given point to the edges of rect.
            If the rect <see cref="M:Windows.Foundation.Rect.Contains(Windows.Foundation.Point)"/> the point, then distance will be 0.
            </summary>
        </member>
        <member name="M:Uno.Extensions.Vector2Extensions.ToPoint(System.Numerics.Vector2)">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector2"/> to a <see cref="T:Windows.Foundation.Point"/>.
            </summary>
            <param name="v">The <see cref="T:System.Numerics.Vector2"/> to convert</param>
            <returns>A <see cref="T:Windows.Foundation.Point"/></returns>
        </member>
        <member name="M:Uno.Extensions.Vector2Extensions.ToVector(Windows.Foundation.Point)">
            <summary>
            Converts a <see cref="T:Windows.Foundation.Point"/> to a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="p">The <see cref="T:Windows.Foundation.Point"/> to convert</param>
            <returns>A <see cref="T:System.Numerics.Vector2"/></returns>
        </member>
        <member name="T:Uno.Helpers.AppDataUriEvaluator">
            <summary>
            Logic is based on https://docs.microsoft.com/en-us/windows/uwp/app-resources/uri-schemes#ms-appdata.
            </summary>
        </member>
        <member name="M:Uno.Helpers.AppDataUriEvaluator.ToPath(System.Uri)">
            <summary>
            Converts given ms-appdata: URI to filesystem path.
            </summary>
            <param name="appdataUri">ms-appdata: URI.</param>
            <returns>Filesystem path.</returns>
        </member>
        <member name="T:Uno.Helpers.DeferralManager`1">
            <summary>
            Handles completion of deferrals. The deferred action is completed when all deferral objects that were taken have called Complete().
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Uno.Helpers.DeferralManager`1._deferralsCount">
            <summary>
            Start the count at 1, this ensures the deferral won't be completed until all subscribers to the corresponding event have had a
            chance to take out a deferral object.
            </summary>
        </member>
        <member name="M:Uno.Helpers.DeferralManager`1.EventRaiseCompleted">
            <summary>
            This marks the deferral as ready for completion.
            Must be called after the related event finished invoking.
            In case the operation is not deferred, it will also synchronously raise
            the Completed event.
            </summary>
            <returns>A value indicating whether the deferral completed synchronously.</returns>
        </member>
        <member name="M:Uno.Helpers.DispatcherTimerProxy.GetDispatcherTimer">
            <summary>
            Provides access to DispatcherTimer within the Uno.dll layer
            </summary>
        </member>
        <member name="T:Uno.Helpers.StartStopEventWrapper`1">
            <summary>
            Creates a wrapper around an event, which needs to be synchronized
            and needs to run an action when first subscriber is added and when
            last subscriber is removed. The operations executed when first subscriber
            is added and last subscriber is removed will execute within
            a synchronization lock, so please avoid blocking within the actions.
            </summary>
        </member>
        <member name="M:Uno.Helpers.StartStopEventWrapper`1.#ctor(System.Action,System.Action,System.Object)">
            <summary>
            Creates a new instance of start-stop event wrapper.
            </summary>
            <param name="onFirst">Action to run when first subscriber is added.
            This will run within a synchronization lock so it should not involve blocking operations.</param>
            <param name="onLast">Action to run when last subscriber is removed.
            This will run within a synchronization lock so it should not involve blocking operations.</param>
            <param name="sharedLock">Optional shared object to lock on (when multiple events
            rely on the same native platform operation.</param>
        </member>
        <member name="M:Uno.Helpers.DrawableHelper.FindResourceId(System.String)">
            <summary>
            Returns the Id of the bundled image.
            </summary>
            <param name="imageName">Name of the image</param>
            <returns>Resource's id</returns>
        </member>
        <member name="M:Uno.Helpers.DrawableHelper.FromUri(System.Uri)">
            <summary>
            Finds a Drawable by URI
            </summary>
            <param name="uri">Uri</param>
            <returns>Drawable</returns>
        </member>
        <member name="M:Uno.AndroidResourceNameEncoder.Encode(System.String)">
            <summary>
            Encode a resource name to remove characters that are not supported on Android.
            </summary>
            <param name="key">The original resource name from the UWP Resources.resw file.</param>
            <returns>The encoded resource name for the Android Strings.xml file.</returns>
        </member>
        <member name="M:Uno.Media.Playback.VideoSurface.Clear">
            <summary>
            This method will clear the surface view from its last rendered pixels.
            This is used to avoid seeing the previous video rendering when setting
            a video source to null.
            </summary>
        </member>
        <member name="T:Uno.Storage.Internal.SafHelpers">
            <summary>
            Shared functionality handling for Android's Storage
            Access Framework-based StorageFiles and StorageFolders.
            </summary>
        </member>
        <member name="M:Uno.Storage.Internal.SafHelpers.GetBasicPropertiesAsync(Android.Net.Uri,AndroidX.DocumentFile.Provider.DocumentFile,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves basic properties for a given SAF Uri.
            </summary>
            <param name="safUri">SAF Uri.</param>
            <param name="includeSize">A value indicating whether the size should be included (not useful for folders).</param>
            <param name="token">Cancellation token.</param>
            <returns>Basic properties.</returns>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.Accessibility.HighContrast">
            <summary>
            Allows overriding the value returned by <see cref="P:Windows.UI.ViewManagement.AccessibilitySettings.HighContrast"/>.
            When changed, the <see cref="E:Windows.UI.ViewManagement.AccessibilitySettings.HighContrastChanged"/> event is raised.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.Accessibility.HighContrastScheme">
            <summary>
            Allows overriding the value returned by <see cref="P:Windows.UI.ViewManagement.AccessibilitySettings.HighContrastScheme"/>.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.ArrayPool.DefaultMaxArrayLength">
            <summary>The default maximum length of each array in the pool</summary>
            <remarks>
            WARNING: Altering this setting may degrade the performance of the application significantly.
            This value is captured automatically after App(), any subsequent change is ignored.
            </remarks>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.ArrayPool.DefaultAutomaticMaxNumberOfArraysPerBucket">
            <summary>The default maximum number of arrays per bucket that are available for rent when using automatic memory management.</summary>
            <remarks>
            WARNING: Altering this setting may degrade the performance of the application significantly.
            This value is captured automatically after App(), any subsequent change is ignored.
            </remarks>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.ArrayPool.DefaultMaxNumberOfArraysPerBucket">
            <summary>The default maximum number of arrays per bucket that are available for rent when automatic memory management is disabled.</summary>
            <remarks>
            WARNING: Altering this setting may degrade the performance of the application significantly.
            This value is captured automatically after App(), any subsequent change is ignored.
            </remarks>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.ArrayPool.EnableAutomaticMemoryManagement">
             <summary>Determines if automatic memory management is used for the ArrayPool.</summary>
             <remarks>
             WARNING: Altering this setting may degrade the performance of the application significantly.
             This value is captured automatically after App(), any subsequent change is ignored.
            
             Automatic memory management uses <see cref="T:Windows.System.MemoryManager"/> to determine the acceptable
             memory consumption for pools, and uses GC triggers to reduce the pressure.
             </remarks>
        </member>
        <member name="M:Uno.WinRTFeatureConfiguration.RestoreDefaults">
            <summary>
            Used by tests cleanup to restore the default configuration for other tests!
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.FileTypes.FileTypeToMimeMapping">
            <summary>
            Allows definition of custom file type MIME mappings.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.FileTypes.FileTypeToUTTypeMapping">
            <summary>
            Allows definition of custom file type UTType mappings.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.GestureRecognizer.InterpretMouseLeftLongPressAsRightTap">
            <summary>
            Determines if unlike UWP, long press on the left button of a mouse should be interpreted as a right tap.
            This is useful as the right button is commonly used by Android devices for back navigation.
            Using a long press with left button will be more intuitive for Android's users.
            Note that a long press on the right button is usually not used for back navigation, and will always be interpreted
            as a right tap no matter the value of this flag.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.GestureRecognizer.ShouldProvideHapticFeedback">
            <summary>
            Sets whether haptic feedback is provided when a touch-initiated drag is ready to begin. The default is true.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.MessageDialog.UseNativeDialog">
            <summary>
            Set this flag to true to use native OS dialogs when displaying MessageDialog.
            Note the native dialogs may not support all the features and they are also not
            supported on Skia targets.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.MessageDialog.StyleOverride">
            <summary>
            Allows overriding the style used by the ContentDialog
            which displays the MessageDialog. Should be set to a name (Key)
            of a Application-level ContentDialog style resource.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.WebAuthenticationBroker.AuthenticationTimeout">
            <summary>
            Set this to end the authentication process after this timeout.
            </summary>
        </member>
        <member name="P:Uno.WinRTFeatureConfiguration.WebAuthenticationBroker.DefaultReturnUri">
            <summary>
            Set the default return Uri. If not defined (null), the default provider
            will try to determine it automatically.
            </summary>
        </member>
        <member name="M:System.IO.WindowsRuntimeStreamExtensions.TrySetContentType(Windows.Storage.Streams.IRandomAccessStream,System.String)">
            <summary>
            Wraps the stream with the provided ContentType if the provided stream does not have a ContentType defined,
            returns the provided stream otherwise.
            </summary>
        </member>
    </members>
</doc>
