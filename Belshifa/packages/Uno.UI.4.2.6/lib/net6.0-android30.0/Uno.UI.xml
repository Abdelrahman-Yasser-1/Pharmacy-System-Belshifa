<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Uno.UI</name>
    </assembly>
    <members>
        <member name="T:Uno.UI.Behaviors.InternalVisibleBoundsPadding">
            <summary>
            Internal Uno behavior, use VisibleBoundsPadding instead.
            </summary>
            <remarks>
            This class is located in the same source file as the VisibleBoundsPadding class to avoid code duplication.
            This is required to ensure that both Uno.UI styles and UWP (through Uno.UI.Toolkit) can use this behavior
            and not have to synchronize two code files. The internal implementation is not supposed to be used outside 
            of the Uno.UI assembly, Uno.UI.Toolkit.VisibleBoundsPadding should be used by dependents.
            </remarks>
        </member>
        <member name="P:Uno.UI.Behaviors.InternalVisibleBoundsPadding.WindowPadding">
            <summary>
            The padding of the visible area relative to the entire window.
            </summary>
            <remarks>This will be 0 if the entire window is 'safe' for content.</remarks>
        </member>
        <member name="P:Uno.UI.Behaviors.InternalVisibleBoundsPadding.OffsetVisibleBounds">
            <summary>
            VisibleBounds offset to the reference frame of the window Bounds.
            </summary>
        </member>
        <member name="M:Uno.UI.Behaviors.InternalVisibleBoundsPadding.SetPaddingMask(Windows.UI.Xaml.DependencyObject,Uno.UI.Behaviors.InternalVisibleBoundsPadding.PaddingMask)">
            <summary>
            Set the <see cref="T:Uno.UI.Behaviors.InternalVisibleBoundsPadding.PaddingMask"/> to use on this property. A mask of <see cref="F:Uno.UI.Behaviors.InternalVisibleBoundsPadding.PaddingMask.All"/> will apply visible bounds 
            padding on all sides, a mask of <see cref="F:Uno.UI.Behaviors.InternalVisibleBoundsPadding.PaddingMask.Bottom"/> will adjust only the bottom padding, etc. The different options 
            can be combined as bit flags. 
            </summary>
        </member>
        <member name="P:Uno.UI.Behaviors.InternalVisibleBoundsPadding.AreBoundsAspectRatiosConsistent">
            <summary>
            If false, ApplicationView.VisibleBounds and Window.Current.Bounds have different aspect ratios (eg portrait vs landscape) which 
            might arise transiently when the screen orientation changes.
            </summary>
        </member>
        <member name="M:Uno.UI.Behaviors.InternalVisibleBoundsPadding.VisibleBoundsDetails.CalculateVisibilityPadding(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Calculate the padding required to keep the view entirely within the 'safe' visible bounds of the window.
            </summary>
            <param name="visibleBounds">The safe visible bounds of the window.</param>
            <param name="controlBounds">The bounds of the control, in the window's coordinates.</param>
        </member>
        <member name="M:Uno.UI.Behaviors.InternalVisibleBoundsPadding.VisibleBoundsDetails.AdjustScrollablePadding(Windows.UI.Xaml.Thickness,Windows.UI.Xaml.Controls.ScrollViewer)">
            <summary>
            Apply adjustments when target view is inside of a ScrollViewer.
            </summary>
        </member>
        <member name="M:Uno.UI.Behaviors.InternalVisibleBoundsPadding.VisibleBoundsDetails.CalculateAppliedPadding(Uno.UI.Behaviors.InternalVisibleBoundsPadding.PaddingMask,Windows.UI.Xaml.Thickness)">
            <summary>
            Calculate the padding to apply to the view, based on the selected PaddingMask.
            </summary>
            <param name="mask">The PaddingMask settings.</param>
            <param name="visibilityPadding">The padding required to keep the view entirely within the 'safe' visible bounds of the window.</param>
            <returns>The padding that will actually be set on the view.</returns>
        </member>
        <member name="T:Uno.UI.Controls.IShadowChildrenProvider">
            <summary>
            Provides access to the shadowed children list for a native view
            inheriting control. Used to improve the children enumeration performance.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.IShadowChildrenProvider.ChildrenShadow">
            <summary>
            An enumerable of children views.
            </summary>
            <remarks>
            This property is exposed as a concrete <see cref="T:System.Collections.Generic.List`1"/> to benefit from
            allocation-less enumeration of the shadow children.
            </remarks>
        </member>
        <member name="T:Uno.UI.Controls.ManagedItemsStackPanel">
            <summary>
            An ItemsStackPanel implementation which doesn't rely on high-level native list controls.
            </summary>
            <remarks>For now this panel mainly exists for testing purposes, to be able to debug the WASM/MacOS implementation on Android or iOS.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.ManagedItemsStackPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Uno.UI.Controls.AbsListViewSecondaryPool">
            <summary>
            A secondary pool for the AbsListView inheriting lists, to allow reuse 
            of views even if the control gets reloaded.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.AbsListViewSecondaryPool.RegisterForRecycled(Android.Views.View,System.Action)">
            <summary>
            Queues an action to be executed when the provided viewHolder is being recycled.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.AbsListViewSecondaryPool.RemoveFromRecycler(Android.Views.View)">
            <summary>
            To be called from ViewGroup.RemoveDetachedView, which is
            called by the internal RecycleBin.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Uno.UI.Controls.BindableButton.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableButton.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableButton.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableButton.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableButton.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableCheckBox.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableCheckBox.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableCheckBox.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableCheckBox.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableCheckBox.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableCheckBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableDatePicker.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableDrawerLayout.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableDrawerLayout.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableDrawerLayout.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableDrawerLayout.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableDrawerLayout.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.Pane.NativeHitCheck">
            <inheritdoc />
        </member>
        <member name="M:Uno.UI.Controls.Pane.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Pane.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableFragment.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableFragment.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableFragment.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableGridView.CustomViewTypeCount">
            <summary>
            This is used by Android's view recycling. The default value should normally be sufficient. Set it higher if a larger number of unique DataTemplates is needed.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableGridView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableHorizontalListView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Uno.UI.Controls.BindableImageView.ImageLoaderHandler">
            <summary>
            Defines an asynchronous image loader handler.
            </summary>
            <param name="ct">A cancellation token</param>
            <param name="uri">The image uri</param>
            <param name="targetSize">An optional target decoding size</param>
            <returns>A Bitmap instance</returns>
        </member>
        <member name="P:Uno.UI.Controls.BindableImageView.DefaultImageLoader">
            <summary>
            Provides a optional external image loader.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableImageView.ImageLoader">
            <summary>
            An optional image loader for this BindableImageView instance.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableImageView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Internal use.
            </summary>
            <remarks>This constructor is *REQUIRED* for the Mono/Java 
            binding layer to function properly, in case java objects need to call methods 
            on a collected .NET instance.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableItemsView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Uno.UI.Controls.BindableListAdapter._usedTemplates">
            <summary>
            All unique templates used; used to return ViewTypeCount
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableListAdapter.ItemTemplate">
            <summary>
            Sets the default item template for this adapter.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableListAdapter.ItemTemplateSelector">
            <summary>
            Provides an ItemTemplateSelector that will alter the item template based on the databound item.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableListAdapter.ItemContainerTemplate">
            <summary>
            Defines an item container for all items of the adapter. The default is a 
            <see cref="!:BasicVerticalItemContainer"/> that allows for items to use the full space.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableListAdapter.ItemContainerStyle">
            <summary>
            Sets the style to be applied to displayed containers
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableListAdapter.SetItemSelection(System.Object,Windows.UI.Xaml.Controls.Primitives.SelectorItem,System.Boolean)">
            <summary>
            Sets the selected state for the provided item.
            </summary>
            <param name="item">The item to alter selection</param>
            <param name="view">An optional view associated with the item being selected</param>
            <param name="selected">The new selection state</param>
        </member>
        <member name="M:Uno.UI.Controls.BindableListAdapter.GetRawItem(System.Int32)">
            <summary>
            Get item corresponding to <paramref name="position"/> in list, including header and footer if present
            </summary>
            <param name="position">Position in list</param>
            <returns>Corresponding item from items source, header, or footer</returns>
        </member>
        <member name="P:Uno.UI.Controls.BindableListAdapter.CustomViewTypeCount">
            <summary>
            Should be equal or greater than number of unique DataTemplates used. Set by ListView.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableListView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableListView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableListView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableListView.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableListView.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableListView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableProgressBar.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableProgressBar.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableProgressBar.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableProgressBar.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableProgressBar.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableProgressBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableRadioButton.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableRadioButton.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableRadioButton.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableRadioButton.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableRadioButton.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableRadioButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableSeekBar.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSeekBar.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSeekBar.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSeekBar.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSeekBar.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableSeekBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.BindableSwitchCompat.TextColor">
            <summary> 
            The color used to change the text label foreground.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableSwitchCompat.ThumbTint">
            <summary> 
            The color used to tint the appearance of the thumb.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableSwitchCompat.TrackTint">
            <summary> 
            The color used to tint the appearance of the track.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSwitchCompat.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSwitchCompat.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSwitchCompat.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSwitchCompat.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableSwitchCompat.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableSwitchCompat.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableToggleButton.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableToggleButton.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableToggleButton.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableToggleButton.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableToggleButton.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableToggleButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Uno.UI.Controls.BindableView">
            <summary>
            A bindable FrameLayout.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.GetNativeMeasuredDimensionsFast(Android.Views.View)">
            <summary>
            Provides the <see cref="P:Android.Views.View.MeasuredHeight"/> and <see cref="P:Android.Views.View.MeasuredWidth"/> in a single fast call.
            </summary>
            <remarks>
            This method exists to avoid having to call twice the View
            methods to get the measured width and height, and pay for the
            interop cost.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.BindableView.Uno#UI#Controls#IShadowChildrenProvider#ChildrenShadow">
            <summary>
            Provides a shadowed list of views, used to limit the impact of the marshalling.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.GetChildAt(System.Int32)">
            <summary>
            Gets the view at a specific position.
            </summary>
            <remarks>This method does not call the actual GetChildAt method,
            but an optimized version of it that does not require a hierarchy
            observer.</remarks>
        </member>
        <member name="P:Uno.UI.Controls.BindableView.ChildCount">
            <summary>
            Gets the number of child views.
            </summary>
            <remarks>This method does not call the actual ChildCount method,
            but an optimized version of it that does not require a hierarchy
            observer.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.AddView(Android.Views.View)">
            <summary>
            Adds a view to the current view group.
            </summary>
            <remarks>This method does not call the actual AddView method,
            but an optimized version of it that does not require a hierarchy
            observer.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.AddView(Android.Views.View,System.Int32)">
            <summary>
            Adds a view to the current view group using a position index.
            </summary>
            <remarks>This method does not call the actual AddView method,
            but an optimized version of it that does not require a hierarchy
            observer.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.RemoveView(Android.Views.View)">
            <summary>
            Removes a view from the current view group.
            </summary>
            <remarks>This method does not call the actual AddView method,
            but an optimized version of it that does not require a hierarchy
            observer.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.RemoveViewAt(System.Int32)">
            <summary>
            Removes a view from the current view group using a position index.
            </summary>
            <remarks>This method does not call the actual AddView method,
            but an optimized version of it that does not require a hierarchy
            observer.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.MoveViewTo(System.Int32,System.Int32)">
            <summary>
            Moves a view from one position to another position, without unloading it.
            </summary>
            <param name="oldIndex">The old index of the item</param>
            <param name="newIndex">The new index of the item</param>
            <remarks>
            The trick for this method is to move the child from one position to the other
            without calling RemoveView and AddView. In this context, the only way to do this is
            to call BringToFront, which is the only available method on ViewGroup that manipulates
            the index of a view, even if it does not allow for specifying an index.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.RegisterChildTransform(Uno.UI.Media.NativeRenderTransformAdapter)">
            <summary>
            Registers the native adapter which handles the RenderTransform on a child view
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.UnregisterChildTransform(Uno.UI.Media.NativeRenderTransformAdapter)">
            <summary>
            Removes the native adapter which handles the RenderTransform on a child view
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.OnLocalViewAdded(Android.Views.View,System.Int32)">
            <summary>
            Should not be used directly. Notifies that a view has been added to the ViewGroup using the native AddView methods.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.OnLocalViewRemoved(Android.Views.View)">
            <summary>
            Should not be used directly. Notifies that a view has been added to the ViewGroup using the native AddView methods.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.OnChildViewAdded(Android.Views.View)">
            <summary>
            Invoked when a child view has been added.
            </summary>
            <param name="view">The view being removed</param>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.NativeHitCheck">
            <summary>
            Provides a default implementation for the HitCheck
            performed in the UnoViewGroup java class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.NativeRequestLayout">
            <summary>
            Determines if the native call to RequestLayout should call its base.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.OnRemovedFromParent">
            <summary>
            Called whenever the current view is being removed from its parent. This method is
            called only if the parent is a BindableView.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.BindableView.LayoutId">
            <summary>
            Gest the currently applied Layout ID
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.ResetDependencyObjectParent(Android.Views.View)">
            <summary>
            Resets the dependency object parent for non BindableView views, but that implement IDependencyObject provider.
            </summary>
            <remarks>
            This is required on Android because native <see cref="T:Android.Views.View"/> instances
            can't be notified if their parent changes. <see cref="T:Uno.UI.UnoViewGroup"/> provides this behavior
            by intercepting add/remove children and calls <see cref="M:Uno.UI.Controls.BindableView.OnRemovedFromParent"/>.
            <see cref="T:Windows.UI.Xaml.FrameworkTemplatePool"/> relies on knowing that the <see cref="!:DependencyObject.Parent"/> of a
            pooled instances has been reset so for non <see cref="T:Uno.UI.Controls.BindableView"/> instances we reset it manually.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.NotifyRemovedFromParent">
            <summary>
            Call from non-<see cref="T:Uno.UI.UnoViewGroup"/> parents from <see cref="M:Uno.UI.Controls.BindableView.RemoveView(Android.Views.View)"/> and <see cref="M:Uno.UI.Controls.BindableView.RemoveViewAt(System.Int32)"/> in
            order to clear the <see cref="!:DependencyObject.Parent"/> correctly.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.BindableView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.AppBarButtonWrapper.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.AppBarButtonWrapper.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.NativeCommandBarPresenter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.NativeCommandBarPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.HorizontalGridView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.NativeHorizontalListView.CurrentScreen">
            <summary>
            Returns the CurrentScreen (Snap mode only).
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.NativeHorizontalListView.CurrentX">
            <summary>
            Returns the current leftmost X coordinate.
            </summary>
        </member>
        <member name="T:Uno.UI.Controls.ISecondaryViewPool">
            <summary>
            An abstraction for secondary view pool, for lists that use the RecyleBin pattern.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.ISecondaryViewPool.GetView(System.Int32)">
            <summary>
            Gets a view for the specified position.
            </summary>
            <param name="position">The position of the item in the list, to be used for ItemType selection.</param>
            <returns>A view to be used, otherwise null.</returns>
        </member>
        <member name="M:Uno.UI.Controls.ISecondaryViewPool.SetActiveView(System.Int32,Android.Views.View)">
            <summary>
            Sets the specified view as returned by the adapter.
            </summary>
            <param name="position">The position of the view in th elist</param>
            <param name="view">The view to be marked</param>
        </member>
        <member name="M:Uno.UI.Controls.ISecondaryViewPool.GetAllViews">
            <summary>
            Returns all materialized views stored in the pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.Controls.ISecondaryViewPool.RegisterForRecycled(Android.Views.View,System.Action)">
            <summary>
            Registers an action to be called when a view is recycled.
            </summary>
            <param name="container"></param>
            <param name="action"></param>
        </member>
        <member name="T:Uno.UI.Controls.TextPaintPool">
            <summary>
            A native <see cref="T:Android.Text.TextPaint"/> pool to improve drawing performance.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.TextPaintPool.GetPaint(Windows.UI.Text.FontWeight,Windows.UI.Text.FontStyle,Windows.UI.Xaml.Media.FontFamily,System.Double,System.Double,Windows.UI.Color,Android.Graphics.Shader,Windows.UI.Xaml.Documents.BaseLineAlignment,Windows.UI.Text.TextDecorations)">
            <summary>
            Builds a TextPaint configuration.
            </summary>
            <remarks>		
            This is required for some JNI related reason.
            At some point, the reference to a member field TextPaint gets collected if used 
            in some of the StaticLayout methods, so we create a local copy of the
            paint to be used in this context.
            One solution could be to use a <see cref="M:Android.Runtime.JNIEnv.NewGlobalRef(System.IntPtr)"/>, but the release of the reference
            can be tricky to place properly.
            </remarks>
            <returns>A <see cref="T:Android.Text.TextPaint"/> instance.</returns>
        </member>
        <member name="T:Uno.UI.Controls.SlidingTabLayout.ITabColorizer">
            Allows complete control over the colors drawn in the tab layout. Set with
            {@link #setCustomTabColorizer(TabColorizer)}.
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabLayout.ITabColorizer.GetIndicatorColor(System.Int32)">
            @return return the color of the indicator used when {@code position} is selected.
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabLayout.SetCustomTabColorizer(Uno.UI.Controls.SlidingTabLayout.ITabColorizer)">
             Set the custom {@link TabColorizer} to be used.
            
             If you only require simple custmisation then you can use
             {@link #setSelectedIndicatorColors(int...)} to achieve
             similar effects.
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabLayout.SetOnPageChangeListener(AndroidX.ViewPager.Widget.ViewPager.IOnPageChangeListener)">
             Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are
             required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so
             that the layout can update it's scroll position correctly.
            
             @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabLayout.SetCustomTabView(System.Int32,System.Int32)">
             Set the custom layout to be inflated for the tab views.
            
             @param layoutResId Layout id to be inflated
             @param textViewId id of the {@link TextView} in the inflated view
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabLayout.SetViewPager(AndroidX.ViewPager.Widget.ViewPager)">
            Sets the associated view pager. Note that the assumption here is that the pager content
            (number of tabs and tab titles) does not change after this call has been made.
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabLayout.CreateDefaultTabView(Android.Content.Context,System.Int32)">
            Create a default view to be used for tabs. This is called if a custom tab view is not set via
            {@link #setCustomTabView(int, int)}.
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabLayout.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabStrip.SetColorAlpha(System.Int32,System.Byte)">
            Set the alpha value of the {@code color} to be the given {@code alpha} value.
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabStrip.BlendColors(System.Int32,System.Int32,System.Single)">
             Blend {@code color1} and {@code color2} using the given ratio.
            
             @param ratio of which to blend. 1.0 will return {@code color1}, 0.5 will give an even blend,
                          0.0 will return {@code color2}.
        </member>
        <member name="M:Uno.UI.Controls.SlidingTabStrip.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.NativeFramePresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.ItemContainerHolderAdapter.SecondaryPool">
            <summary>
            An optional secondary view pool that can handle control reloads.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.GridView.UnselectOnClick">
            <summary>
            Offers the possibility to unselect the currently selected item when the SelectionMode is Single.
            Clicking on the currently selected item will unselect it.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.GridView.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.GridView.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Uno.UI.Controls.Legacy.GridView.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Uno.UI.Controls.Legacy.GridView.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.GridView.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.GridView.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Uno.UI.Controls.Legacy.GridView.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.GridView.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.GridView.RenderTransformOriginProperty">
            <summary>
            Backing dependency property for <see cref="P:Uno.UI.Controls.Legacy.GridView.RenderTransformOrigin"/>
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.GridView.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.GridView.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.GridView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalGridView.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalGridView.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Uno.UI.Controls.Legacy.HorizontalGridView.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Uno.UI.Controls.Legacy.HorizontalGridView.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalGridView.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalGridView.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalGridView.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalGridView.RenderTransformOriginProperty">
            <summary>
            Backing dependency property for <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.RenderTransformOrigin"/>
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalGridView.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalGridView.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalGridView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the list to bring the specified data item into view.
            </summary>
            <param name="item">The data item to bring into view.</param>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalListView.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalListView.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Uno.UI.Controls.Legacy.HorizontalListView.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Uno.UI.Controls.Legacy.HorizontalListView.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalListView.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalListView.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalListView.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalListView.RenderTransformOriginProperty">
            <summary>
            Backing dependency property for <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.RenderTransformOrigin"/>
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.HorizontalListView.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.HorizontalListView.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.HorizontalListView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.CustomViewTypeCount">
            <summary>
            This is used by Android's view recycling. The default value should normally be sufficient. Set it higher if a larger number of unique DataTemplates is needed.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.UnselectOnClick">
            <summary>
            Offers the possibility to unselect the currently selected item when the SelectionMode is Single.
            Clicking on the currently selected item will unselect it.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the list to bring the specified data item into view.
            </summary>
            <param name="item">The data item to bring into view.</param>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Uno.UI.Controls.Legacy.ListView.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Uno.UI.Controls.Legacy.ListView.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Uno.UI.Controls.Legacy.ListView.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.RenderTransformOriginProperty">
            <summary>
            Backing dependency property for <see cref="P:Uno.UI.Controls.Legacy.ListView.RenderTransformOrigin"/>
            </summary>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListView.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Uno.UI.Controls.Legacy.ListView.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListViewAdapter.CustomViewTypeCount">
            <summary>
            Should be equal or greater than number of unique DataTemplates used. Set by ListView.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListViewAdapter.GetItemAt(System.Int32)">
            <summary>
            Gets the item from the source at the specified position.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListViewAdapter.GetItemsCount">
            <summary>
            Gets the number of items in the source.
            </summary>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListViewAdapter.SetItemSelection(System.Object,Windows.UI.Xaml.Controls.Primitives.SelectorItem,System.Boolean)">
            <summary>
            Sets the selected state for the provided item.
            </summary>
            <param name="item">The item to alter selection</param>
            <param name="view">An optional view associated with the item being selected</param>
            <param name="selected">The new selection state</param>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListViewAdapter.ProcessItemsSource(System.Object)">
            <summary>
            Returns a IEnumerable of the current ItemsSource (adds support for CollectionViewSource, groups, etc)
            </summary>
            <param name="itemsSource"></param>
            <returns></returns>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListViewFooter.CanCreateTemplateWithoutParent">
            <remarks>
            Ensure that the ContentControl will create its chidren even
            if it has no parent view. This is critical for the recycling panels,
            where the content is databound before being assigned to its
            parent and displayed.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListViewFooter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListViewHeader.CanCreateTemplateWithoutParent">
            <remarks>
            Ensure that the ContentControl will create its chidren even
            if it has no parent view. This is critical for the recycling panels,
            where the content is databound before being assigned to its
            parent and displayed.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListViewHeader.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Uno.UI.Controls.Legacy.ListViewHeaderItem.CanCreateTemplateWithoutParent">
            <remarks>
            Ensure that the ContentControl will create its chidren even
            if it has no parent view. This is critical for the recycling panels,
            where the content is databound before being assigned to its
            parent and displayed.
            </remarks>
        </member>
        <member name="M:Uno.UI.Controls.Legacy.ListViewHeaderItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Uno.UI.DataBinding.BindableProperty">
            <summary>
            Defines a bindable property implementation.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindableProperty.#ctor(System.Type,Uno.UI.DataBinding.PropertyGetterHandler,Uno.UI.DataBinding.PropertySetterHandler)">
            <summary>
            This ctor is available for backward compatibility. On newer versions of Uno.UI, the BindableTypeProvidersSourceGenerator uses the single-parameter ctor
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.BindablePropertyDescriptor">
            <summary>
            Defines a bindable property with its owner type
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindablePropertyDescriptor.GetPropertByBindableMetadataProvider(System.Type,System.String)">
            <summary>
            Gets a bindable type and its property.
            </summary>
            <param name="originalType">The type in which to look for the property</param>
            <param name="property">The property name, or the attached property name.</param>
            <returns>A bindable type descriptor.</returns>
        </member>
        <member name="T:Uno.UI.DataBinding.BindableType">
            <summary>
            Defines a bindable type implementation
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindableType.#ctor(System.Int32,System.Type)">
            <summary>
            Builds a new BindableType.
            </summary>
            <param name="estimatedPropertySize">Provide an estimated number of properties, so the dictionary does not need to grow unnecessarily.</param>
            <param name="sourceType">The actual .NET type that corresponds to this instance.</param>
        </member>
        <member name="T:Uno.UI.DataBinding.BinderReferenceHolder">
            <summary>
            A helper class for memory diagnostics.
            </summary>
            <remarks>
            This class functions as a GC marker to detect if a binder has 
            been collected, hence detect memory leaks of the visual tree.
            </remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.AddNativeReference(Android.Views.View,Android.Views.View)">
            <summary>
            Adds the specified instance as referenced by the specified parent.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.RemoveNativeReference(Android.Views.View,Android.Views.View)">
            <summary>
            Removes the specified instance as referenced by the specified parent.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.GetInactiveViewBinders">
            <summary>
            Retreives a list of binders that are native views that
            don't have a parent, and are not attached to the window.
            An inactive binder may be a memory leak.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.GetInactiveChildViewBinders">
            <summary>
            Retrieves a list of binders that are native views that 
            aren't attached to the window. These views may be part 
            of a leaked control.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.GetInactiveInstancesOfType``1">
            <summary>
            Retrieves all inactive views of the specified type.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.GetInactiveChildInstancesOfType``1">
            <summary>
            Retrieves all children of the specified type whose top-level parent is detached from the window.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.GetReferenceStats">
            <summary>
            Retreives statistics about the live instances.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.LogReferenceStatsWithDetails">
            <summary>
            Retreives statistics about the live instances.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BinderReferenceHolder.GetInactiveViewReferencesStats">
            <summary>
            Retreives statistics about the live inactive instances.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.BindingPath.IPropertyChangedRegistrationHandler">
            <summary>
            Defines a interface that will allow for the creation of a registration on the specified dataContext
            for the specified propertyName.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.IPropertyChangedRegistrationHandler.Register(Uno.UI.DataBinding.ManagedWeakReference,System.String,Uno.UI.DataBinding.BindingPath.IPropertyChangedValueHandler)">
            <summary>
            Registere a new <see cref="T:Uno.UI.DataBinding.BindingPath.IPropertyChangedValueHandler"/> for the specified property
            </summary>
            <param name="dataContext">The datacontext to use</param>
            <param name="propertyName">The property in the datacontext</param>
            <param name="onNewValue">The action to execute when a new value is raised</param>
            <returns>A disposable that will cleanup resources.</returns>
        </member>
        <member name="T:Uno.UI.DataBinding.BindingPath.IPropertyChangedValueHandler">
            <summary>
            PropertyChanged value handler.
            </summary>
            <remarks>
            This is an interface to avoid the use of delegates, and delegates type conversion as
            there are two available signatures. (<see cref="T:System.Action"/> and <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedCallback"/>)
            </remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.IPropertyChangedValueHandler.NewValue(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Process a property changed using the <see cref="T:Windows.UI.Xaml.DependencyPropertyChangedCallback"/> signature.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.IPropertyChangedValueHandler.NewValue">
            <summary>
            Processa a property changed using <see cref="T:System.Action"/>-like signature (e.g. for <see cref="T:Uno.UI.DataBinding.BindingPath.BindingItem"/>)
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.BindingPath.ValueChangedListener">
            <summary>
            Provides the new values for the current binding.
            </summary>
            <remarks>
            This event is not a generic type for performance constraints on Mono's Full-AOT
            </remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.#ctor(System.String,System.Object)">
            <summary>
            Creates a BindingPath for the specified path
            </summary>
            <param name="path"></param>
            <param name="fallbackValue">Provides the fallback value to apply when the source is invalid.</param>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.#ctor(System.String,System.Object,System.Nullable{Windows.UI.Xaml.DependencyPropertyValuePrecedences},System.Boolean)">
            <summary>
            Creates a BindingPath for the specified path using a specified DependencyProperty precedence.
            </summary>
            <param name="path">The path to the property</param>
            <param name="fallbackValue">Provides the fallback value to apply when the source is invalid.</param>
            <param name="precedence">The precedence value to manipulate if the path matches to a DependencyProperty.</param>
            <param name="allowPrivateMembers">Allows for the binding engine to include private properties in the lookup</param>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.GetPathItems">
            <summary>
            Returns a chain of items composing the currently databound path.
            </summary>
            <returns>An enumerable of binding items</returns>
            <remarks>
            The DataContext and PropertyType of the descriptor may be null
            if the binding is incomplete (the DataContext may be null, or the path is invalid)
            </remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.CloneShareableObjectsInPath">
            <summary>
            Checks the property path for members which may be shared resources (<see cref="T:Windows.UI.Xaml.Media.Brush"/>es and <see cref="T:Windows.UI.Xaml.Media.Transform"/>s) and creates a
            copy of them if need be (ie if not already copied). Intended to be used prior to animating the targeted property.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.RegisterPropertyChangedRegistrationHandler(Uno.UI.DataBinding.BindingPath.IPropertyChangedRegistrationHandler)">
            <summary>
            Registers a property changed registration handler.
            </summary>
            <param name="handler">The handled to be called when a property needs to be observed.</param>
            <remarks>This method exists to provide layer separation,
            when BindingPath is in the presentation layer, and DependencyProperty is in the (some) Views layer.
            </remarks>
        </member>
        <member name="P:Uno.UI.DataBinding.BindingPath.Value">
            <summary>
            Provides the value of the <see cref="P:Uno.UI.DataBinding.BindingPath.Path"/> using the
            current <see cref="P:Uno.UI.DataBinding.BindingPath.DataContext"/> using the current precedence.
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.BindingPath.LeafPropertyName">
            <summary>
            Name of the leaf property in the path.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.GetSubstituteValue">
            <summary>
            Gets the value of the DependencyProperty with a
            precedence immediately below the one specified at the creation
            of the BindingPath.
            </summary>
            <returns>The lower precedence value</returns>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.SetLocalValue(System.Object)">
            <summary>
            Sets the value of the <see cref="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Local"/>
            </summary>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.ClearValue">
            <summary>
            Clears the value of the current precedence.
            </summary>
            <remarks>After this call, the value returned
            by <see cref="P:Uno.UI.DataBinding.BindingPath.Value"/> will be of the next available
             precedence.</remarks>
        </member>
        <member name="T:Uno.UI.DataBinding.BindingPath.BindingPathPropertyChangedRegistrationHandler">
            <summary>
            Property changed registration handler for BindingPath.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.Parse(System.String,System.Object,System.Nullable{Windows.UI.Xaml.DependencyPropertyValuePrecedences},System.Boolean,Uno.UI.DataBinding.BindingPath.BindingItem@,Uno.UI.DataBinding.BindingPath.BindingItem@)">
            <summary>
            Parse the given string path in parts and create the linked list of binding items in head and tail
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.TryPrependItem(System.String,System.Int32,System.Int32,System.Object,System.Nullable{Windows.UI.Xaml.DependencyPropertyValuePrecedences},System.Boolean,Uno.UI.DataBinding.BindingPath.BindingItem@,Uno.UI.DataBinding.BindingPath.BindingItem@)">
            <summary>
            Prepends an item in the binding linked list if the string defined between by start and length is valid.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.SubscribeToNotifyPropertyChanged(Uno.UI.DataBinding.ManagedWeakReference,System.String,Uno.UI.DataBinding.BindingPath.IPropertyChangedValueHandler)">
            <summary>
            Subscribes for updates to the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.BindingItem.SetValue(System.Object)">
            <summary>
            Sets the value using the <see cref="F:Uno.UI.DataBinding.BindingPath.BindingItem._precedence"/>
            </summary>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.BindingItem.SetLocalValue(System.Object)">
            <summary>
            Sets the value using the <see cref="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Local"/>
            </summary>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPath.BindingItem.SubscribeToPropertyChanged">
            <summary>
            Subscribes to property notifications for the current binding
            </summary>
            <param name="action">The action to execute when new values are raised</param>
            <returns>A disposable to be called when the subscription is disposed.</returns>
        </member>
        <member name="T:Uno.UI.DataBinding.BindingPath.BindingItem.PropertyChangedValueHandler">
            <summary>
            Property changed value handler, used to avoid creating a delegate for processing
            </summary>
            <remarks>
            This class is primarily used to avoid the costs associated with creating, storing and invoking delegates,
            particularly on WebAssembly as of .NET 6 where invoking a delegate requires a context switch from AOT
            to the interpreter.
            </remarks>
        </member>
        <member name="P:Uno.UI.DataBinding.BindableMetadata.Provider">
            <summary>
            Sets the metadata provider for the whole app domain.
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.BindingPropertyHelper.BindableMetadataProvider">
            <summary>
            Sets an external metadata provider.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPropertyHelper.GetValueGetter(System.Type,System.String,System.Nullable{Windows.UI.Xaml.DependencyPropertyValuePrecedences},System.Boolean)">
            <summary>
            Gets a <see cref="T:Uno.UI.DataBinding.ValueGetterHandler"/> for a named property
            </summary>
            <param name="type">The type to search</param>
            <param name="property">The name of the property to get</param>
            <param name="precedence">The precedence for which the getter will get the value</param>
            <param name="allowPrivateMembers">Allows for private members to be included in the search</param>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPropertyHelper.GetPropertyInfo(System.Type,System.String,System.Boolean)">
             <summary>
             Finds the specified property info by name.
             </summary>
             <param name="type">The type to search</param>
             <param name="name">The name of the property</param>
             <returns>A <see cref="T:System.Reflection.PropertyInfo"/> instance.</returns>
             <remarks>
             This method is required when searching in types that
             include "new" non-virtual overridden members. In Mono 4.0 and
             earlier, the highest match would be returned, but the .NET core 
             implementation found in Mono 4.2+ throws an ambiguous match exception.
             This requires a recursive search using the <see cref="F:System.Reflection.BindingFlags.DeclaredOnly"/> flag.
            
             The private members lookup is present to enable the binding to
             x:Name elements in x:Bind operations.
             </remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPropertyHelper.IsIndexerFormat(System.String)">
            <summary>
            Determines if the property is referencing a C# indexer.
            </summary>
            <param name="property">The property name</param>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPropertyHelper.ConvertWithConvertionExtension(System.Object,System.Type)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPropertyHelper.IsValidMetadataProviderType(System.Type)">
            <summary>
            Determines if the type can be provided by the MetadataProvider
            </summary>
            <remarks>This method needs to be aligned with the symbols query in BindableTypeProvidersSourceGenerator.</remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPropertyHelper.FastConvert(System.Type,System.Object,System.Object@)">
            <summary>
            Converts the input to the outputType using a fast conversion, for known system types.
            </summary>
            <param name="outputType">The target type</param>
            <param name="input">The input value to use</param>
            <param name="output">The input value converted to the <paramref name="outputType"/>.</param>
            <returns>True if the conversion succeeded, otherwise false.</returns>
            <remarks>
            This is a fast path conversion that avoids going through the TypeConverter
            infrastructure for known system types.
            </remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.BindingPropertyHelper.NextDoubleLength(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns the number of characters containing the next double.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.IBindableMetadataProvider">
            <summary>
            An interface that provides bindable types metadata.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.IBindableMetadataProvider.GetBindableTypeByType(System.Type)">
            <summary>
            Allows to get a Bindable type definition through a System.Type.
            </summary>
            <param name="type">The type to lookup</param>
            <returns>A bindable type instance, otherwise null.</returns>
        </member>
        <member name="M:Uno.UI.DataBinding.IBindableMetadataProvider.GetBindableTypeByFullName(System.String)">
            <summary>
            Allows to get a Bindable type definition through a string representing the full type name.
            </summary>
            <param name="fullName">The type to lookup</param>
            <returns>A bindable type instance, otherwise null.</returns>
        </member>
        <member name="T:Uno.UI.DataBinding.PropertyGetterHandler">
            <summary>
            A delegate that gets the value of a dependency property, given the provided precedence.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.PropertySetterHandler">
            <summary>
            A delegate that sets the value of a dependency property, given the provided precedence.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.IBindableProperty">
            <summary>
            Defines a bindable property
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.IBindableProperty.PropertyType">
            <summary>
            Gets the type of the property
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.IBindableProperty.DependencyProperty">
            <summary>
            Gets the type of the property
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.IBindableProperty.Getter">
            <summary>
            Provides the getter method for this property
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.IBindableProperty.Setter">
            <summary>
            Provides the setter method for this property
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.ActivatorDelegate">
            <summary>
            A delegate that creates an instance of a type.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.StringIndexerGetterDelegate">
            <summary>
            A delegate that gets the value of a indexer.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.StringIndexerSetterDelegate">
            <summary>
            A delegate that sets the value using an indexer.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.IBindableType">
            <summary>
            Defines a bindable type.
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.IBindableType.Type">
            <summary>
            Provides the Type of this bindable type
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.IBindableType.CreateInstance">
            <summary>
            Gets a method that will create an instance of the currentype.
            </summary>
            <returns>An initialized instance.</returns>
        </member>
        <member name="M:Uno.UI.DataBinding.IBindableType.GetProperty(System.String)">
            <summary>
            Gets a bindable property for the current type.
            </summary>
            <param name="name"></param>
            <returns>A bindable property instance, otherwise null.</returns>
        </member>
        <member name="M:Uno.UI.DataBinding.IBindableType.GetIndexerGetter">
            <summary>
            Returns a function that can be called to get the indexer value.
            </summary>
            <returns>A bindable property instance, otherwise null.</returns>
        </member>
        <member name="M:Uno.UI.DataBinding.IBindableType.GetIndexerSetter">
            <summary>
            Returns an action that can be called to set the indexer value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Uno.UI.DataBinding.IValueChangedListener">
            <summary>
            A value changed listener for bindings.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.IWeakReferenceProvider">
            <summary>
            Defines an instance that can provide a <see cref="P:Uno.UI.DataBinding.IWeakReferenceProvider.WeakReference"/> of itself.
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.IWeakReferenceProvider.WeakReference">
            <summary>
            A managed weak reference of the current instance.
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.ManagedGCHandle">
            <summary>
            A <see cref="T:System.WeakReference"/>-like implementation suited for reuse in <see cref="T:Uno.UI.DataBinding.WeakReferencePool"/>
            </summary>
            <remarks>
            This class is very similar to <see cref="T:System.WeakReference"/> except that it does
            not create an empty GCHandle when created. It also works around an unknown <see cref="T:System.WeakReference"/> issue
            where setting the <see cref="P:System.WeakReference.Target"/> with a live object always returns null, yet creating a 
            <see cref="T:System.WeakReference"/> using the same live object creates a normal weak reference.
            </remarks>
        </member>
        <member name="P:Uno.UI.DataBinding.ManagedGCHandle.Target">
            <summary>
            Provides the target of the GCHandle
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.ManagedWeakReference">
            <summary>
            Defines a WeakReference with an owner, created through <see cref="M:Uno.UI.DataBinding.WeakReferencePool.RentWeakReference(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.ManagedWeakReference.Owner">
            <summary>
            Provides the owner of the reference, which requested the current <see cref="T:System.WeakReference"/>
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.ManagedWeakReference.Target">
            <summary>
            The managed weak reference
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.ManagedWeakReference.GetUnsafeTargetHandle">
            <summary>
            Provides the inner <see cref="T:System.WeakReference"/> to the target
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.ManagedWeakReference.CloneWeakReference">
            <summary>
            Provides the inner <see cref="T:System.WeakReference"/> to the target
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.ManagedWeakReference.GetUnsafeOwnerHandle">
            <summary>
            Provides the inner <see cref="T:System.WeakReference"/> to the owner
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.ManagedWeakReference.IsAlive">
            <summary>
            <see cref="P:System.WeakReference.IsAlive"/>
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.ManagedWeakReference.IsSelfReference">
            <summary>
            Determines if this instance is a self reference
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.ManagedWeakReference.IsNativeAlive(System.Object)">
            <summary>
            Check if the target is a managed peer whose underlying native object has been collected.
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.ManagedWeakReference.IsDisposed">
            <summary>
            Determines if the current instance has been disposed via <see cref="M:Uno.UI.DataBinding.ManagedWeakReference.Dispose"/>.
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.ManagedWeakReference.Dispose">
            <summary>
            Disposes the current instance
            </summary>
        </member>
        <member name="T:Uno.UI.DataBinding.WeakReferencePool">
            <summary>
            A weak reference pool
            </summary>
            <remarks>
            This pool provides <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> instances, which are expensive to create (<see cref="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)"/> and forces the GC
            to track many of those references to the same object. This pool also handles the detection 
            of <see cref="T:Uno.UI.DataBinding.IWeakReferenceProvider"/> instances. Those instances are most likely to be 
            weakly referenceed, and can provide their own reference more efficiently.
            </remarks>
        </member>
        <member name="P:Uno.UI.DataBinding.WeakReferencePool.MaxReferences">
            <summary>
            The maximum number of recycled <see cref="T:System.WeakReference"/> that can been pooled
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.WeakReferencePool.Enabled">
            <summary>
            Determines if the pool can recycle instances returned through <see cref="M:Uno.UI.DataBinding.WeakReferencePool.ReturnWeakReference(System.Object,Uno.UI.DataBinding.ManagedWeakReference)"/>
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.WeakReferencePool.PooledReferences">
            <summary>
            Gets the number of currently pooled references
            </summary>
        </member>
        <member name="M:Uno.UI.DataBinding.WeakReferencePool.RentSelfWeakReference(Uno.UI.DataBinding.IWeakReferenceProvider)">
            <summary>
            Creates a <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> for an type implementing <see cref="T:Uno.UI.DataBinding.IWeakReferenceProvider"/>.
            </summary>
            <param name="target">The instance to create a <see cref="T:System.WeakReference"/> for.</param>
            <returns>A <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/>. </returns>
        </member>
        <member name="M:Uno.UI.DataBinding.WeakReferencePool.RentWeakReference(System.Object,System.Object)">
            <summary>
            Gets a <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> from the pool.
            </summary>
            <param name="owner"></param>
            <param name="target"></param>
            <returns>A <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/>.</returns>
            <remarks>
            Returned <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> are not tracked by the pool
            and do not have be returned to pool. Yet, it's best for memory managed to
            return them through <see cref="M:Uno.UI.DataBinding.WeakReferencePool.ReturnWeakReference(System.Object,Uno.UI.DataBinding.ManagedWeakReference)"/>.
            </remarks>
        </member>
        <member name="M:Uno.UI.DataBinding.WeakReferencePool.ReturnWeakReference(System.Object,Uno.UI.DataBinding.ManagedWeakReference)">
            <summary>
            Return a <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> to the pool.
            </summary>
            <param name="owner">The instance returning the reference to the pool.</param>
            <param name="managedWeakReference">A <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> to return</param>
            <remarks>
            The returned <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> may not be owner by the <paramref name="owner"/>, 
            in which case, the <paramref name="managedWeakReference"/> will not be returned to the pool. If the reference
            if an <see cref="T:Uno.UI.DataBinding.IWeakReferenceProvider"/> it is not returned as well.
            A null <paramref name="managedWeakReference"/> is ignored.
            </remarks>
        </member>
        <member name="T:Uno.UI.DataBinding.BinderDetails">
            <summary>
            Defines a helper class to enable tools like Stetho to provide meaningful
            information about the .NET side of the controls.
            </summary>
        </member>
        <member name="P:Uno.UI.DataBinding.BinderDetails.IsBinderDetailsEnabled">
            <summary>
            Determines if the binder details class monitoring is enabled by default.
            </summary>
        </member>
        <member name="M:Uno.UI.DebugHelper.DumpNativeStack">
            <summary>
            Dump the complete current native stack to debug output. Useful in advanced debugging scenarios.
            </summary>
            <returns>The stack as a single string</returns>
        </member>
        <member name="P:Uno.UI.DebugHelper.NativeStackTrace">
            <summary>
            Returns the complete current native stack. Useful in advanced debugging scenarios.
            </summary>		
        </member>
        <member name="T:Uno.UI.Extensions.TreeEnumerationMode">
            <summary>
            Possible modes to enumerate the children of a tree
            </summary>
        </member>
        <member name="F:Uno.UI.Extensions.TreeEnumerationMode.Branch">
            <summary>
            Enumerates visual tree branch per branch
            (i.e. go as deep as possible on the first branch before enumerating the second one etc.)
            </summary>
        </member>
        <member name="F:Uno.UI.Extensions.TreeEnumerationMode.Layer">
            <summary>
            Enumerates visual tree layer per layer
            (i.e. enumerates all direct children before enumerating sub-children of those etc.)
            </summary>
        </member>
        <member name="M:Uno.UI.Extensions.DependencyObjectExtensions.GetAllParents(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            ** Recursively ** gets an enumerable sequence of all the parent objects of a given element.
            Parents are ordered from bottom to the top, i.e. from direct parent to the root of the window.
            </summary>
            <param name="element">The element to search from</param>
            <param name="includeCurrent">Determines if the current <paramref name="element"/> should be included or not.</param>
        </member>
        <member name="M:Uno.UI.Extensions.DependencyObjectExtensions.FindFirstParent``1(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Search for the first parent of the given type.
            </summary>
            <typeparam name="T">The type of child we are looking for</typeparam>
            <param name="element">The element to search from</param>
            <param name="includeCurrent">Determines if the current <paramref name="element"/> should be tested or not.</param>
            <returns>The first found parent that is of the given type.</returns>
        </member>
        <member name="M:Uno.UI.Extensions.DependencyObjectExtensions.FindFirstParent``1(Windows.UI.Xaml.DependencyObject,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Search for the first parent of the given type that is matching the given predicate.
            </summary>
            <typeparam name="T">The type of child we are looking for</typeparam>
            <param name="element">The element to search from</param>
            <param name="predicate">The predicate to use to find the right expected parent</param>
            <param name="includeCurrent">Determines if the current <paramref name="element"/> should be tested or not.</param>
            <returns>The first found parent that is of the given type.</returns>
        </member>
        <member name="M:Uno.UI.Extensions.DependencyObjectExtensions.GetChildren(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Gets direct children of the given DependencyObject
            </summary>
        </member>
        <member name="M:Uno.UI.Extensions.DependencyObjectExtensions.GetAllChildren(Windows.UI.Xaml.DependencyObject,System.Nullable{System.Int32},System.Boolean,Uno.UI.Extensions.TreeEnumerationMode)">
            <summary>
            **Recursively** get all children of the given DependencyObject
            </summary>
        </member>
        <member name="M:Uno.UI.Extensions.DependencyObjectExtensions.FindFirstChild``1(Windows.UI.Xaml.DependencyObject,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            **Recursively** search for the first child of the given type.
            </summary>
            <typeparam name="T">The type of child we are looking for</typeparam>
            <param name="element">The element to search from</param>
            <param name="childLevelLimit">The max sub-level to dig into. Cf. Remarks</param>
            <param name="includeCurrent">Determines if the current <paramref name="element"/> should be tested or not.</param>
            <returns>The first found child that is of the given type.</returns>
            <remarks>
            It's always preferable to specify a <paramref name="childLevelLimit"/> in order to not enumerate the full visual tree
            while searching for an element. Note also that enumeration is achieve branch per branch, so no matter how the expected element
            is close to the <paramref name="element"/>, the children branches before it are going to be enumerated.
            </remarks>
        </member>
        <member name="M:Uno.UI.Extensions.DependencyObjectExtensions.FindFirstChild``1(Windows.UI.Xaml.DependencyObject,System.Func{``0,System.Boolean},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            **Recursively** search for the first child of the given type that is matching the given predicate.
            </summary>
            <typeparam name="T">The type of child we are looking for</typeparam>
            <param name="element">The element to search from</param>
            <param name="predicate">The predicate to use to find the right expected child</param>
            <param name="childLevelLimit">The max sub-level to dig into. Cf. Remarks</param>
            <param name="includeCurrent">Determines if the current <paramref name="element"/> should be tested or not.</param>
            <returns>The first found child that is of the given type.</returns>
            <remarks>
            It's always preferable to specify a <paramref name="childLevelLimit"/> in order to not enumerate the full visual tree
            while searching for an element. Note also that enumeration is achieve branch per branch, so no matter how the expected element
            is close to the <paramref name="element"/>, the children branches before it are going to be enumerated.
            </remarks>
        </member>
        <member name="M:Uno.UI.Extensions.DependencyObjectExtensions.GetFocusedElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the focused element.
            </summary>
            <param name="referenceElement">Reference element.</param>
            <returns>Focused element.</returns>
        </member>
        <member name="M:Uno.UI.Extensions.EnumerableExtensions.SelectToList``1(Windows.UI.Xaml.Controls.UIElementCollection,System.Func{Android.Views.View,``0})">
            <summary>
            Projects the specified collection to an array.
            </summary>
        </member>
        <member name="M:Uno.UI.Extensions.ThicknessExtensions.IsUniform(Windows.UI.Xaml.Thickness)">
            <summary>
            Is this <see cref="T:Windows.UI.Xaml.Thickness"/> uniform (all sides are equal)?
            </summary>
        </member>
        <member name="M:Uno.UI.Extensions.TimeSpanExtensions.RoundToPreviousMinuteInterval(System.TimeSpan,System.Int32)">
            <summary>
            Round timespan to previous minute interval
            input time seconds are ignored
            </summary>
            <param name="interval">minute interval</param>
            <returns>Rounded timespan</returns>
        </member>
        <member name="M:Uno.UI.Extensions.TimeSpanExtensions.RoundToNextMinuteInterval(System.TimeSpan,System.Int32)">
            <summary>
            Round timespan to next minute interval
            input time seconds are ignored
            </summary>
            <param name="interval">minute interval</param>
            <returns>Rounded timespan</returns>
        </member>
        <member name="M:Uno.UI.Extensions.TimeSpanExtensions.RoundToMinuteInterval(System.TimeSpan,System.Int32)">
            <summary>
            Round timespan to minute interval
            input time seconds are ignored
            </summary>
            <param name="interval">minute interval</param>
            <returns>Rounded timespan</returns>
        </member>
        <member name="M:Uno.UI.Extensions.TimeSpanExtensions.NormalizeToDay(System.TimeSpan)">
            <summary>
            Normalize TimeSpan between 0 and 24h inclusive
            </summary>
            <returns>Normalized TimeSpan</returns>
        </member>
        <member name="M:Uno.UI.Extensions.UIElementExtensions.GetDebugName(System.Object)">
            <summary>
            Get a display name for the element for debug purposes
            </summary>
        </member>
        <member name="M:Uno.UI.Extensions.ViewExtensions.GetVisualAncestry(Android.Views.ViewGroup)">
            <summary>
            Get all ancestor views of <paramref name="view"/>, in order from its immediate parent to the root of the visual tree.
            </summary>
        </member>
        <member name="M:Uno.UI.Extensions.PermissionsHelper.TryGetPermission(System.Threading.CancellationToken,System.String)">
            <summary>
            Validate if a given permission was granted to the app and if not, request it to the user.
            <remarks>
            This operation is not cancellable.
            This should not be invoked directly from the application code.
            You should use the extension methods in <see cref="!:PermissionsServiceExtensions"/>.
            </remarks>
            </summary>
            <param name="ct">Cancellation Token</param>
            <param name="permissionIdentifier">A permission identifier defined in Manifest.Permission.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation</returns>
        </member>
        <member name="M:Uno.UI.Extensions.PermissionsHelper.CheckPermission(System.Threading.CancellationToken,System.String)">
            <summary>
            Validate if a given permission was granted to the app but not request it to the user
            <remarks>
            This should not be invoked directly from the application code.
            You should use the extension methods in <see cref="!:PermissionsServiceExtensions"/>.
            </remarks>
            </summary>
            <param name="ct">Cancellation Token</param>
            <param name="permissionIdentifier">A permission identifier defined in Manifest.Permission.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation</returns>
        </member>
        <member name="M:Uno.UI.Extensions.RecyclerExtensions.GetViewForPosition(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Wrapper of <see cref="M:AndroidX.RecyclerView.Widget.RecyclerView.Recycler.GetViewForPosition(System.Int32)"/> that duplicates bounds checking in managed code, for easier error handling.
            </summary>
        </member>
        <member name="T:Uno.UI.StoryboardExtensions">
            <summary>
            Extension methods for classes in the Windows.UI.Xaml.Media.Animation namespace.
            </summary>
        </member>
        <member name="M:Uno.UI.StoryboardExtensions.Run(Windows.UI.Xaml.Media.Animation.Storyboard)">
            <summary>
            Begins a Storyboard and await for its completion
            </summary>
            <param name="storyboard">The storyboard</param>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ApiInformation.IsFailWhenNotImplemented">
            <summary>
            Determines if runtime use of not implemented members raises an exception, or logs an error message.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ApiInformation.AlwaysLogNotImplementedMessages">
            <summary>
            Determines if runtime use of not implemented members is logged only once, or at each use.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ApiInformation.NotImplementedLogLevel">
            <summary>
            The message log level used when a not implemented member is used at runtime, if <see cref="P:Uno.UI.FeatureConfiguration.ApiInformation.IsFailWhenNotImplemented"/> is false.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.AutomationPeer.UseSimpleAccessibility">
             <summary>
             Enable a mode that simplifies accessibility by automatically grouping accessible elements into top-level accessible elements. The default value is false.
             </summary>
             <remarks>
             When enabled, the accessibility name of top-level accessible elements (elements that return a non-null AutomationPeer in <see cref="!:UIElement.OnCreateAutomationPeer()"/> and/or have <see cref="!:AutomationProperties.Name" /> set to a non-empty string)
             will be an aggregate of the accessibility name of all child accessible elements.
            
             For example, if you have a <see cref="T:Windows.UI.Xaml.Controls.Button"/> that contains 3 <see cref="T:Uno.UI.FeatureConfiguration.TextBlock"/> "A" "B" "C", the accessibility name of the <see cref="T:Windows.UI.Xaml.Controls.Button"/> will be "A, B, C".
             These 3 <see cref="T:Uno.UI.FeatureConfiguration.TextBlock"/> will also be automatically excluded from accessibility focus.
            
             This greatly facilitates accessibility, as you would need to do this manually on UWP.
            
             A limitation of this strategy is that you can't nest interactive elements, as children of an accessible elements are excluded from accessibility focus.
             For example, if you put a <see cref="T:Windows.UI.Xaml.Controls.Button"/> inside another <see cref="T:Windows.UI.Xaml.Controls.Button"/>, only the parent <see cref="T:Windows.UI.Xaml.Controls.Button"/> will be focusable.
             This happens to match a limitation of iOS, which does this by default and forces developers to make elements as siblings instead of nesting them.
            
             To prevent a top-level accessible element from being accessible and make its children accessibility focusable, you can set <see cref="P:Windows.UI.Xaml.Automation.AutomationProperties.AccessibilityViewProperty"/> to <see cref="F:Windows.UI.Xaml.Automation.Peers.AccessibilityView.Raw"/>.
            
             Note: This is incompatible with the way accessibility works on UWP.
             </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ComboBox.DefaultDropDownPreferredPlacement">
            <summary>
            This defines the default value of the <see cref="P:Uno.UI.Xaml.Controls.ComboBox.DropDownPreferredPlacementProperty"/>. (cf. Remarks.)
            </summary>
            <remarks>
            As this value is read only once when initializing the dependency property,
            make sure to define it in the early stages of you application initialization,
            before any UI related initialization (like generic styles init) and even before
            referencing the ** type ** ComboBox in any way.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.CompositionTarget.RenderEventThrottle">
             <summary>
             The delay between invocations of the <see cref="E:Windows.UI.Xaml.Media.CompositionTarget.Rendering"/> event, in milliseconds.
             Lower values will increase the rate at which the event fires, at the expense of increased CPU usage.
            
             This property is only used on WebAssembly.
             </summary>
             <remarks>The <see cref="E:Windows.UI.Xaml.Media.CompositionTarget.Rendering"/> event is used by Xamarin.Forms for WebAssembly for XF animations.</remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ContentPresenter.UseImplicitContentFromTemplatedParent">
            <summary>
            Enables the implicit binding Content of a ContentPresenter to the one of the TemplatedParent
            when this one is a ContentControl.
            It means you can put a `<ContentPresenter />` directly in the ControlTemplate and it will
            be bound automatically to its TemplatedPatent's Content.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Control.UseLegacyContentAlignment">
            <summary>
            Make the default value of VerticalContentAlignment and HorizontalContentAlignment be Stretch instead of Center
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Control.UseLegacyLazyApplyTemplate">
            <summary>
            Enables the lazy materialization of <see cref="T:Windows.UI.Xaml.Controls.Control"/> template. This behavior
            is not aligned with UWP, which materializes templates immediately, making x:Name controls available
            in the constructor of a control.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Control.UseDeferredOnApplyTemplate">
            <summary>
            If the call to "OnApplyTemplate" should be deferred to mimic UWP sequence of events.
            </summary>
            <remarks>
            Will never be deferred when .ApplyTemplate() is called explicitly.
            More information there: https://github.com/unoplatform/uno/issues/3519
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.DataTemplateSelector.UseLegacyTemplateSelectorOverload">
            <summary>
            When set the false (default value), a call to `SelectTemplateCore(object, DependencyObject)`
            will be made as fallback when the `SelectTemplateCore(object)` returns null.
            When set to true, only `SelectTemplateCore(object)` is called (Uno's legacy mode).
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.DependencyObject.IsStoreHardReferenceEnabled">
            <summary>
            When set to true, the <see cref="T:Windows.UI.Xaml.DependencyObjectStore"/> will create hard references
            instead of weak references for some highly used fields, in common cases to improve the
            overall performance.
            </summary>
            <remarks>
            This feature is disabled on WebAssembly as it reveals or creates a memory corruption issue
            in the garbage collector. This can be revisited when upgrading tests to .NET 5+.
            See https://github.com/unoplatform/uno/issues/4730 for details.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Font.SymbolsFont">
            <summary>
            Defines the default font to be used when displaying symbols, such as in SymbolIcon.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Font.IgnoreTextScaleFactor">
            <summary>
            Ignores text scale factor, resulting in a font size as dictated by the control.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.FrameworkElement.AndroidUseManagedLoadedUnloaded">
            <summary>
            Controls the propagation of <see cref="E:Windows.UI.Xaml.FrameworkElement.Loaded"/> and
            <see cref="E:Windows.UI.Xaml.FrameworkElement.Unloaded"/> events through managed
            or native visual tree traversal.
            </summary>
            <remarks>
            This setting impacts significantly the loading performance of controls on Android.
            Setting it to true avoids the use of costly Java->C# interop.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.FrameworkElement.WasmUseManagedLoadedUnloaded">
            <summary>
            [WebAssembly Only] Controls the propagation of <see cref="E:Windows.UI.Xaml.FrameworkElement.Loaded"/> and
            <see cref="E:Windows.UI.Xaml.FrameworkElement.Unloaded"/> events through managed
            or native visual tree traversal.
            </summary>
            <remarks>
            This setting impacts significantly the loading performance of controls on WebAssembly.
            Setting it to true avoids the use of costly JavaScript->C# interop.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.FrameworkElement.HandleLoadUnloadExceptions">
            <summary>
            When false, skips the FrameworkElement Loading/Loaded/Unloaded exception handling. This can be
            disabled to improve application performance on WebAssembly. See See #7005 for additional details.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.FrameworkElement.UseLegacyHitTest">
            <summary>
            When true, any FrameworkElement with Background non-null will intercept pointer events. When set to false, the default, only
            certain views (Panels, Borders, and ContentPresenters) will intercept pointers if their background is non-null, while others (Control)
            will not, which is how WinUI behaves. Set to true if you have code written for earlier versions of Uno that relies upon the old behavior.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.FrameworkTemplate.IsPoolingEnabled">
            <summary>
            Determines if the pooling is enabled. If false, all requested instances are new.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.FrameworkTemplate.TimeToLive">
            <summary>
            Determines the duration for which a pooled template stays alive
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.FrameworkTemplate.HighMemoryThreshold">
            <summary>
            Defines the ratio of memory usage at which the pools starts to stop pooling elligible views, between 0 and 1
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Image.LegacyIosAlignment">
            <summary>
            Use the old way to align iOS images, using the "ContentMode".
            New way is using the Layer to better position the image according to alignments.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Interop.ForceJavascriptInterop">
            <summary>
            [WebAssembly Only] Used to control the behavior of the C#/Javascript interop. Setting this
            flag to true forces the use of the Javascript eval mode, instead of binary interop.
            This flag has no effect when running in hosted mode.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Binding.IgnoreINPCSameReferences">
            <summary>
            Determines if the binding engine should ignore identical references in binding paths.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.BindingExpression.HandleSetTargetValueExceptions">
            <summary>
            When false, skips the BindingExpression.SetTargetValue exception handling. Can be disabled to
            improve application performance on WebAssembly. See See #7005 for additional details.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Popup.UseNativePopup">
            <summary>
            Use a native popup to display the popup content. Otherwise use the <see cref="!:PopupRoot"/>.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Popup.EnableLightDismissByDefault">
            <summary>
            By default, light dismiss is disabled in UWP/WinUI unless
            <see cref="P:Windows.UI.Xaml.Controls.Primitives.Popup.IsLightDismissEnabled"/> is explicitly set to true.
            In earlier versions of Uno Platform, this property defaulted
            to true, which was an incorrect behavior. If your code depends on this
            legacy behavior, use this property to override it.
            </summary>
        </member>
        <member name="F:Uno.UI.FeatureConfiguration.ListViewBase.DefaultCacheLength">
            <summary>
            Sets the value to use for <see cref="P:Windows.UI.Xaml.Controls.ItemsStackPanel.CacheLength"/> and <see cref="P:Windows.UI.Xaml.Controls.ItemsWrapGrid.CacheLength"/> if not set
            explicitly in Xaml or code. Higher values will cache more views either side of the visible window, improving list scroll
            performance at the expense of consuming more memory and taking longer to initially load. Setting this to null will leave
            the default value at the UWP default of 4.0.
            </summary>
        </member>
        <member name="F:Uno.UI.FeatureConfiguration.NativeListViewBase.RemoveItemAnimator">
            <summary>
            Sets this value to remove item animation for <see cref="T:Uno.UI.UnoRecyclerView"/>. This prevents <see cref="T:Uno.UI.UnoRecyclerView"/>
            from crashing when pressured: Tmp detached view should be removed from RecyclerView before it can be recycled
            </summary>
        </member>
        <member name="F:Uno.UI.FeatureConfiguration.NativeListViewBase.ForceRecycleOnDrop">
            <summary>
            Indicates if a full recycling pass should be achieved on drop (re-order) on a ListView instead of a simple layout pass.
            </summary>
            <remarks>
            This flag should be kept to 'false' if you turned <see cref="F:Uno.UI.FeatureConfiguration.NativeListViewBase.RemoveItemAnimator"/> to 'false'.
            Forcing a recycling pass with ItemAnimator is known to cause a flicker of the whole list.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Page.IsPoolingEnabled">
            <summary>
            Enables reuse of <see cref="T:Uno.UI.FeatureConfiguration.Page"/> instances. Enabling can improve performance when using <see cref="T:Windows.UI.Xaml.Controls.Frame"/> navigation.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.PointerRoutedEventArgs.AllowRelativeTimeStamp">
            <summary>
            Defines if the PointerPoint.Timestamp retrieved from PointerRoutedEventArgs.GetCurrentPoint(relativeTo)
            or PointerRoutedEventArgs.GetIntermediatePoints(relativeTo) can be relative using the Android's
            "SystemClock.uptimeMillis()" or if they must be converted into an absolute scale
            (using the "elapsedRealtime()", cf. https://developer.android.com/reference/android/os/SystemClock).
            Disabling it negatively impacts the performance it requires to compute the "sleep time"
            (i.e. [real elapsed time] - [up time]) for each event (as the up time is paused when device is in deep sleep).
            By default this is `true`.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.SelectorItem.UseOverStates">
            <summary>
            <para>
            Determines if the visual states "PointerOver", "PointerOverSelected"
            are used or not. If disabled, those states will never be activated by the selector items.
            </para>
            <para>The default value is `true`.</para>
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Style.UseUWPDefaultStyles">
             <summary>
             Determines if Uno.UI should be using native styles for controls that have
             a native counterpart. (e.g. Button, Slider, ComboBox, ...)
            
             By default this is true.
             </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Style.UseUWPDefaultStylesOverride">
            <summary>
            Override the native styles usage per control type.
            </summary>
            <remarks>
            Usage: 'UseUWPDefaultStylesOverride[typeof(Frame)] = false;' will result in the native style always being the default for Frame, irrespective
            of the value of <see cref="P:Uno.UI.FeatureConfiguration.Style.UseUWPDefaultStyles"/>. This is useful when an app uses the UWP default look for most controls but the native
            appearance/comportment for a few particular controls, or vice versa.
            </remarks>
        </member>
        <member name="M:Uno.UI.FeatureConfiguration.Style.ConfigureNativeFrameNavigation">
            <summary>
            This enables native frame navigation on Android and iOS by setting related classes (<see cref="T:Windows.UI.Xaml.Controls.Frame"/>, <see cref="T:Uno.UI.FeatureConfiguration.CommandBar"/>
            and <see cref="T:Windows.UI.Xaml.Controls.AppBarButton"/>) to use their native styles.
            </summary>
        </member>
        <member name="M:Uno.UI.FeatureConfiguration.Style.SetUWPDefaultStylesOverride``1(System.Boolean)">
            <summary>
            Override the native styles useage for control type <typeparamref name="TControl"/>.
            </summary>
            <typeparam name="TControl"></typeparam>
            <param name="useUWPDefaultStyle">
            Whether instances of <typeparamref name="TControl"/> should use the UWP default style.
            If false, the native default style (if one exists) will be used.
            </param>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.TextBlock.IsMeasureCacheEnabled">
            <summary>
            [WebAssembly Only] Determines if the measure cache is enabled.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.TextBox.HideCaret">
            <summary>
            Determines if the caret is visible or not.
            </summary>
            <remarks>This feature is used to avoid screenshot comparisons false positives</remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.TextBox.UseLegacyInputScope">
            <summary>
            The legacy <see cref="P:Windows.UI.Xaml.Controls.TextBox.InputScope"/> prevents invalid input on hardware keyboard.
            This property defaults to <see langword="false"/> matching UWP, where InputScope only affects the keyboard layout,
            but doesn't do any validation.
            </summary>
            <remarks>
            This is available on Android only
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ScrollViewer.DefaultUpdatesMode">
            <summary>
            This defines the default value of the <see cref="P:Uno.UI.Xaml.Controls.ScrollViewer.UpdatesModeProperty"/>.
            For backward compatibility, you should set it to Synchronous.
            For better compatibility with Windows, you should keep the default value 'AsynchronousIdle'.
            </summary>
            <remarks>
            As this value is read only once when initializing the dependency property,
            make sure to define it in the early stages of you application initialization,
            before any UI related initialization (like generic styles init) and even before
            referencing the ** type ** ScrollViewer in any way.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ScrollViewer.DefaultAutoHideDelay">
            <summary>
            Defines the delay after which the scrollbars hide themselves when pointer is not over.<br/>
            Default is 4 sec.<br/>
            Setting this to <see cref="F:System.TimeSpan.MaxValue"/> will completely disable the auto hide feature.
            </summary>
            <remarks>This is effective only for managed scrollbars (WASM, macOS and Skia for now)</remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ScrollViewer.AndroidScrollbarFadeDelay">
            <summary>
            This value defines an optional delay to be set for native ScrollBar thumbs to disapear. The
            platform default is 300ms, which can make the thumbs appear on screenshots, changing this value
            to <see cref="F:System.TimeSpan.Zero"/> makes those disapear faster.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.ThemeAnimation.DefaultThemeAnimationDuration">
            <summary>
            Default duration for xxxThemeAnimation
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.NativeFramePresenter.AndroidUnloadInactivePages">
            <summary>
            Determines if pages in the backstack are kept in the visual tree.
            Defaults to false for performance considerations.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.UIElement.UseInvalidateMeasurePath">
            <summary>
            Call the .MeasureOverride only on element explicitly invalidating
            their measure and when the available size is changing.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.UIElement.UseInvalidateArrangePath">
            <summary>
            Call the .ArrangeOverride only on elements explicitly invalidating
            their arrange and when the final rect is changing.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.UIElement.UseLegacyClipping">
            <summary>
            [DEPRECATED]
            Not used anymore, does nothing.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.UIElement.ShowClippingBounds">
            <summary>
            Enable the visualization of clipping bounds (intended for diagnostic purposes).
            </summary>
            <remarks>
            This feature is only supported on iOS, for now.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlName">
            <summary>
            [WebAssembly Only] Enable the assignation of the "xamlname", "xuid" and "xamlautomationid" attributes on DOM elements created
            from the XAML visual tree. This enables tools such as Puppeteer to select elements
            in the DOM for automation purposes.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.UIElement.RenderToStringWithId">
            <summary>
            [WebAssembly Only] Enable UIElement.ToString() to return the element's unique ID
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.UIElement.AssignDOMXamlProperties">
             <summary>
             [WebAssembly Only] Enables the assignation of properties from the XAML visual tree as DOM attributes: Height -> "xamlheight",
             HorizontalAlignment -> "xamlhorizontalalignment" etc.
             </summary>
             <remarks>
             This should only be enabled for debug builds, but can greatly aid layout debugging.
            
             Note: for release builds of Uno, if the flag is set, attributes will be set on loading and *not* updated if
             the values change subsequently. This restriction doesn't apply to debug Uno builds.
             </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.UIElement.AlwaysClipNativeChildren">
            <summary>
            When this is set, non-UIElements will always be clipped to their bounds (<see cref="P:Android.Views.ViewGroup.ClipChildren"/> will
            always be set to true on their parent).
            </summary>
            <remarks>
            This is true by default as most native views assume that they will be clipped, and can display incorrectly otherwise.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.VisualState.ApplySettersBeforeTransition">
            <summary>
            When this is set, the <see cref="P:Windows.UI.Xaml.VisualState.Setters"/> will be applied synchronously when changing state,
            unlike UWP which waits the for the end of the <see cref="P:Windows.UI.Xaml.VisualTransition.Storyboard"/> (if any) to apply them.
            </summary>
            <remarks>This flag is for backward compatibility with old versions of uno and should not be turned on.</remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.WebView.ForceSoftwareRendering">
            <summary>
            Prevent the WebView from using hardware rendering.
            This was previously the default behavior in Uno to work around a keyboard-related visual glitch in Android 5.0 (http://stackoverflow.com/questions/27172217/android-systemui-glitches-in-lollipop), however it prevents video and 3d content from being rendered.
            </summary>
            <remarks>
            See this for more info: https://github.com/unoplatform/uno/blob/26c5cc5992cae3c8c25adf51eb77ca4b0dd34e93/src/Uno.UI/UI/Xaml/Controls/WebView/WebView.Android.cs#L251_L255
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Xaml.MaxRecursiveResolvingDepth">
            <summary>
            Maximal "BasedOn" recursive resolution depth.
            </summary>
            <remarks>
            This is a mechanism to prevent hard-to-diagnose stack overflow when a resource name is not found.
            </remarks>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.Xaml.ForceHotReloadDisabled">
            <summary>
            By default, XAML hot reload will be enabled when building in debug. Setting this flag to 'true' will force it to be disabled.
            </summary>
        </member>
        <member name="P:Uno.UI.FeatureConfiguration.AppBarButton.EnableBitmapIconTint">
            <summary>
            Gets or set whether the EnableBitmapIconTint feature is on or off.
            </summary>
            <remarks>
            This Feature will allow any <see cref="T:Windows.UI.Xaml.Controls.AppBarButton"/>
            inside a <see cref="T:Windows.UI.Xaml.Controls.CommandBar"/> to use the Foreground <see cref="T:Windows.UI.Xaml.Media.SolidColorBrush"/>
            as their tint Color.
            <para/>Default value is False.
            </remarks>
            <returns>True if this feature is on, False otherwise</returns>
        </member>
        <member name="T:Uno.UI.Helpers.FastTypeComparer">
            <summary>
            A fast type comparer for dictionaries, to avoid going through object.Equals type checking. 
            To be used along with <see cref="T:System.Collections.Hashtable"/> when <see cref="T:System.Type"/> is the key.
            </summary>
        </member>
        <member name="P:Uno.UI.Helpers.FastTypeComparer.Default">
            <summary>
            Provides a single instance
            </summary>
        </member>
        <member name="T:Uno.UI.Helpers.FrameNavigationHelper">
            <summary>
            Helper to expose useful properties and methods related to Frame-based navigation logic.
            </summary>
        </member>
        <member name="M:Uno.UI.Helpers.FrameNavigationHelper.GetCurrentEntry(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            Returns the <see cref="T:Windows.UI.Xaml.Navigation.PageStackEntry"/> for the currently displayed <see cref="T:Windows.UI.Xaml.Controls.Page"/> within the given <paramref name="frame"/>.
            </summary>
            <param name="frame">The frame used for navigation</param>
            /// <returns><see cref="T:Windows.UI.Xaml.Navigation.PageStackEntry"/></returns>
        </member>
        <member name="M:Uno.UI.Helpers.FrameNavigationHelper.GetInstance(Windows.UI.Xaml.Navigation.PageStackEntry)">
            <summary>
            Returns the actual <see cref="T:Windows.UI.Xaml.Controls.Page"/> instance of the given <paramref name="entry"/>.
            </summary>
            <param name="entry">The PageStackEntry from the Frame's BackStack.</param>
            <returns><see cref="T:Windows.UI.Xaml.Controls.Page"/></returns>
        </member>
        <member name="M:Uno.UI.Helpers.FrameNavigationHelper.CreateNavigationEventArgs(System.Object,Windows.UI.Xaml.Navigation.NavigationMode,Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo,System.Object,System.Type,System.Uri)">
            <summary>
            Creates a new instance of <see cref="T:Windows.UI.Xaml.Navigation.NavigationEventArgs"/>
            </summary>
            <param name="content"></param>
            <param name="navigationMode"></param>
            <param name="navigationTransitionInfo"></param>
            <param name="parameter"></param>
            <param name="sourcePageType"></param>
            <param name="uri"></param>
            <returns><see cref="T:Windows.UI.Xaml.Navigation.NavigationEventArgs"/></returns>
        </member>
        <member name="T:Uno.UI.Helpers.IFrameworkElementReferenceEqualityComparer">
            <summary>
            A reference equality comparer for IFrameworkElement instances.
            </summary>
            <remarks>
            This comparer should be used anywhere an IFrameworkElement is used as 
            a Key (e.g. <see cref="T:System.Collections.Generic.Dictionary`2"/>) for lookup performance.
            </remarks>
        </member>
        <member name="T:Uno.UI.Helpers.MarkupHelper">
            <summary>
            A set of Uno specific markup helpers
            </summary>
        </member>
        <member name="M:Uno.UI.Helpers.MarkupHelper.SetXUid(System.Object,System.String)">
            <summary>
            Sets the x:Uid member on a element implementing <see cref="T:Windows.UI.Xaml.IXUidProvider"/>
            </summary>
            <param name="target">The target object</param>
            <param name="uid">The new uid to set</param>
        </member>
        <member name="M:Uno.UI.Helpers.MarkupHelper.GetXUid(System.Object)">
            <summary>
            Gets the Uid defined via <see cref="M:Uno.UI.Helpers.MarkupHelper.SetXUid(System.Object,System.String)"/>
            </summary>
            <param name="target">The target object</param>
            <returns>A the x:Uid value</returns>
        </member>
        <member name="M:Uno.UI.Helpers.MarkupHelper.SetVisualStateLazy(Windows.UI.Xaml.VisualState,System.Action)">
            <summary>
            Sets a builder for markup-lazy properties in <see cref="T:Windows.UI.Xaml.VisualState"/>
            </summary>
        </member>
        <member name="M:Uno.UI.Helpers.MarkupHelper.SetVisualTransitionLazy(Windows.UI.Xaml.VisualTransition,System.Action)">
            <summary>
            Sets a builder for markup-lazy properties in <see cref="T:Windows.UI.Xaml.VisualTransition"/>
            </summary>
        </member>
        <member name="M:Uno.UI.Helpers.WinUI.MathHelpers.DoRectsIntersect(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Determines if two rectangles intersect.
            </summary>
            <param name="a">First rectangle.</param>
            <param name="b">Second rectangle.</param>
            <returns>True if rectangles intersect.</returns>
        </member>
        <member name="M:Uno.UI.Helpers.WinUI.MathHelpers.DotProduct(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Returns the Dot Product of two vectors (point structs).
            </summary>
            <param name="vecA">First vector.</param>
            <param name="vecB">Second vector.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:Uno.UI.Helpers.WinUI.MathHelpers.DoesRectContainRect(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Determines if rect "contained" is inside of "container".
            This is an inclusive comparison (a rect is contained inside itself).
            </summary>
            <param name="container">Container rect.</param>
            <param name="contained">Contained rect.</param>
            <returns>True if "container" contains "contained".</returns>
        </member>
        <member name="M:Uno.UI.Helpers.WinUI.MathHelpers.RectToPoints(Windows.Foundation.Rect)">
            <summary>
            Converts a Rect into an array of 4 points (in counter-clockwise order)
            </summary>
            <param name="rect">Rect.</param>
            <returns>Points of the rect.</returns>
        </member>
        <member name="M:Uno.UI.Helpers.WinUI.MathHelpers.DoPolygonsIntersect(Windows.Foundation.Point[],Windows.Foundation.Point[])">
            <summary>
            Does this polygon intersect the other?
            </summary>
            <param name="pPtPolyA">Polygon A.</param>
            <param name="pPtPolyB">Polygon B.</param>
            <returns>True if the polygons intersect.</returns>
            <remarks>
            For this method to work, the points in both polygons
            MUST BE wound counter-clockwise.
            </remarks>
        </member>
        <member name="M:Uno.UI.Helpers.WinUI.MathHelpers.IsEntirelyContained(Windows.Foundation.Point[],Windows.Foundation.Point[])">
            <summary>
            Is polygon A wholly contained inside polygon B?		
            Ignores the z values in polygon A.
            </summary>
            <param name="pPtPolyA">First polygon.</param>
            <param name="pPtPolyB">Second polygon.</param>
            <returns>True if polygon is entirely contained.</returns>
        </member>
        <member name="M:Uno.UI.Helpers.WinUI.MathHelpers.WhichSide(Windows.Foundation.Point[],Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Internal helper to determine which side of a given edge a set
            of points is.
            </summary>
            <param name="pPtPoly"></param>
            <param name="ptCurrent"></param>
            <param name="vecEdge"></param>
            <returns>
            -1 if all points are on the outside,
            1 if all are on the inside,
            0 if there are points on both sides.
            </returns>
        </member>
        <member name="M:Uno.UI.Helpers.WinUI.StringUtil.FormatString(System.String,System.Object[])">
            <summary>
            Format string using C++ formatted resources, used for compatibility with WinUI C++ code base.
            </summary>
            <param name="format"></param>
            <param name="parms"></param>
            <returns>A .NET formatted string</returns>
            <remarks>Do not use this method in another context.</remarks>
        </member>
        <member name="M:Uno.UI.Helpers.Xaml.ApplyExtensions.BindingApply(Windows.UI.Xaml.Data.Binding,Uno.UI.Helpers.Xaml.ApplyExtensions.BindingApplyHandler)">
            <summary>
            Executes the provided apply handler on the binding instance. Used by the XAML code generator.
            </summary>
        </member>
        <member name="M:Uno.UI.Helpers.Xaml.ApplyExtensions.GenericApply``1(``0,System.Action{``0})">
            <summary>
            Executes the provided apply handler on the specified instance. Used by the XAML code generator.
            </summary>
        </member>
        <member name="T:Uno.UI.Media.NativeRenderTransformAdapter">
            <summary>
            Adapts an UWP <see cref="P:Uno.UI.Media.NativeRenderTransformAdapter.Transform"/> used as <see cref="P:Windows.UI.Xaml.UIElement.RenderTransform"/> to a native transformation
            </summary>
        </member>
        <member name="P:Uno.UI.Media.NativeRenderTransformAdapter.Owner">
            <summary>
            The view on which this render transform has been declared
            </summary>
        </member>
        <member name="P:Uno.UI.Media.NativeRenderTransformAdapter.Transform">
            <summary>
            The render transform
            </summary>
        </member>
        <member name="P:Uno.UI.Media.NativeRenderTransformAdapter.CurrentOrigin">
            <summary>
            The current relative origin of this render transform.
            </summary>
        </member>
        <member name="P:Uno.UI.Media.NativeRenderTransformAdapter.CurrentSize">
            <summary>
            The current size of this render transform
            </summary>
        </member>
        <member name="M:Uno.UI.Media.NativeRenderTransformAdapter.Apply(System.Boolean,System.Boolean)">
            <summary>
            Natively applies this current render transform to its <see cref="P:Uno.UI.Media.NativeRenderTransformAdapter.Owner"/>
            </summary>
        </member>
        <member name="M:Uno.UI.Media.NativeRenderTransformAdapter.Cleanup">
            <summary>
            Natively cleanup this current render transform from its <see cref="P:Uno.UI.Media.NativeRenderTransformAdapter.Owner"/> before being removed.
            </summary>
        </member>
        <member name="M:Uno.UI.Media.NativeRenderTransformAdapter.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Uno.UI.Media.NativeRenderTransformAdapter.Matrix">
            <summary>
            Gets the native transform that can be applied by the parent ViewGroup for the given child view
            </summary>
        </member>
        <member name="T:Uno.UI.RuntimeTypeMetadataUpdateHandler">
            <summary>
            Metadata update handler used to reset caches when changes are applied
            by the hot reload engine.
            </summary>
        </member>
        <member name="T:Uno.UI.Converters.NullConverter">
            <summary>
            A converter which always return null.
            </summary>
        </member>
        <member name="T:Uno.UI.Converters.UnoNativeDefaultProgressBarReverseBoolConverter">
            <summary>
            Do not use outside of Uno
            </summary>
        </member>
        <member name="M:Uno.UI.LayoutHelper.ApplySizeConstraints(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size)">
            <summary>
            Apply min/max and defined sized on control to an available size
            </summary>
            <returns>Available size after applying min/max</returns>
        </member>
        <member name="M:Uno.UI.LayoutHelper.ApplySizeConstraints(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,Windows.Foundation.Size)">
            <summary>
            Apply min/max and defined sized on control to an available size
            </summary>
            <returns>Available size after applying min/max</returns>
        </member>
        <member name="M:Uno.UI.LayoutHelper.Multiply(Windows.Foundation.Size,System.Double)">
            <summary>
            a.k.a. Scale
            </summary>
        </member>
        <member name="M:Uno.UI.LayoutHelper.IntersectWith(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Return overlapped zone, if any
            </summary>
            <returns>null means no overlap</returns>
        </member>
        <member name="M:Uno.UI.LayoutHelper.IsEnclosedBy(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Test if a Rect "fits" totally in another one.
            </summary>
        </member>
        <member name="M:Uno.UI.LayoutHelper.GetBoundsRectRelativeTo(Android.Views.View,Android.Views.View)">
            <summary>
            Get relative bounds for native views.
            </summary>
            <remarks>This should only be used for non-FrameworkElements, prefer the more accurate overload that takes <see cref="T:Windows.UI.Xaml.FrameworkElement"/>s where possible.</remarks>
        </member>
        <member name="P:Uno.UI.ApplicationHelper.RequestedCustomTheme">
            <summary>
            This is a custom theme that can be used in ThemeDictionaries
            </summary>
            <remarks>
            When the custom theme key is not found in a theme dictionary, it will fallback to
            Application.RequestedTheme (Dark/Light)
            </remarks>
        </member>
        <member name="M:Uno.UI.ApplicationHelper.ReapplyApplicationTheme">
            <summary>
            Force all {ThemeResource} declarations to reevaluate its bindings.
            </summary>
            <remarks>
            This could be useful if you manually changed the bound values in global
            themed dictionary and you want to reapply them without having to toggle
            dark/light and producing annoying flickering to user.
            
            Only applications with dynamic color schemes should use this.
            </remarks>
        </member>
        <member name="T:Uno.UI.Xaml.Controls.DropDownPlacement">
            <summary>
            Defines how a <see cref="T:Windows.UI.Xaml.Controls.ComboBox"/> tries to place it drop down.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Controls.DropDownPlacement.Auto">
            <summary>
            When opening the "drop down" the ComboBox tries to keep the selected item over the closed combo box.
            That means that if the selected is the last one of the list, the "drop down" will appear above.
            If there isn't any selected item, the "drop down" will appear centered over the combo box.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Controls.DropDownPlacement.Above">
            <summary>
            Always try to render the drop down above the combo
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Controls.DropDownPlacement.Below">
            <summary>
            Always try to render the drop down below the combo
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Controls.DropDownPlacement.Centered">
            <summary>
            Always try to render the drop down center over the combo
            </summary>
        </member>
        <member name="T:Uno.UI.Xaml.Controls.ComboBox">
            <summary>
            The configurations of the <see cref="T:Windows.UI.Xaml.Controls.ComboBox"/> specific to the Uno platform.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Controls.ComboBox.DropDownPreferredPlacementProperty">
            <summary>
            Backing property for the <see cref="T:Uno.UI.Xaml.Controls.DropDownPlacement"/> of a ComboBox. (cf. Remarks.)
            </summary>
            <remarks>
            This is only the preferred placement, the combo will still ensure to keep its drop down in the visual bounds of the window
            (When content cannot be rendered out of the current window ...)
            </remarks>
        </member>
        <member name="M:Uno.UI.Xaml.Controls.ComboBox.SetDropDownPreferredPlacement(Windows.UI.Xaml.Controls.ComboBox,Uno.UI.Xaml.Controls.DropDownPlacement)">
            <summary>
            Sets the preferred <see cref="T:Uno.UI.Xaml.Controls.DropDownPlacement"/> of a ComboBox. (cf. Remarks)
            </summary>
            <remarks>
            This is only the preferred placement, the combo will still ensure to keep its drop down in the visual bounds of the window
            (When content cannot be rendered out of the current window ...)
            </remarks>
            <param name="combo">The target ComboBox to configure</param>
            <param name="mode">The updates mode to set</param>
        </member>
        <member name="M:Uno.UI.Xaml.Controls.ComboBox.GetDropDownPreferredPlacement(Windows.UI.Xaml.Controls.ComboBox)">
            <summary>
            Gets the <see cref="T:Uno.UI.Xaml.Controls.DropDownPlacement"/> of a ComboBox. (cf. Remarks)
            </summary>
            <remarks>
            This is only the preferred placement, the combo will still ensure to keep its drop down in the visual bounds of the window
            (When content cannot be rendered out of the current window ...)
            </remarks>
            <param name="combo">The target ComboBox</param>
            <returns>The updates mode of the <paramref name="combo"/>.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Controls.SystemFocusVisual.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Uno.UI.Xaml.Controls.ScrollViewerUpdatesMode">
            <summary>
            Enumeration of the possible updates modes of a <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/>.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Controls.ScrollViewerUpdatesMode.Synchronous">
            <summary>
            The ViewChanged event is raised and the VerticalOffset and HorizontalOffset are updated
            as soon as the native scroll presenter notifies an update.
            </summary>
            <remarks>This mode is required to support advance scrolling feature like parallax effect.</remarks>
        </member>
        <member name="F:Uno.UI.Xaml.Controls.ScrollViewerUpdatesMode.AsynchronousIdle">
            <summary>
            The raise of ViewChanged event and the VerticalOffset and HorizontalOffset updates are
            queued and dispatcher one idle dispatcher. Some updates may be dropped if the dispatcher is busy,
            but the last update will always be notified synchronously.
            </summary>
            <remarks>This mode is the closest to the windows behavior.</remarks>
        </member>
        <member name="T:Uno.UI.Xaml.Controls.ScrollViewer">
            <summary>
            The configurations of the <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> specific to the Uno platform.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Controls.ScrollViewer.UpdatesModeProperty">
            <summary>
            Backing property for the <see cref="T:Uno.UI.Xaml.Controls.ScrollViewerUpdatesMode"/> of a ScrollViewer.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Controls.ScrollViewer.SetUpdatesMode(Windows.UI.Xaml.Controls.ScrollViewer,Uno.UI.Xaml.Controls.ScrollViewerUpdatesMode)">
            <summary>
            Sets the <see cref="T:Uno.UI.Xaml.Controls.ScrollViewerUpdatesMode"/> of a ScrollViewer.
            </summary>
            <param name="scrollViewer">The target ScrollViewer to configure</param>
            <param name="mode">The updates mode to set</param>
        </member>
        <member name="M:Uno.UI.Xaml.Controls.ScrollViewer.GetUpdatesMode(Windows.UI.Xaml.Controls.ScrollViewer)">
            <summary>
            Gets the <see cref="T:Uno.UI.Xaml.Controls.ScrollViewerUpdatesMode"/> of a ScrollViewer.
            </summary>
            <param name="scrollViewer">The target ScrollViewer</param>
            <returns>The updates mode of the <paramref name="scrollViewer"/>.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Controls.ScrollViewer.GetShouldFallBackToNativeScrollBars(Windows.UI.Xaml.Controls.ScrollViewer)">
            <summary>
            Getter for ShouldFallBackToNativeScrollBars attached property. If true, and no <see cref="!:Windows.UI.Xaml.Primitives.ScrollBar"/> is
            found in <paramref name="scrollViewer"/>'s template, then native scroll bars (for platforms where available) will be shown instead.
            If false, no scroll bars will be shown. True by default, for backward-compatibility.
            </summary>
            <param name="scrollViewer"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.Xaml.Controls.ScrollViewer.SetShouldFallBackToNativeScrollBars(Windows.UI.Xaml.Controls.ScrollViewer,System.Boolean)">
            <summary>
            Setter for ShouldFallBackToNativeScrollBars attached property. If true, and no <see cref="!:Windows.UI.Xaml.Primitives.ScrollBar"/> is
            found in <paramref name="scrollViewer"/>'s template, then native scroll bars (for platforms where available) will be shown instead.
            If false, no scroll bars will be shown. True by default, for backward-compatibility.
            </summary>
        </member>
        <member name="T:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute">
            <summary>
            Attribute to control the automatic generation of dependency property generation
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute.Options">
            <summary>
            The set of <see cref="T:Windows.UI.Xaml.FrameworkPropertyMetadataOptions"/> options for the property
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute.DefaultValue">
            <summary>
            The DefaultValue to use for the property
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute.CoerceCallback">
            <summary>
            Declares that the property must define a <see cref="T:Windows.UI.Xaml.CoerceValueCallback"/>.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute.ChangedCallback">
            <summary>
            Declares that the property must define a <see cref="T:Windows.UI.Xaml.PropertyChangedCallback"/>.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute.LocalCache">
            <summary>
            Declares that the property uses a local cache of the dependency property.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute.Attached">
            <summary>
            Declares that the dependency property is attached
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute.AttachedBackingFieldOwner">
            <summary>
            Declares that the dependency property is attached
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.GeneratedDependencyPropertyAttribute.ChangedCallbackName">
            <summary>
            Declares an optional PropertyChanged callback name
            </summary>
        </member>
        <member name="T:Uno.UI.Xaml.Input.FocusMovement">
            <summary>
            Stores state information about a focus movement operation.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.Target">
            <summary>
            Gets the focus target.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.FocusState">
            <summary>
            Gets the focus state.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.Direction">
            <summary>
            Gets the focus navigation direction.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.XYFocusOptions">
            <summary>
            Gets the XY focus options.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.CorrelationId">
            <summary>
            Gets or sets the correlation ID.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.ForceBringIntoView">
            <summary>
            Gets or sets a value indicating whether we force bring the target to view.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.AnimateIfBringIntoView">
            <summary>
            Gets or sets a value indicating whether bringing the target into view should be animated.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.IsProcessingTab">
            <summary>
            Gets or sets a value indicating whether tab key press is being processed.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.IsShiftPressed">
            <summary>
            Gets or sets a value indicating whether shift key is pressed.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.CanCancel">
            <summary>
            Gets or sets a value indicating whether the operation can be canceled.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.CanDepartFocus">
            <summary>
            Gets or sets a value indicating whether the focus can depart.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.CanNavigateFocus">
            <summary>
            Gets or sets a value indicating whether focus can be navigated.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.RaiseGettingLosingEvents">
            <summary>
            Gets or sets a value indicating whether the getting/losing focus events should be raised.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.FocusMovement.ShouldCompleteAsyncOperation">
            <summary>
            Gets or sets a value indicating whether the async operation should be completed.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Input.FocusProperties.IsFocusable(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Determine if a particular DependencyObject cares to take focus.
            </summary>
            <param name="dependencyObject">Input.</param>
            <returns>A value indicating whether focus is allowed.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Input.FocusProperties.GetCaretBrowsingModeEnable">
            <summary>
            Caret browsing mode is a Windows-specific accessibility feature.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Input.FocusProperties.CanHaveFocusableChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns true if there is a focusable child.
            </summary>
            <param name="parent">Parent.</param>
            <returns>True if there is a focusable child.</returns>
        </member>
        <member name="T:Uno.UI.Xaml.Input.FocusRectManager">
            <summary>
            This handles "Focus Visuals" on WinUI.	
            </summary>
            <remarks>
            Our implementation is fairly limited currently, mostly stubs.
            </remarks>
        </member>
        <member name="T:Uno.UI.Xaml.Input.IHandleableRoutedEventArgs">
            <summary>
            Represents Routed event args which can be handled while bubbling/tunneling.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Input.IHandleableRoutedEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled.
            A true value for Handled prevents most handlers along the event
            route from handling the same event again.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Input.XYFocusAlgorithmHelper.CalculatePrimaryAxisDistance(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Calculates the distance between bounds on primary axis based on a given navigation direction.
            </summary>
            <param name="direction">Navigation direction.</param>
            <param name="bounds">Bounds.</param>
            <param name="candidateBounds">Candidate bounds.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Input.XYFocusAlgorithmHelper.CalculateSecondaryAxisDistance(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Calculates the distance between bounds on secondary axis based on a given navigation direction.
            </summary>
            <param name="direction">Navigation direction.</param>
            <param name="bounds">Bounds.</param>
            <param name="candidateBounds">Candidate bounds.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Input.XYFocusAlgorithmHelper.CalculatePercentInShadow(System.ValueTuple{System.Double,System.Double},System.ValueTuple{System.Double,System.Double})">
            <summary>
            Calculates the percentage of the potential element that is in the shadow of the reference element.
            </summary>
            <param name="referenceManifold">Reference manifold.</param>
            <param name="potentialManifold">Potential manifold.</param>
            <returns>Percentage.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Input.XYFocusAlgorithmHelper.IsLeft(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Checks if the navigation direciton is left.
            </summary>
            <param name="direction">Direction.</param>
            <returns>Ture if left.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Input.XYFocusAlgorithmHelper.IsRight(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Checks if the navigation direciton is right.
            </summary>
            <param name="direction">Direction.</param>
            <returns>Ture if right.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Input.XYFocusAlgorithmHelper.IsUp(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Checks if the navigation direciton is up.
            </summary>
            <param name="direction">Direction.</param>
            <returns>Ture if up.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Input.XYFocusAlgorithmHelper.IsDown(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Checks if the navigation direciton is down.
            </summary>
            <param name="direction">Direction.</param>
            <returns>Ture if down.</returns>
        </member>
        <member name="T:Uno.UI.Xaml.Core.ContentRoot">
            <summary>
            Represents the content root of an application window.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Core.ContentRoot.#ctor(Uno.UI.Xaml.Core.ContentRootType,Windows.UI.Color,Windows.UI.Xaml.UIElement,Uno.UI.Xaml.Core.CoreServices)">
            <summary>
            Initializes a content root.
            </summary>
            <param name="rootElement">Root element.</param>
        </member>
        <member name="P:Uno.UI.Xaml.Core.ContentRoot.VisualTree">
            <summary>
            Represents the visual tree associated with this content root.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.ContentRoot.FocusManager">
            <summary>
            Represents the focus manager associated with this content root.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.ContentRoot.InputManager">
            <summary>
            Represents the input manager associated with this content root.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.ContentRoot.FocusAdapter">
            <summary>
            Represents focus adapter.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.ContentRoot.AccessKeyExport">
            <summary>
            Access key export.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.CoreServices.ContentRootCoordinator">
            <summary>
            Provides the content root coordinator.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.CoreServices.InitializationType">
            <summary>
            Initialization type.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.ElementSoundPlayerService.Instance">
            <summary>
            Gets the default instance of ElementSoundPlayerService.
            </summary>
            <remarks>
            While WinUI stores instance using CoreServices, we use singleton
            for simplification.
            </remarks>
        </member>
        <member name="M:Uno.UI.Xaml.Core.FullWindowMediaRoot.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Uno.UI.Xaml.Core.InitializationType.Normal">
            <summary>
            This initialization type  is used when
            none of the other explict types
            make sense. In a practical sense this is
            for initialization of non-main view in
            foreground apps.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Core.InitializationType.MainView">
            <summary>
            This initialization type is used when
            the initialization is for main view in
            the foreground app.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Core.InitializationType.Xbf">
            <summary>
            This initialization type is used when
            the initialization is for xbf.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Core.InitializationType.BackgroundTask">
            <summary>
            This initialization type is used when
             the initialization is for background tasks.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Core.InitializationType.IslandsOnly">
            <summary>
            Xaml core is started only to host islands (StartOnCurrentThread API).
            This is also the mode used by WinUI Desktop apps.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Core.InitializationType.FromIdle">
            <summary>
            This Initialization type is used when
            we shutdown the core in between test runs
            and we need to get the core back to an
            initialized state from an idle state
            </summary>
        </member>
        <member name="T:Uno.UI.Xaml.Core.RootVisual">
            <summary>
            This class is the type of the invisible root of the tree.
            This differs from Canvas in the way it arranges its children - it
            ensures that all the children are arranged with the plugin size.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.RootVisual.AssociatedVisualTree">
            <summary>
            Gets or sets the Visual Tree.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Core.RootVisual.SetBackgroundColor(Windows.UI.Color)">
            <summary>
            Updates the color of the background brush.
            </summary>
            <param name="backgroundColor">Background color.</param>
        </member>
        <member name="M:Uno.UI.Xaml.Core.RootVisual.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Overriding virtual to add specific logic to measure pass.
            This behavior is the same as that of the Canvas.
            </summary>
            <param name="availableSize">Available size.</param>
            <returns>Desired size.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Core.RootVisual.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Overriding CFrameworkElement virtual to add specific logic to arrange pass.
            The root visual always arranges the children with the finalSize. This ensures that
            children of the root visual are always arranged at the plugin size.
            </summary>
            <param name="finalSize">Final arranged size.</param>
            <returns>Final size.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Core.RootVisual.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Core.RootVisual.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Uno.UI.Xaml.Core.TextCore.IsTextControl(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Determines whether a given dependency object is a text control.
            </summary>
            <param name="dependencyObject">Dependency object.</param>
            <returns>Ture if the object is a text control.</returns>
        </member>
        <member name="T:Uno.UI.Xaml.Core.VisualTree">
            <summary>
            Contains a single visual tree and is the primary interface
            for other components to interact with the tree.
            </summary>
            <remarks>
            Uno Platform implementation is mostly a stub for now, needs to be expanded upon.
            </remarks>
        </member>
        <member name="F:Uno.UI.Xaml.Core.VisualTree.LookupOptions.NoFallback">
            <summary>
            Normal lookup.
            </summary>
        </member>
        <member name="F:Uno.UI.Xaml.Core.VisualTree.LookupOptions.WarningIfNotFound">
            <summary>
            Provides warning if not found.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Core.VisualTree.#ctor(Uno.UI.Xaml.Core.CoreServices,Windows.UI.Color,Windows.UI.Xaml.UIElement,Uno.UI.Xaml.Core.ContentRoot)">
            <summary>
            Initializes a Visual tree.
            </summary>
            <param name="rootElement">Root element.</param>
            <param name="contentRoot">Content root.</param>
            <remarks>
            Our implementation is currently simplified whereas WinUI can create the root element
            if not passed in.
            </remarks>
        </member>
        <member name="P:Uno.UI.Xaml.Core.VisualTree.RootElement">
            <summary>
            RootElement is the parent of the roots. For XAML app window content, this is the RootVisual.
            For XamlIsland content, it's the XamlIslandRoot.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.Core.VisualTree.ActiveRootVisual">
            <summary>
            Gets the currently active root visual - can be either public root visual or full-window
            media root if it is currently active.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Core.VisualTree.EnsurePopupRoot">
            <summary>
            Replace the existing popup root (if any) with the provided one.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Core.VisualTree.GetPopupRootForElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Static helper function that encapsulates getting the PopupRoot
            that is associated with the provided object. If the object is not
            contained within a VisualTree's tree then this method checks if
            the object is a Popup, or if the root of its visual tree is the
            logical child of a Popup. If so, it gets the PopupRoot associated
            with that Popup. Otherwise, this method falls back to returning
            the PopupRoot of the core's main VisuaTree.
            </summary>
            <param name="dependencyObject">Dependency object.</param>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.Xaml.Core.VisualTree.GetRootForElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Static helper function that encapsulates walking up the tree
            to get the RootVisual. This function returns null if walking
            up the parent chain does not reach a RootVisual.
            </summary>
            <param name="pObject">Element.</param>
            <returns>Root visual or null.</returns>
        </member>
        <member name="M:Uno.UI.Xaml.Core.VisualTree.GetFocusManagerForElement(Windows.UI.Xaml.DependencyObject,Uno.UI.Xaml.Core.VisualTree.LookupOptions)">
            <summary>
            Static helper function that encapsulates getting the FocusManager
            that is associated with the VisualTree containing the provided
            object.  If the object is not contained within a VisualTree's tree
            then this method falls back to returning the FocusManager
            associated with the core's main VisualTree.
            </summary>
            <param name="dependencyObject">Dependency object.</param>
            <param name="options">Lookup options</param>
        </member>
        <member name="M:Uno.UI.Xaml.Core.VisualTree.AddRoot(Windows.UI.Xaml.UIElement)">
            <summary>
            Adds the given root to the implicit root visual, and potentially 'Enter' it into
            the tree.
            </summary>
            <param name="root"></param>
            <remarks>
            A root is entered into the tree if we can retrieve a namescope owner for it
            using GetNamescopeOwnerForRoot.
            A precondition of this function is that the root being entered is already set
            in its corresponding member variable (e.g. _popupRoot, _publicRootVisual, etc.)
            </remarks>
        </member>
        <member name="M:Uno.UI.Xaml.Core.VisualTree.RemoveRoot(Windows.UI.Xaml.UIElement)">
            <summary>
            Removes the given root from the implicit root visual, and potentially 'Leave' it
            from the tree.
            </summary>
            <param name="root">Root to remove.</param>
            <remarks>
            A root leaves the tree if we can retrieve a namescope owner for it
            using GetNamescopeOwnerForRoot.
            A precondition of this function is that the root being entered is already set
            in its corresponding member variable (e.g. m_popupRoot, m_publicRootVisual, etc.) 
            </remarks>
        </member>
        <member name="T:Uno.UI.Xaml.WeakResourceInitializer">
            <summary>
            The WeakResourceInitializer is responsible for creating resources with a WeakReference to the owner of the resource.
            </summary>
            <remarks>
            This class is used by the XAML source generator to propagate the top-level owner
            of the resources in order for code-behind references such as events can be resolved
            properly.
            </remarks>
        </member>
        <member name="M:Uno.UI.Xaml.XamlFilePathHelper.ResolveAbsoluteSource(System.String,System.String)">
            <summary>
            Convert relative source path to absolute path.
            </summary>
        </member>
        <member name="T:Uno.UI.Xaml.XamlInfo">
            <summary>
            Defines the Xaml owner of a visual tree, used to determine the target of Xaml-defined events.
            </summary>
        </member>
        <member name="P:Uno.UI.Xaml.XamlInfo.Owner">
            <summary>
            Gets the top-level owner of the treem when defined from a xaml file
            </summary>
        </member>
        <member name="T:Uno.UI.Xaml.XamlParseContext">
            <summary>
            Provides additional information on the context in which Xaml is being parsed by Uno.
            </summary>
        </member>
        <member name="M:Uno.UI.Xaml.Media.RealtimeBlurView.DrawBlurredBitmap(Android.Graphics.Canvas,Android.Graphics.Bitmap,System.Int32)">
            **
        </member>
        <member name="M:Uno.UI.Xaml.Media.RealtimeBlurView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Uno.UI.FrameworkElementHelper">
            <summary>
            A set of uno.ui-specific helpers for Xaml
            </summary>
        </member>
        <member name="F:Uno.UI.FrameworkElementHelper._contextAssociation">
            <summary>
            Conditional table used in the context of Control and DataTemplates
            to link the lifetime generated XAML classes that hold x:Name backing
            fields to the top level UIElement of the template. This allows for
            ElementNameSubject and TargetProperty path to only keep weak references
            to their targets.
            </summary>
        </member>
        <member name="M:Uno.UI.FrameworkElementHelper.SetRenderPhase(Windows.UI.Xaml.FrameworkElement,System.Int32)">
            <summary>
            Set the rendering phase, defined via x:Phase.
            </summary>
            <param name="target">The target <see cref="T:Windows.UI.Xaml.FrameworkElement"/></param>
            <param name="phase">The render phase ID</param>
        </member>
        <member name="M:Uno.UI.FrameworkElementHelper.SetDataTemplateRenderPhases(Windows.UI.Xaml.FrameworkElement,System.Int32[])">
            <summary>
            Sets the x:Phases defined by all the children controls. The control must be the root element of a DataTemplate.
            </summary>
            <param name="target">The target <see cref="T:Windows.UI.Xaml.FrameworkElement"/></param>
            <param name="declaredPhases">A set of phases used by the children controls.</param>
        </member>
        <member name="P:Uno.UI.FrameworkElementHelper.IsUiAutomationMappingEnabled">
            <summary>
            When true (normally because the IsUiAutomationMappingEnabled build property is set), setting the <see cref="!:Name"/> property
            programmatically will also set the appropriate test identifier for Android/iOS. Disabled by default because it may interfere
            with accessibility features in non-testing scenarios.
            On WebAssembly, settings this property also enables the ability for <see cref="P:Windows.UI.Xaml.Automation.AutomationProperties.AutomationIdProperty"/>
            to be applied to the visual tree elements.
            </summary>
        </member>
        <member name="M:Uno.UI.FrameworkElementHelper.AddObjectReference(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Associates an arbitrary object to the life time of the <paramref name="target"/> instance.
            </summary>
            <remarks>
            This method is used by the XAML generator to keep x:Name generated
            code alive alonside the top-level control of thete.
            </remarks>
        </member>
        <member name="M:Uno.UI.FrameworkElementHelper.SetUseMeasurePathDisabled(Windows.UI.Xaml.UIElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This is the equivalent of <see cref="P:Uno.UI.FeatureConfiguration.UIElement.UseInvalidateMeasurePath"/>
            but just for a specific element (and its descendants) in the visual tree.
            </summary>
            <remarks>
            This will have no effect if <see cref="P:Uno.UI.FeatureConfiguration.UIElement.UseInvalidateMeasurePath"/>
            is set to false.
            </remarks>
        </member>
        <member name="M:Uno.UI.FrameworkElementHelper.SetUseArrangePathDisabled(Windows.UI.Xaml.UIElement,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This is the equivalent of <see cref="P:Uno.UI.FeatureConfiguration.UIElement.UseInvalidateArrangePath"/>
            but just for a specific element (and its descendants) in the visual tree.
            </summary>
            <remarks>
            This will have no effect if <see cref="P:Uno.UI.FeatureConfiguration.UIElement.UseInvalidateArrangePath"/>
            is set to false.
            </remarks>
        </member>
        <member name="T:Uno.UI.IXamlLazyResourceInitializer">
            <summary>
            Provides initialization logic for resources defined in a ResourceDictionary.
            </summary>
            <remarks> Normally only implemented and referenced by Xaml-generated code.</remarks>
        </member>
        <member name="T:Uno.UI.IXamlResourceDictionaryProvider">
            <summary>
            Provides lazy initialization for a resource dictionary.
            </summary>
            <remarks> Normally only implemented and referenced by Xaml-generated code.</remarks>
        </member>
        <member name="P:Uno.UI.ResourceResolver.MasterDictionary">
            <summary>
            The master system resources dictionary.
            </summary>
        </member>
        <member name="F:Uno.UI.ResourceResolver._registeredDictionariesByFilepath">
            <summary>
            This is used by hot reload (since converting the file path to a Source is impractical at runtime).
            </summary>
        </member>
        <member name="P:Uno.UI.ResourceResolver.CurrentScope">
            <summary>
            The current xaml scope for resource resolution.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.ResolveResourceStatic``1(System.Object,System.Object)">
            <summary>
            Performs a one-time, typed resolution of a named resource, using Application.Resources.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.ResolveResourceStatic(System.Object,System.Type,System.Object)">
            <summary>
            Performs a one-time, typed resolution of a named resource, using Application.Resources.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.ResolveResourceStatic(System.Object,System.Object@,System.Object)">
            <summary>
            Performs a one-time resolution of a named resource, using Application.Resources.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.ResolveTopLevelResourceDouble(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey,System.Double)">
            <summary>
            Retrieve a resource from top-level resources (Application-level and system level).
            </summary>
            <typeparam name="T">The expected resource type</typeparam>
            <param name="key">The resource key to search for</param>
            <param name="fallbackValue">Fallback value to use if no resource is found</param>
            <returns>The resource, is one of the given key and type is found, else <paramref name="fallbackValue"/></returns>
            <remarks>
            Use <see cref="!:ResolveTopLevelResource&lt;T&gt;(object, T)"/> when user-defined Application-level values should be considered (most
            of the time), use <see cref="M:Uno.UI.ResourceResolver.GetSystemResource``1(System.Object)"/> if they shouldn't
            </remarks>
        </member>
        <member name="M:Uno.UI.ResourceResolver.ResolveTopLevelResource(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey,System.Object)">
            <summary>
            Retrieve a resource from top-level resources (Application-level and system level).
            </summary>
            <typeparam name="T">The expected resource type</typeparam>
            <param name="key">The resource key to search for</param>
            <param name="fallbackValue">Fallback value to use if no resource is found</param>
            <returns>The resource, is one of the given key and type is found, else <paramref name="fallbackValue"/></returns>
            <remarks>
            Use <see cref="!:ResolveTopLevelResource&lt;T&gt;(object, T)"/> when user-defined Application-level values should be considered (most
            of the time), use <see cref="M:Uno.UI.ResourceResolver.GetSystemResource``1(System.Object)"/> if they shouldn't
            </remarks>
        </member>
        <member name="M:Uno.UI.ResourceResolver.ApplyResource(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,System.Object,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Apply a StaticResource or ThemeResource assignment to a DependencyProperty of a DependencyObject. The assignment will be provisionally
            made immediately using Application.Resources if possible, and retried at load-time using the visual-tree scope.
            </summary>
            <param name="owner">Owner of the property</param>
            <param name="property">The property to assign</param>
            <param name="resourceKey">Key to the resource</param>
            <param name="isThemeResourceExtension">True for {ThemeResource Foo}, false for {StaticResource Foo}</param>
            <param name="context">Optional parameter that provides parse-time context</param>
        </member>
        <member name="M:Uno.UI.ResourceResolver.ApplyVisualStateSetter(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey,System.Object,Uno.UI.DataBinding.BindingPath,Windows.UI.Xaml.DependencyPropertyValuePrecedences,Windows.UI.Xaml.Data.ResourceUpdateReason)">
            <summary>
            Apply a <see cref="T:Windows.UI.Xaml.Setter"/> in a visual state whose value is theme-bound.
            </summary>
            <param name="resourceKey">Key to the resource</param>
            <param name="context">Optional parameter that provides parse-time context</param>
            <param name="bindingPath">The binding path defined by the Setter target</param>
            <param name="precedence">Value precedence</param>
            <returns>
            True if the value was successfully applied and registered for theme updates, false if no theme resource was found or the target
            property is not a <see cref="T:Windows.UI.Xaml.DependencyProperty"/>.
            </returns>
        </member>
        <member name="M:Uno.UI.ResourceResolver.TryStaticRetrieval(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey@,System.Object,System.Object@)">
            <summary>
            Try to retrieve a resource statically (at parse time). This will check resources in 'xaml scope' first, then top-level resources.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.TryTopLevelRetrieval(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey@,System.Object,System.Object@)">
            <summary>
            Tries to retrieve a resource from top-level resources (Application-level and system level).
            </summary>
            <param name="resourceKey">The resource key</param>
            <param name="value">Out parameter to which the retrieved resource is assigned.</param>
            <returns>True if the resource was found, false if not.</returns>
        </member>
        <member name="M:Uno.UI.ResourceResolver.TryAssemblyResourceRetrieval(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey@,System.Object,System.Object@)">
            <summary>
            Tries to retrieve a resource from the same assembly as the retrieving context. Used when parsing third-party libraries
            (ie not application XAML, and not Uno.UI XAML)
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.TrySystemResourceRetrieval(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey@,System.Object@)">
            <summary>
            Try to retrieve a resource value from system-level resources.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.GetSystemResource``1(System.Object)">
            <summary>
            Get a system-level resource with the given key.
            </summary>
            <remarks>
            Use <see cref="!:ResolveTopLevelResource&lt;T&gt;(object, T)"/> when user-defined Application-level values should be considered (most
            of the time), use <see cref="M:Uno.UI.ResourceResolver.GetSystemResource``1(System.Object)"/> if they shouldn't
            </remarks>
        </member>
        <member name="M:Uno.UI.ResourceResolver.PushNewScope(Windows.UI.Xaml.XamlScope)">
            <summary>
            Push a new <see cref="T:Windows.UI.Xaml.XamlScope"/>, typically because a template is being materialized.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:Uno.UI.ResourceResolver.PushSourceToScope(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Push a new Resources source to the current xaml scope.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.PushSourceToScope(Uno.UI.DataBinding.ManagedWeakReference)">
            <summary>
            Push a new Resources source to the current xaml scope.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.PopSourceFromScope">
            <summary>
            Pop Resources source from current xaml scope.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.PopScope">
            <summary>
            Pop current <see cref="T:Windows.UI.Xaml.XamlScope"/>, typically because template materialization is complete.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.WriteInitiateGlobalStaticResourcesEventActivity">
            <summary>
            If tracing is enabled, writes an event for the initialization of system-level resources (Generic.xaml etc)
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.RegisterResourceDictionaryBySource(System.String,Uno.UI.Xaml.XamlParseContext,System.Func{Windows.UI.Xaml.ResourceDictionary},System.String)">
            <summary>
            Register a dictionary for a given source, this is used for retrieval when setting the Source property in code-behind or to an
            external resource.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.RetrieveDictionaryForSource(System.Uri)">
            <summary>
            Retrieve the ResourceDictionary mapping to a given source. Throws an exception if none is found.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.RetrieveDictionaryForSource(System.String,System.String)">
            <summary>
            Retrieve the ResourceDictionary mapping to a given source. Throws an exception if none is found.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.RetrieveCustomResource``1(System.String,System.String,System.String,System.String)">
            <summary>
            Retrieves a resource for a {CustomResource} markup, with the <see cref="T:Windows.UI.Xaml.Resources.CustomXamlResourceLoader"/> currently set.
            </summary>
        </member>
        <member name="M:Uno.UI.ResourceResolver.ResolveStaticResourceAlias(System.String,System.Object)">
            <summary>
            Supports the use of StaticResource alias with ResourceKey in Xaml markup.
            </summary>
        </member>
        <member name="T:Uno.UI.ResourceResolverSingleton">
            <summary>
            A wrapper for <see cref="T:Uno.UI.ResourceResolver"/> methods following the singleton pattern.
            </summary>
            <remarks>
            The motivation is to avoid additional overhead associated with static method calls into types with static state. This is normally
            only called from Xaml-generated code.
            </remarks>
        </member>
        <member name="M:Uno.UI.WinRT.Extensions.UI.Popups.MessageDialogContentDialog.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Uno.UI.WinRT.Extensions.UI.Popups.MessageDialogContentDialog.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Uno.UI.WinRT.Extensions.UI.Popups.MessageDialogExtension">
            <summary>
            Provides a ContentDialog-based implementation of MessageDialog.
            </summary>
        </member>
        <member name="P:Uno.UI.ActivitiesCollectionChangedEventArgs.Instances">
            <summary>
            Capture of the updated instances collection
            </summary>
        </member>
        <member name="P:Uno.UI.ActivitiesCollectionChangedEventArgs.AddedId">
            <summary>
            Id of the added instance, if any
            </summary>
        </member>
        <member name="P:Uno.UI.ActivitiesCollectionChangedEventArgs.RemovedId">
            <summary>
            Id of the removed instance, if any
            </summary>
        </member>
        <member name="M:Uno.UI.AssetsHelper.FindAssetFile(System.String)">
            <summary>
            Finds an asset by its full path, using a case insensitive lookup.
            </summary>
            <param name="assetPath">A android asset path.</param>
            <returns>A case sensitive path from android's asset manager</returns>
        </member>
        <member name="M:Uno.UI.AssetsHelper.BuildAssetsMap">
            <summary>
            Builds a cache file from the current package's assets.
            </summary>
            <remarks>
            This is required because the enumeration of all assets is particularly
            slow, and we can cache it since it does not change for a given package installation. 
            </remarks>
        </member>
        <member name="E:Uno.UI.BaseActivity.InstancesChanged">
            <summary>
            Occurs when an instance of BaseActivity is created or destroyed
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CurrentChanged">
            <summary>
            Occurs when the <see cref="P:Uno.UI.BaseActivity.Current"/> activity changed.
            </summary>
        </member>
        <member name="P:Uno.UI.BaseActivity.Id">
            <summary>
            Unique identifier for this instance of an activity.
            </summary>
        </member>
        <member name="P:Uno.UI.BaseActivity.Instances">
            <summary>
            Gets a list of all activities which are currently alive.
            </summary>
        </member>
        <member name="P:Uno.UI.BaseActivity.Current">
            <summary>
            Gets the currently running activity, if any.
            <remarks>
            This is the BaseActivity which is currently running, which means that it was "Resumed" and not "Paused". 
            This may be null if the current activity does not inherit from BaseActivity, or is not yet "Created".
            For more info look at the lifecycle diagram documented here: https://developer.android.com/reference/android/app/Activity.html.
            </remarks>
            </summary>
        </member>
        <member name="M:Uno.UI.BaseActivity.GetCurrent(System.Threading.CancellationToken)">
            <summary>
            Gets the first BaseActivity which is set as current. Unlike the <see cref="P:Uno.UI.BaseActivity.Current"/>, this method will wait until a BaseActivity is set as Current.
            </summary>
            <param name="ct"></param>
            <returns>The first BaseActivity displayed</returns>
        </member>
        <member name="E:Uno.UI.BaseActivity.ActionModeFinished">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnActionModeFinished(Android.Views.ActionMode)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ActionModeStarted">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnActionModeStarted(Android.Views.ActionMode)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ActivityReenter">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnActivityReenter(System.Int32,Android.Content.Intent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ActivityResult">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnActivityResult(System.Int32,Android.App.Result,Android.Content.Intent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.AttachedToWindow">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnAttachedToWindow"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.AttachFragment">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnAttachFragment(Android.App.Fragment)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.BackPressed">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnBackPressed"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ChildTitleChanged">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnChildTitleChanged(Android.App.Activity,Java.Lang.ICharSequence)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ConfigurationChanged">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnConfigurationChanged(Android.Content.Res.Configuration)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ContentChanged">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnContentChanged"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ContextItemSelected">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnContextItemSelected(Android.Views.IMenuItem)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ContextMenuClosed">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnContextMenuClosed(Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.Create">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreate(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreateWithPersistedState">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreate(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreateContextMenu">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreateContextMenu(Android.Views.IContextMenu,Android.Views.View,Android.Views.IContextMenuContextMenuInfo)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreateDescriptionFormatted">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreateDescriptionFormatted"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreateNavigateUpTaskStack">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreateNavigateUpTaskStack(Android.App.TaskStackBuilder)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreateOptionsMenu">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreateOptionsMenu(Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreatePanelMenu">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreatePanelMenu(System.Int32,Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreatePanelView">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreatePanelView(System.Int32)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreateThumbnail">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreateThumbnail(Android.Graphics.Bitmap,Android.Graphics.Canvas)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreateView">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreateView(System.String,Android.Content.Context,Android.Util.IAttributeSet)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.CreateViewWithParent">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnCreateView(System.String,Android.Content.Context,Android.Util.IAttributeSet)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.Destroy">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnDestroy"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.DetachedFromWindow">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnDetachedFromWindow"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.EnterAnimationComplete">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnEnterAnimationComplete"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.GenericMotionEvent">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnGenericMotionEvent(Android.Views.MotionEvent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.KeyDown">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnKeyDown(Android.Views.Keycode,Android.Views.KeyEvent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.KeyLongPress">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnKeyLongPress(Android.Views.Keycode,Android.Views.KeyEvent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.KeyMultiple">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnKeyMultiple(Android.Views.Keycode,System.Int32,Android.Views.KeyEvent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.KeyShortcut">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnKeyShortcut(Android.Views.Keycode,Android.Views.KeyEvent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.KeyUp">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnKeyUp(Android.Views.Keycode,Android.Views.KeyEvent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.LowMemory">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnLowMemory"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.MenuOpened">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnMenuOpened(System.Int32,Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.NavigateUp">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnNavigateUp"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.NavigateUpFromChild">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnNavigateUpFromChild(Android.App.Activity)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.NewIntent">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnNewIntent(Android.Content.Intent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.OptionsItemSelected">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnOptionsItemSelected(Android.Views.IMenuItem)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.OptionsMenuClosed">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnOptionsMenuClosed(Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.PanelClosed">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPanelClosed(System.Int32,Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.Pause">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPause"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.PostCreate">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPostCreate(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.PostCreateWithPersistedState">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPostCreate(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.PostResume">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPostResume"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.PrepareNavigateUpTaskStack">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPrepareNavigateUpTaskStack(Android.App.TaskStackBuilder)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.PrepareOptionsMenu">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPrepareOptionsMenu(Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.PrepareOptionsPanel">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPrepareOptionsPanel(Android.Views.View,Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.PreparePanel">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnPreparePanel(System.Int32,Android.Views.View,Android.Views.IMenu)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ProvideAssistData">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnProvideAssistData(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.RequestPermissionsResultWithResults">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnRequestPermissionsResult(System.Int32,System.String[],Android.Content.PM.Permission[])"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.Restart">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnRestart"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.RestoreInstanceState">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnRestoreInstanceState(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.RestoreInstanceStateWithPersistedState">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnRestoreInstanceState(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.Resume">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnResume"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.ResumeFragments">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnResumeFragments"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.RetainCustomNonConfigurationInstance">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnRetainCustomNonConfigurationInstance"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.SaveInstanceState">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnSaveInstanceState(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.SaveInstanceStateWithPersistedState">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnSaveInstanceState(Android.OS.Bundle)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.SearchRequested">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnSearchRequested"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.Start">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnStart"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.StateNotSaved">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnStateNotSaved"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.Stop">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnStop"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.TitleChanged">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnTitleChanged(Java.Lang.ICharSequence,Android.Graphics.Color)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.TopResumedActivityChanged">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnTopResumedActivityChanged(System.Boolean)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.TouchEvent">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnTouchEvent(Android.Views.MotionEvent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.TrackballEvent">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnTrackballEvent(Android.Views.MotionEvent)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.TrimMemory">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnTrimMemory(Android.Content.TrimMemory)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.UserInteraction">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnUserInteraction"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.UserLeaveHint">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnUserLeaveHint"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.VisibleBehindCanceled">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnVisibleBehindCanceled"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.WindowAttributesChanged">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnWindowAttributesChanged(Android.Views.WindowManagerLayoutParams)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.WindowFocusChanged">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnWindowFocusChanged(System.Boolean)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="E:Uno.UI.BaseActivity.WindowStartingActionMode">
            <summary>
            Occurs when <see cref="M:Uno.UI.BaseActivity.OnWindowStartingActionMode(Android.Views.ActionMode.ICallback)"/> is invoked on the activity.
            </summary>
        </member>
        <member name="M:Uno.UI.BaseActivity.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.BaseActivity.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.BaseActivity.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.BaseFragment.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.BaseFragment.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Uno.UI.BaseFragment.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Uno.UI.CurrentActivityChangedEventArgs.Current">
            <summary>
            Gets the new current activity, if any.
            </summary>
        </member>
        <member name="T:Uno.UI.DelegateActivity">
            <summary>
             An invisible (Transparent) Activity that starts an Intent and returns the parameters of the  OnActivityResult
            </summary>
        </member>
        <member name="M:Uno.UI.DelegateActivity.GetActivityResult(System.Threading.CancellationToken,Android.Content.Intent,System.Int32)">
            <summary>
            Starts an Intent and waits for the given request code
            </summary>
            <param name="ct">CancellationToken</param>
            <param name="intent">The Intent you want to send</param>
            <param name="requestCode">A specific Response code, this is useful if you send more than one type of request in parallel</param>
            <returns>OnActivityResultArgs : an object containing the parameters of the  OnActivityResult</returns>
        </member>
        <member name="M:Uno.UI.DelegateActivity.OnActivityResult(System.Int32,Android.App.Result,Android.Content.Intent)">
            <summary>
            Called when an intent returns with data
            </summary>
            <param name="requestCode">The request code issued in StartActivityForResult</param>
            <param name="resultCode">OK, Cancelled... </param>
            <param name="intent">The Intent Data</param>
        </member>
        <member name="M:Uno.UI.DrawableHelper.FromUri(System.Uri)">
            <summary>
            Returns Drawable by URI.
            Forwards to <see cref="!:Uno.DrawableHelper"/>
            </summary>
            <param name="uri">URI</param>
            <returns>Drawable</returns>
        </member>
        <member name="M:Uno.UI.NativeInstanceHelper.ScheduleCacheDump">
            <summary>
            Schedules the writing of the content of the cache to the disk.
            </summary>
        </member>
        <member name="M:Uno.UI.NativeInstanceHelper.InitializeCachedInstances">
            <summary>
            Pre-feteches the cached natived instances for the current application package, on a background thread.
            </summary>
        </member>
        <member name="M:Uno.UI.NativeInstanceHelper.CreateNativeInstance(System.Type,Java.Lang.Object,Android.Content.Context,System.Action{System.IntPtr,Android.Runtime.JniHandleOwnership})">
            <summary>
            Creates a native view using a fast instantiation path, by caching references to the native class and constructor.
            </summary>
            <param name="type">The .NET class top-level type</param>
            <param name="target">The .NET class instance being created</param>
            <param name="context">The context of the View to be created</param>
            <param name="setInstance">A delegate that provides access to the <see cref="M:Java.Lang.Object.SetHandle(System.IntPtr,Android.Runtime.JniHandleOwnership)"/> method.</param>
        </member>
        <member name="M:Uno.UI.NativeInstanceHelper.WriteUsageStats">
            <summary>
            Writes the content of the already resolved instances, to be
            reused at the next application startup.
            </summary>
        </member>
        <member name="T:Uno.UI.ViewAttachedStateChangedHelper">
            <summary>
            A helper class supporting the management of View attached/detached from view listener.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewAttachedStateChangedHelper.CreateChangedListener(System.Action{Android.Views.View},System.Action{Android.Views.View})">
            <summary>
            Gets an AttachedChangedListener using the provided actions.
            </summary>
            <param name="attachedHandler">An action called when the view is attached</param>
            <param name="detachedHandler">An action called when the view is detached</param>
            <returns>An AttachedChangedListener instance</returns>
        </member>
        <member name="M:Uno.UI.ViewAttachedStateChangedHelper.ReleaseChangedListener(Uno.UI.ViewAttachedStateChangedHelper.AttachedChangedListener)">
            <summary>
            Releases an AttachedChangedListener instance.
            </summary>
            <param name="listener">An AttachedChangedListener instance.</param>
        </member>
        <member name="M:Uno.UI.ViewExtensions.FindFirstParent``1(Android.Views.IViewParent)">
            <summary>
            Return First parent of the view of specified T type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="view"></param>
            <returns>First parent of the view of specified T type.</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.FindFirstParentOfView``1(Android.Views.View)">
            <summary>
            Return First parent of the view of specified T type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="view"></param>
            <returns>First parent of the view of specified T type.</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.FindFirstParent``1(Android.Views.IViewParent,System.Func{``0,System.Boolean})">
            <summary>
            Return First parent of the view of specified T type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="view"></param>
            <param name="predicate">Predicate that will be proved against the parents of type T</param>
            <returns>First parent of the view of specified T type that also holds true with the predicate</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.GetParents(Android.Views.View)">
            <summary>
            Enumerates all the parents for a view.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewExtensions.GetChildren(Android.Views.ViewGroup)">
            <summary>
            Gets an enumerator containing all the children of a View group
            </summary>
            <param name="group">View group</param>
            <returns>Children in default order</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.GetChildrenReverse(Android.Views.ViewGroup)">
            <summary>
            Gets an reverse enumerator containing all the children of a View group
            </summary>
            <param name="group">View group</param>
            <returns>Children in reverse order</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.FindFirstChild(Android.Views.ViewGroup)">
            <summary>
            Finds the first child <see cref="T:Android.Views.View"/> of the provided <see cref="T:Android.Views.ViewGroup"/>.
            </summary>
            <param name="group">The <see cref="T:Android.Views.ViewGroup"/> to search into.</param>
            <returns>A <see cref="T:Android.Views.View"/> if any, otherwise null.</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.GetChildrenSlow(Android.Views.ViewGroup)">
            <summary>
            A enumerator for ViewGroup children that uses interop calls.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewExtensions.GetChildrenReverseSlow(Android.Views.ViewGroup)">
            <summary>
            A reverse enumerator for ViewGroup children that uses interop calls.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewExtensions.GetChildren(Android.Views.ViewGroup,System.Func{Android.Views.View,System.Boolean})">
            <summary>
            Gets a filtered enumerator containing children of the view group
            </summary>
            <param name="group">The group</param>
            <param name="filter">The filter</param>
            <returns>An enumerator of the children</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.EnumerateAllChildren(Android.Views.ViewGroup,System.Func{Android.Views.View,System.Boolean},System.Int32)">
            <summary>
            Enumerates all the children for a specified view group.
            </summary>
            <param name="view">The view group to get the children from</param>
            <param name="selector">The selector function</param>
            <param name="maxDepth">The depth to stop looking for children.</param>
            <returns>A lazy enumerable of views</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.EnumerateAllChildrenReverse(Android.Views.ViewGroup,System.Func{Android.Views.View,System.Boolean},System.Int32)">
            <summary>
            Enumerates all the children for a specified view group in reverse order.
            </summary>
            <param name="view">The view group to get the children from</param>
            <param name="selector">The selector function</param>
            <param name="maxDepth">The depth to stop looking for children.</param>
            <returns>A lazy enumerable of views in reverse order</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.EnumerateAllChildren(Android.Views.ViewGroup,System.Int32)">
            <summary>
            Enumerates all the children for a specified view group.
            </summary>
            <param name="view">The view group to get the children from</param>
            <param name="maxDepth">The depth to stop looking for children.</param>
            <returns>A lazy enumerable of views</returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.FindFirstChild``1(Android.Views.ViewGroup,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Find the first child of a specific type.
            </summary>
            <typeparam name="T">Expected type of the searched child</typeparam>
            <param name="view"></param>
            <param name="childLevelLimit">Defines the max depth, null if not limit (Should never be used)</param>
            <param name="includeCurrent">Indicates if the current view should also be tested or not.</param>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.FindFirstChild``1(Android.Views.ViewGroup,System.Func{``0,System.Boolean},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Find the first child of a specific type.
            </summary>
            <typeparam name="T">Expected type of the searched child</typeparam>
            <param name="view"></param>
            <param name="selector">Additional selector for the child</param>
            <param name="childLevelLimit">Defines the max depth, null if not limit (Should never be used)</param>
            <param name="includeCurrent">Indicates if the current view should also be tested or not.</param>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.ViewExtensions.AddChild(Android.Views.ViewGroup,Android.Views.View)">
            <summary>
            Add view to parent.
            </summary>
            <param name="parent">Parent view</param>
            <param name="child">Child view to add</param>
        </member>
        <member name="M:Uno.UI.ViewExtensions.GetVisualTreeParent(Android.Views.View)">
            <summary>
            Get the parent view in the visual tree. This may differ from the logical <see cref="P:Windows.UI.Xaml.FrameworkElement.Parent"/>.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewExtensions.RemoveViewAndDispose(Android.Views.ViewGroup,Android.Views.View)">
            <summary>
            Removes a child view from the specified view, and disposes it if the specified view is the owner.
            </summary>
            <param name="view">The ViewGroup to remove the child from.</param>
            <param name="child">The child view to remove</param>
        </member>
        <member name="M:Uno.UI.ViewExtensions.InvalidateMeasure(Android.Views.View)">
            <summary>
            Invalidates the layout of the selected view. For android, calls the RequestLayout method.
            </summary>
            <param name="view">The view to invalidate.</param>
        </member>
        <member name="M:Uno.UI.ViewExtensions.InvalidateArrange(Android.Views.View)">
            <summary>
            Invalidates the layout of the selected view. For android, calls the RequestLayout method.
            </summary>
            <param name="view">The view to invalidate.</param>
        </member>
        <member name="M:Uno.UI.ViewExtensions.RegisterViewAttachedStateChanged(Android.Views.View,System.Action{Android.Views.View},System.Action{Android.Views.View})">
            <summary>
            Registers safely on the ViewAttachedToWindow on ViewDetachedFromWindow.
            </summary>
            <param name="view">The view to observe</param>
            <param name="attachedHandler">The method to be called when the view is attached.</param>
            <param name="detachedHandler">The method to be called when the view is detached.</param>
            <returns></returns>
            <remarks>
            This method wraps the AttachStateChangeListener for
            proper lifecycle management, particularly when views are disposed.
            </remarks>
        </member>
        <member name="M:Uno.UI.ViewExtensions.GetTopLevelParent(Android.Views.View)">
            <summary>
            Returns the root of the view's local visual tree.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewExtensions.ShowDescendants(Android.Views.ViewGroup,System.Text.StringBuilder,System.String,Android.Views.ViewGroup)">
            <summary>
            Displays all the visual descendants of <paramref name="viewGroup"/> for diagnostic purposes. 
            </summary>
        </member>
        <member name="M:Uno.UI.ViewExtensions.ShowLocalVisualTree(Android.Views.ViewGroup,System.Int32)">
            <summary>
            Displays the visual tree in the vicinity of <paramref name="viewGroup"/> for diagnostic purposes.
            </summary>
            <param name="viewGroup">The view to display tree for.</param>
            <param name="fromHeight">How many levels above <paramref name="viewGroup"/> should be included in the displayed subtree.</param>
            <returns>A formatted string representing the visual tree around <paramref name="viewGroup"/>.</returns>
        </member>
        <member name="F:Uno.UI.ViewHelper._uniqueViewId">
            <summary>
            Android reserves ids over (0x00FFFFFF) for resource files.
            Dynamically created views will start at id 0.
            Our best chance of having a unique id is to start from the 
            highest id and decrement it as requested.
            </summary>
        </member>
        <member name="F:Uno.UI.ViewHelper.MODE_SHIFT">
            <summary>
            Private field coming from MeasureSpec
            </summary>
        </member>
        <member name="F:Uno.UI.ViewHelper.MODE_MASK">
            <summary>
            Private field coming from MeasureSpec
            </summary>
        </member>
        <member name="P:Uno.UI.ViewHelper.Scale">
            <summary>
            The scale to be applied to all layout conversions from/to DIP (device-independent pixels) to physical pixels.
            </summary>
        </member>
        <member name="P:Uno.UI.ViewHelper.FontScale">
            <summary>
            The scale to be applied, when text is displayed, to all layout conversions from/to DIP (device-independent pixels) to physical pixels.
            </summary>
        </member>
        <member name="P:Uno.UI.ViewHelper.MaxLogicalValue">
            <summary>
            The maximum logical pixel value which can be converted to physical pixels without overflow.
            </summary>
        </member>
        <member name="P:Uno.UI.ViewHelper.MinLogicalValue">
            <summary>
            The minimum logical pixel value which can be converted to physical pixels without underflow.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewHelper.LogicalToPhysicalFontPixels(System.Single)">
            <summary>
            Gets the physical representation of the provided logical pixels, for text (which is affected by Text size preferences)
            </summary>
            <param name="value">The logical value</param>
            <returns>The pixels value</returns>
        </member>
        <member name="M:Uno.UI.ViewHelper.LogicalToPhysicalPivotPixels(System.Double)">
            <summary>
            Gets the physical representation of the provided logical pixels, 
            for the <see cref="P:Android.Views.View.PivotX"/> and <see cref="P:Android.Views.View.PivotY"/> of a View (cf. Remarks)
            </summary>
            <remarks>Compared to <see cref="M:Uno.UI.ViewHelper.LogicalToPhysicalPixels(Windows.Foundation.Size)"/>, this won't apply any rounding and returns a float.</remarks>
            <param name="value">The logical value</param>
            <returns>The pixels value</returns>
        </member>
        <member name="M:Uno.UI.ViewHelper.LogicalToPhysicalPixels(System.Double)">
            <summary>
            Gets the physical representation of the provided logical pixels.
            </summary>
            <param name="value">The logical value</param>
            <returns>The pixels value</returns>
        </member>
        <member name="M:Uno.UI.ViewHelper.PhysicalToLogicalPixels(System.Double)">
            <summary>
            Gets the logical representation of the provided physical pixels.
            </summary>
            <param name="value">The pixels value</param>
            <returns>The logical value</returns>
        </member>
        <member name="M:Uno.UI.ViewHelper.MakeMeasureSpec(System.Int32,Android.Views.MeasureSpecMode)">
            <summary>
            A C# re-implementation of the MeasureSpec.makeMeasureSpec method, to avoid the cost of interop.
            </summary>
            <param name="size">The size to use to create the MeasureSpec</param>
            <param name="mode">The mode of the MeasureSpec</param>
            <returns>A measure spec.</returns>
        </member>
        <member name="M:Uno.UI.ViewHelper.MeasureSpecGetSize(System.Int32)">
            <summary>
            A C# re-implementation of the MeasureSpec.getSize method, to avoid the cost of interop.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewHelper.MeasureSpecGetMode(System.Int32)">
            <summary>
            A C# re-implementation of the MeasureSpec.getMode method, to avoid the cost of interop.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewHelper.SpecFromLogicalSize(System.Double)">
            <summary>
            Converts logical size to measureSpec, using MeasureSpecMode based on the size's value.
            </summary>
            <param name="value">logical size</param>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.ViewHelper.SpecFromPhysicalSize(System.Int32)">
            <summary>
            Converts physical size to measureSpec, using MeasureSpecMode based on the size's value.
            </summary>
            <param name="value">physical size</param>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.ViewHelper.LogicalSizeFromSpec(System.Int32,System.Int32)">
            <summary>
            Gets the Logical size from MeasureSpecs
            </summary>
            <param name="widthMeasureSpec"></param>
            <param name="heightMeasureSpec"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.UI.ViewHelper.PhysicalSizeFromSpec(System.Int32)">
            <summary>
            Get the size to use for measurement from a MeasureSpec, in physical pixels.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewHelper.GenerateUniqueViewId">
            <summary>
            Generates a probably unique view id.
            </summary>
        </member>
        <member name="M:Uno.UI.ViewHelper.ApplyDimension(Android.Util.ComplexUnitType,System.Double)">
            <summary>
            Converts an unpacked complex data value holding a dimension to its final floating point value. The two parameters unit and value are as in TYPE_DIMENSION.
            </summary>
            <param name="unit"></param>
            <param name="value"></param>
            <param name="metrics"></param>
            <returns></returns>
            <remarks>
            This method is an extract of com.google.android/android/5.1.1_r1/android/util/TypedValue.java, for performance.
            See http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/util/TypedValue.java#339
            </remarks>
        </member>
        <member name="P:Uno.UI.LayoutProvider.NavigationBarRect">
            <summary>
            // Used by legacy visual bounds calculation on devices below API 30. Will always be default value on devices running API 30 and above.
            </summary>
        </member>
        <member name="T:Uno.UI.OnActivityResultArgs">
            <summary>
            OnActivityResultArgs : an object containing the parameters of the Activity.OnActivityResult
            </summary>
            <param name="ct">CancellationToken</param>
            <param name="intent">The Intent you want to send</param>
            <param name="requestCode">A specific Response code, this is useful if you send more than one type of request in parallel</param>
        </member>
        <member name="T:Uno.UI.Services.LayoutManager">
            <summary>
            Used on Android to relayout views selectively without relaying out the entire visual tree.
            </summary>
        </member>
        <member name="M:Uno.UI.Services.LayoutManager.GetSeniorViews">
            <summary>
            Filter views which have an ancestor already in the queue.
            </summary>
        </member>
        <member name="T:Uno.UI.GlobalStaticResources">
            <summary>
            Contains all the static resources defined for the application
            </summary>
        </member>
        <member name="P:Uno.Presentation.IBinding.Converter">
            <summary>
            An optional value converter
            </summary>
        </member>
        <member name="P:Uno.Presentation.IBinding.DataContext">
            <summary>
            The source data context
            </summary>
        </member>
        <member name="P:Uno.Presentation.IBinding.Path">
            <summary>
            The source path in the current DataContext
            </summary>
        </member>
        <member name="P:Uno.Presentation.IBinding.TargetName">
            <summary>
            The bound view property
            </summary>
        </member>
        <member name="M:Uno.Presentation.IBinding.SetSourceValue(System.Object)">
            <summary>
            Sets the source value in the data context
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Uno.Presentation.Resources.ResourceRegistry.ResourceLookupHandler">
            <summary>
            Defines a resource selector handler
            </summary>
            <param name="resourceName">A resource name to be resolved</param>
            <returns>A resource instance, otherwise null</returns>
        </member>
        <member name="M:Uno.Presentation.Resources.ResourceRegistry.RegisteLookup(Uno.Presentation.Resources.ResourceRegistry.ResourceLookupHandler)">
            <summary>
            Registers a selector that will be used if the no resources are found.
            </summary>
            <param name="resourceLookup">A selector that returns a resource instance, otherwise null.</param>
        </member>
        <member name="M:Uno.Presentation.Resources.ResourceRegistry.FindResource(System.String)">
            <summary>
            Finds a resource in the registry
            </summary>
            <param name="name">The name of the resrouce</param>
            <returns>The instance of the resource, otherwise null.</returns>
        </member>
        <member name="M:Uno.Media.GeometryHelper.Build(System.Action{Uno.Media.StreamGeometryContext},Windows.UI.Xaml.Media.FillRule)">
            <summary>
            Build a StreamGeometry based on the specified <paramref name="contextAction"/>. If the <paramref name="contextAction"/> 
            is built from a C# lambda, then the StreamGeometry instance will be cached, allowing native paths to be reused.
            </summary>
            <param name="contextAction">A geometry action generation.</param>
            <returns></returns>
        </member>
        <member name="T:Uno.Media.PathMarkupParser">
            <summary>
            Parses a path markup string.
            </summary>
        </member>
        <member name="M:Uno.Media.PathMarkupParser.#ctor(Uno.Media.StreamGeometryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Media.PathMarkupParser"/> class.
            </summary>
            <param name="geometryContext">The geometry context.</param>
            <exception cref="T:System.ArgumentNullException">geometryContext</exception>
        </member>
        <member name="M:Uno.Media.PathMarkupParser.Parse(System.String,Windows.UI.Xaml.Media.FillRule@)">
            <summary>
            Parses the specified path data and writes the result to the geometryContext of this instance.
            </summary>
            <param name="s">The path data.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.UpdateSource">
            <summary>
            Sends the current binding target value to the binding source property in TwoWay bindings.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.UpdateSource(System.Object)">
            <summary>
            Sends the current binding target value to the binding source property in TwoWay bindings.
            </summary>
            <remarks>
            This method is not part of UWP contract
            </remarks>
            <param name="value">The expected current value of the target</param>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.UpdateSourceOnXBindBack(System.Object)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.SetSourceValue(System.Object)">
            <summary>
            Sets the source value in the data context
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.SuspendBinding">
            <summary>
            Suspends the processing of the binding until <see cref="M:Windows.UI.Xaml.Data.BindingExpression.ResumeBinding"/> is called.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.ResumeBinding">
            <summary>
            Resumes the binding processing suspended by <see cref="M:Windows.UI.Xaml.Data.BindingExpression.SuspendBinding"/>
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.ResolveUpdateSourceTrigger">
            <summary>
            Turns UpdateSourceTrigger.Default to DependencyProperty's FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
            </summary>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.SetTargetValueForXBindSelector">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingExpression.InnerSetTargetValueSafe(System.Object,System.Boolean)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Data.BindableAttribute">
            <summary>
            Defines a bindable class, used as a marker to generate type metadata at compilation time.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.Binding._weakSource">
            <summary>
            A weak <see cref="P:Windows.UI.Xaml.Data.Binding.Source"/> storage for controls bases on native elements.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.Binding._source">
            <summary>
            A hard storage for other types of <see cref="P:Windows.UI.Xaml.Data.Binding.Source"/> content.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.Binding.#ctor(Windows.UI.Xaml.PropertyPath,Windows.UI.Xaml.Data.IValueConverter,System.Object)">
            <summary>
            Internal method used to create paths. 
            </summary>
            <param name="path"></param>
            <param name="converter"></param>
            <param name="converterParameter"></param>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.Path">
            <summary>
            Gets or sets the path to the binding source property.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.Converter">
            <summary>
            Gets or sets the converter object that is called by the binding engine to modify the data as it is passed between the source and target, or vice versa.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.ConverterParameter">
            <summary>
            Gets or sets a parameter that can be used in the Converter logic.
            </summary>
            <value>The converter parameter.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.ConverterLanguage">
            <summary>
            Gets or sets a value that names the language to pass to any converter specified by the Converter property.
            </summary>
            <value>The converter language.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.ElementName">
            <summary>
            Gets or sets the name of the element to use as the binding source for the Binding.
            </summary>
            <value>The name of the element, or an ElementNameSubject instance that can be used to monitor the element name instance changes.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.FallbackValue">
            <summary>
            Gets or sets the value to use when the binding is unable to return a value.
            </summary>
            <value>The fallback value.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.Mode">
            <summary>
            Gets or sets a value that indicates the direction of the data flow in the binding.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.RelativeSource">
            <summary>
            Gets or sets the binding source by specifying its location relative to the position of the binding target. This is most often used in bindings within XAML control templates.
            </summary>
            <value>The relative source.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.Source">
            <summary>
            Gets or sets the data source for the binding.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.TargetNullValue">
            <summary>
            Gets or sets the value that is used in the target when the value of the source is null.
            </summary>
            <value>The target null value.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.UpdateSourceTrigger">
            <summary>
            Gets or sets a value that determines the timing of binding source updates for two-way bindings.
            </summary>
            <value>The update source trigger.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.CompiledSource">
            <summary>
            Gets or sets the data source for a compiled binding (x:Bind).
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.XBindSelector">
            <summary>
            Provides the method used in the context of x:Bind expressions to
            get the resulting value.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.XBindBack">
            <summary>
            Provides the method used to set the value back to the source.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.Binding.XBindPropertyPaths">
            <summary>
            List of paths to observe in the context x:Bind expressions
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.BindingOperations">
            <summary>
            Provides the static <see cref="M:Windows.UI.Xaml.Data.BindingOperations.SetBinding(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.Data.BindingBase)" /> method.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.BindingOperations.SetBinding(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.Data.BindingBase)">
            <summary>
            Associates a <see cref="T:Windows.UI.Xaml.Data.Binding"/> with a target property on a target object. 
            This method is the code equivalent to using a {Binding} markup extension in XAML markup. 
            </summary>
            <param name="target">The object that should be the target of the evaluated binding.</param>
            <param name="dp">The property on the target to bind, specified by its identifier. These identifiers are usually available as static read-only properties on the type that defines the target object, or one of its base types.</param>
            <param name="binding">The binding to assign to the target property. This <see cref="T:Windows.UI.Xaml.Data.Binding"/> should be initialized: important <see cref="T:Windows.UI.Xaml.Data.Binding"/> properties such as <see cref="T:Windows.UI.Xaml.PropertyPath"/> Path should already be set before passing it as the parameter.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Data.CollectionViewSource.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.CollectionViewSource.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.CollectionViewSource.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.ICustomProperty">
            <summary>
            Implements custom property definition support for data binding sources that are implemented using COM.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ICustomProperty.CanRead">
            <summary>
            Gets a value that determines whether the custom property supports read access.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ICustomProperty.CanWrite">
            <summary>
            Gets a value that determines whether the custom property supports write access.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ICustomProperty.Name">
            <summary>
            Gets the path-relevant name of the property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ICustomProperty.Type">
            <summary>
            Gets the underlying type of the custom property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.ICustomProperty.GetValue(System.Object)">
            <summary>
            Gets the value of the custom property from a particular instance.
            </summary>
            <param name="target">The owning instance.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Data.ICustomProperty.SetValue(System.Object,System.Object)">
            <summary>
            Sets the custom property value on a specified instance.
            </summary>
            <param name="target">The owning instance.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Data.ICustomProperty.GetIndexedValue(System.Object,System.Object)">
            <summary>
            Gets the value at an index location, for cases where the custom property has indexer support.
            </summary>
            <param name="target">The owning instance.</param>
            <param name="index">The index to get.</param>
            <returns>The retrieved value at the index.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Data.ICustomProperty.SetIndexedValue(System.Object,System.Object,System.Object)">
            <summary>
            Sets the value at an index location, for cases where the custom property has indexer support.
            </summary>
            <param name="target">The owning instance.</param>
            <param name="value">The value to set.</param>
            <param name="index">The index location to set to.</param>
        </member>
        <member name="T:Windows.UI.Xaml.Data.ICustomPropertyProvider">
            <summary>
            Provides lookup service for ICustomProperty support.
            This interface is implemented by objects so that their
            custom defined properties can be used as run-time binding sources.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ICustomPropertyProvider.Type">
            <summary>
            Gets the underlying type of the custom property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Data.ICustomPropertyProvider.GetCustomProperty(System.String)">
            <summary>
            Gets a custom property's ICustomProperty support object by specifying
            a property name.
            </summary>
            <param name="name">The name of the property to get the support object for.</param>
            <returns>The returned support object for the custom property, or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Data.ICustomPropertyProvider.GetIndexedProperty(System.String,System.Type)">
            <summary>
            Gets a custom property's ICustomProperty support object by specifying
            a property name and the type of the indexed collection.
            </summary>
            <param name="name">The name of the property to get the support object for.</param>
            <param name="type">The type of the indexed collection, specified as a TypeName wrapper.</param>
            <returns>The returned support object for the custom property, or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Data.ICustomPropertyProvider.GetStringRepresentation">
            <summary>
            Provides support for "GetStringFromObject" and/or "ToString" logic
            on the assumption that the implementation supports System.Object.
            This logic might be accessed by features or services such as generating
            UI Automation values based on data content.
            </summary>
            <returns>The provided string.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Data.RelativeSource.Mode">
            <summary>
            Gets or sets a value that describes the location of the binding source relative to the position of the binding target.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="F:Windows.UI.Xaml.Data.RelativeSource.TemplatedParent">
            <summary>
            Represents a TemplatedParent RelativeSource.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.RelativeSource.Self">
            <summary>
            Represents a TemplatedParent Self.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.NonBindableAttribute">
            <summary>
            Defines non-bindable property, used as a marker to avoid generating type metadata at compilation time.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.BindingMode">
            <summary>
            Describes how the data propagates in a binding.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.BindingMode.OneWay">
            <summary>
            Updates the target property when the binding is created. Changes to the source object can also propagate to the target.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.BindingMode.OneTime">
            <summary>
            Updates the target property when the binding is created.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.BindingMode.TwoWay">
            <summary>
            Updates either the target or the source object when either changes. When the binding is created, the target property is updated from the source.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.CollectionView.AsEnumerable">
            <summary>
            Hack to prevent extension methods from detecting IList properties and optimizing in a way that breaks with grouping. Can be removed once grouping is handled more efficiently.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.ElementNameSubject">
            <summary>
            A subject to route the availability of an element instance reference.
            </summary>
            <remarks>Used internally by the Xaml generator to perform late ElementName binding.</remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Data.ElementNameSubject.ElementInstanceChangedHandler">
            <summary>
            An element name instance changed delegate.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Data.ElementNameSubject.ElementInstanceChanged">
            <summary>
            An event raised when the ElementInstance property has changed.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ElementNameSubject.ElementInstance">
            <summary>
            The element name instance
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ElementNameSubject.IsLoadTimeBound">
            <summary>
            Should the ElementName binding be applied when the view loads? True when the named element is not in local scope.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ElementNameSubject.Name">
            <summary>
            The ElementName. 
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.RelativeSourceMode">
            <summary>
            Defines constants that describe the location of the binding source relative to the position of the binding target.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.RelativeSourceMode.None">
            <summary>
            Don't use this value of RelativeSourceMode; always use either Self or TemplatedParent.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.RelativeSourceMode.TemplatedParent">
            <summary>
            Refers to the element to which the template (in which the data-bound element exists) is applied. This is similar to setting a TemplateBinding Markup Extension and is only applicable if the Binding is within a template.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.RelativeSourceMode.Self">
            <summary>
            Refers to the element on which you are setting the binding and allows you to bind one property of that element to another property on the same element.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.ResourceBinding">
            <summary>
            Binding used for resource resolution at load time. 
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ResourceBinding.ResourceKey">
            <summary>
            The resource key.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Data.ResourceBinding.SetterBindingPath">
            <summary>
            The binding path that this resource binding is targeting, if it was created by a VisualState <see cref="T:Windows.UI.Xaml.Setter"/>.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.ResourceUpdateReason.StaticResourceLoading">
            <summary>
            A static resource that could not be resolved at compile time, and should retry at loading. (This is something of a patch for compatibility gaps between Uno and WinUI)
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.ResourceUpdateReason.ThemeResource">
            <summary>
            An update associated with theme changing, or a resource binding that should be updated when theme changes
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.ResourceUpdateReason.HotReload">
            <summary>
            An update associated with hot reload, or a resource binding that should be updated for hot-reload changes
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.ResourceUpdateReason.PropagatesThroughTree">
            <summary>
            Updates that should be propagated recursively through the visual tree
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.ResourceUpdateReason.ResolvedOnLoading">
            <summary>
            Updates that should be re-resolved when the bound object or its parent is loaded into the visual tree
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.TemplateBinding">
            <summary>
            A template binding definition, using a TemplatedParent relative source
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Data.UpdateSourceTrigger">
            <summary>
            Defines constants that indicate when a binding source is updated by its binding target in two-way binding.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.UpdateSourceTrigger.Default">
            <summary>
            Use default behavior from the dependency property that uses the binding. In Windows Runtime, this evaluates the same as a value with PropertyChanged.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.UpdateSourceTrigger.PropertyChanged">
            <summary>
            The binding source is updated whenever the binding target value changes. This is detected automatically by the binding system.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.UpdateSourceTrigger.Explicit">
            <summary>
            The binding source is updated only when you call the BindingExpression.UpdateSource method.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Data.UpdateSourceTrigger.LostFocus">
            <summary>	
            The binding source is updated whenever the binding target element loses focus.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.IDataContextProvider">
            <summary>
            Defines an object that has a Binding DataContext
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.TimelineExtensions.GetIsDependantAnimation(Windows.UI.Xaml.Media.Animation.Timeline)">
            <summary>
            Gets a value indicating whether this instance is a dependent animation.
            
            https://msdn.microsoft.com/en-uS/office/office365/jj819807.aspx#dependent
            </summary>
            <value><c>true</c> if this instance is dependent animation; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.TimelineExtensions.GetIsHardwareAnimated(Windows.UI.Xaml.Media.Animation.Timeline)">
            <summary>
            Animation should be hardware-bound if it is neither dependent, nor zero-duration.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorAnimation.Dispose(System.Boolean)">
            <summary>
            Dispose the Double animation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames.Play">
            <summary>
            Creates a new animator and animates the view
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames.InitializeAnimators">
            <summary>
            Initializes the animators and 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames.ComputeFromValue">
            <summary>
            Calculates the From value of the animation
            For simplification animations are based on to and from values
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames.Replay">
            <summary>
            Replay this animation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames.OnEnd">
            <summary>
            Replays the Animation if required, Sets the final state, Raises the Completed event. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames.Dispose(System.Boolean)">
            <summary>
            Dispose the animation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorKeyFrame.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorKeyFrame.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorKeyFrame.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame">
            <summary>
            Discrete key frames like DiscreteDoubleKeyFrame create sudden "jumps" between values (no Interpolation). 
            In other words, the animated property does not change until the key frame's key time is reached 
            at which point the animated property goes suddenly to the target value.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame.#ctor">
            <summary>
            Initializes a new instance of the DiscreteDoubleKeyFrame class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the DiscreteDoubleKeyFrame class with the specified ending value.
            </summary>
            <param name="value">Ending value (also known as "target value") for the key frame.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame.#ctor(System.Double,Windows.UI.Xaml.Media.Animation.KeyTime)">
            <summary>
            Initializes a new instance of the DiscreteDoubleKeyFrame class with the specified ending value and key time.
            </summary>
            <param name="value">Ending value (also known as "target value") for the key frame.</param>
            <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame.DiscreteDoubleKeyFrameEasingFunction">
            <summary>
            This is a fake easing function that has no equivalent on GPU.
            We should implement DoubleAnimationUsingKeyFrames in a way to not use this.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleAnimation.Dispose(System.Boolean)">
            <summary>
            Dispose the Double animation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.Play">
            <summary>
            Creates a new animator and animates the view
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.InitializeAnimators">
            <summary>
            Initializes the animators and 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.ComputeFromValue">
            <summary>
            Calculates the From value of the animation
            For simplification animations are based on to and from values
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.Replay">
            <summary>
            Replay this animation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.OnEnd">
            <summary>
            Replays the Animation if required, Sets the final state, Raises the Completed event. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.Dispose(System.Boolean)">
            <summary>
            Dispose the Double animation.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.DoubleKeyFrame.Value">
            <summary>
            The key frame's target value, which is the value of this key frame at its specified KeyTime. The default value is 0.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.DoubleKeyFrame.KeyTime">
            <summary>
            The time at which the key frame's current value should be equal to its Value property.
            The default value should be Uniform, but it's not supported yet so it's default(KeyTime) for now.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleKeyFrame.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleKeyFrame.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.DoubleKeyFrame.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.DoubleKeyFrameCollection">
            <summary>
            Represents a collection of DoubleKeyFrame objects.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.EasingDoubleKeyFrame.#ctor">
            <summary>
            Initializes a new instance of the EasingDoubleKeyFrame class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.EasingDoubleKeyFrame.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the EasingDoubleKeyFrame class with the specified Double value.
            </summary>
            <param name="value">The initial Double value.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.EasingDoubleKeyFrame.#ctor(System.Double,Windows.UI.Xaml.Media.Animation.KeyTime)">
            <summary>
            Initializes a new instance of the EasingDoubleKeyFrame class with the specified Double value and key time.
            </summary>
            <param name="value">The initial Double value.</param>
            <param name="keyTime">The initial key time.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.EasingDoubleKeyFrame.#ctor(System.Double,Windows.UI.Xaml.Media.Animation.KeyTime,Windows.UI.Xaml.Media.Animation.EasingFunctionBase)">
            <summary>
            Initializes a new instance of the EasingDoubleKeyFrame class with the specified Double value, key time, and easing function.
            </summary>
            <param name="value">The initial Double value.</param>
            <param name="keyTime">The initial key time.</param>
            <param name="easingFunction">The easing function.</param>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.EasingDoubleKeyFrame.EasingFunction">
            <summary>
            Gets or sets the easing function applied to the key frame.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.EasingFunctionBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.EasingFunctionBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.EasingFunctionBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.EntranceThemeTransition">
            <summary>
            EntranceThemeTransition : Based on WinRT EntranceThemeTransition
            (https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.entrancethemetransition.Aspx)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeySpline.#ctor">
            <summary>
            Initializes a new instance of the KeySpline class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeySpline.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the KeySpline class with the specified coordinates for the control points.
            </summary>
            <param name="x1">The x-coordinate for the ControlPoint1 of the KeySpline.</param>
            <param name="y1">The y-coordinate for the ControlPoint1 of the KeySpline.</param>
            <param name="x2">The x-coordinate for the ControlPoint2 of the KeySpline.</param>
            <param name="y2">The y-coordinate for the ControlPoint2 of the KeySpline.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeySpline.#ctor(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Initializes a new instance of the KeySpline class with the specified control points.
            </summary>
            <param name="controlPoint1">The control point for the ControlPoint1 of the KeySpline.</param>
            <param name="controlPoint2">The control point for the ControlPoint2 of the KeySpline.</param>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.KeySpline.ControlPoint1">
            <summary>
            The Bezier curve's first control point. The point's X and Y values must each be between 0 and 1, inclusive. The default value is (0,0).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.KeySpline.ControlPoint2">
            <summary>
            The Bezier curve's second control point. The point's X and Y values must each be between 0 and 1, inclusive. The default value is (1,1).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeySpline.GetSplineProgress(System.Double)">
            <summary>
            Calculates spline progress from a linear progress.
            </summary>
            <param name="linearProgress">the linear progress</param>
            <returns>the spline progress</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeySpline.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeySpline.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeySpline.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.LinearDoubleKeyFrame.#ctor">
            <summary>
            Initializes a new instance of the LinearDoubleKeyFrame class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.LinearDoubleKeyFrame.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the LinearDoubleKeyFrame class with the specified ending value.
            </summary>
            <param name="value">Ending value (also known as "target value") for the key frame.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.LinearDoubleKeyFrame.#ctor(System.Double,Windows.UI.Xaml.Media.Animation.KeyTime)">
            <summary>
            Initializes a new instance of the LinearDoubleKeyFrame class with the specified ending value and key time.
            </summary>
            <param name="value">Ending value (also known as "target value") for the key frame.</param>
            <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFramesProperty">
            <remarks>
            This property is not exposed as a DP in UWP, but it is required
            to be one for the DataContext/TemplatedParent to flow properly.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.Reset">
            <summary>
            Brings the Timeline to its initial state
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.Fill">
            <summary>
            Fills the animation: the final frame is shown and left visible
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.Replay">
            <summary>
            Replays the Timeline
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.Dispose(System.Boolean)">
            <summary>
            Destroys the animation
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ObjectKeyFrame.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ObjectKeyFrame.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ObjectKeyFrame.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.PointKeyFrame.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.PointKeyFrame.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.PointKeyFrame.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.SplineDoubleKeyFrame.#ctor">
            <summary>
            Initializes a new instance of the SplineDoubleKeyFrame class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the SplineDoubleKeyFrame class with the specified ending value.
            </summary>
            <param name="value">Ending value (also known as "target value") for the key frame.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double,Windows.UI.Xaml.Media.Animation.KeyTime)">
            <summary>
            Initializes a new instance of the SplineDoubleKeyFrame class with the specified ending value and key time.
            </summary>
            <param name="value">Ending value (also known as "target value") for the key frame.</param>
            <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double,Windows.UI.Xaml.Media.Animation.KeyTime,Windows.UI.Xaml.Media.Animation.KeySpline)">
            <summary>
            Initializes a new instance of the SplineDoubleKeyFrame class with the specified ending value, key time, and KeySpline.
            </summary>
            <param name="value">Ending value (also known as "target value") for the key frame.</param>
            <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
            <param name="keySpline">KeySpline for the key frame. The KeySpline represents a Bezier curve which defines animation progress of the key frame.</param>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.SplineDoubleKeyFrame.KeySpline">
            <summary>
            The two control points that specify the cubic Bezier curve which defines the progress of the key frame.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Storyboard.SetTarget(Windows.UI.Xaml.Media.Animation.Timeline,Windows.UI.Xaml.Data.ElementNameSubject)">
            <summary>
            Explicitly sets the target using an ElementNameSubject, in case of lazy 
            evaluation of the target element.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Storyboard.DisposeChildRegistrations(Windows.UI.Xaml.Media.Animation.ITimeline)">
            <summary>
            Disposes event subscriptions for an <see cref="T:Windows.UI.Xaml.Media.Animation.ITimeline"/>
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Storyboard.Replay">
            <summary>
            Replay this animation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.Replay">
            <summary>
            Replay this animation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.InitializeAnimator">
            <summary>
            Initializes the animator and Events
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.Play">
            <summary>
            Creates a new animator and animates the view
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.SetAnimatorDuration">
            <summary>
            Sets the duration of the animator.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.OnEnd">
            <summary>
            Replays the Animation if required, Sets the final state, Raises the Completed event. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.OnAnimatorFailed(System.Object,System.EventArgs)">
            <summary>
            Stops the timeline when an animator failed
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.OnAnimatorCancelled(System.Object,System.EventArgs)">
            <summary>
            Sets the final state
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.ComputeFromValue">
            <summary>
            Calculates the From value of the animation
            For simplicity, animations are based on to and from values
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.ComputeToValue">
            <summary>
            Calculates the To value of the animation
            For simplicity, animations are based on to and from values
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1.Dispose">
            <summary>
            Dispose the Double animation.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.Timeline.State">
            <summary>
            An internally-used property which is essentially equivalent to <see cref="M:Windows.UI.Xaml.Media.Animation.Storyboard.GetCurrentState"/>, except that it 
            distinguishes <see cref="F:Windows.UI.Xaml.Media.Animation.Timeline.TimelineState.Active"/> from <see cref="F:Windows.UI.Xaml.Media.Animation.Timeline.TimelineState.Paused"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.GetCalculatedDuration">
            <summary>
            Compute duration of the Timeline. Sometimes it's define by components.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.Timeline.Target">
            <summary>
            The target on which the animated property exists, if set directly by <see cref="M:Windows.UI.Xaml.Media.Animation.Storyboard.SetTarget(Windows.UI.Xaml.Media.Animation.Timeline,Windows.UI.Xaml.DependencyObject)"/>. 
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.Timeline.PropertyInfo">
            <summary>
            Path to the target property being animated.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.GetTargetFromName">
            <summary>
            Returns Target Dependency Object using the Owner Framework Element
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.GetValue">
            <summary>
            Gets the value of the Target's Property
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.GetNonAnimatedValue">
            <summary>
            Gets the value of the Target's Property under the animated property of the dependency property
            value precedence system
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.SetValue(System.Object)">
            <summary>
            Sets The value of the Target's Property
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.ClearValue">
            <summary>
            Clears the animated value of the dependency property value precedence system
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.NeedsRepeat(System.Diagnostics.Stopwatch,System.Int32)">
            <summary>
            Checks if the Timeline will repeat.
            </summary>
            <returns><c>true</c>, Repeat needed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.IsTargetPropertyDependant">
            <summary>
            Checks if Target Property is Dependent, If the target property is dependent it should not run the animation unless EnableDependentAnimation is explicitly set.
             https://msdn.microsoft.com/en-uS/office/office365/jj819807.aspx#dependent
            </summary>
            <returns><c>true</c>, property is dependent, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Timeline.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.Transition">
            <summary>
            Transition : Based on WinRT Transition
            (https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.transition.Aspx)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.AttachToElement(Windows.UI.Xaml.IFrameworkElement)">
            <summary>
            Called from the Transitions Property of IFrameworkElement
            Attaches to the Loaded event
            </summary>
            <param name="element">Framework element to apply the transition to</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.DetachFromElement(Windows.UI.Xaml.IFrameworkElement)">
            <summary>
            Called from the Transitions Property of IFrameworkElement
            </summary>
            <param name="element">Framework element to stop applying the transition to</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.OnElementLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            When the Element is loaded - Start the Transition
            </summary>        
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.AttachToStoryboardAnimation(Windows.UI.Xaml.Media.Animation.Storyboard,Windows.UI.Xaml.IFrameworkElement,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Called from the ChildTransistions Property of a Panel
            Attaches to the Completed event - Keeps the starting RenderTansform on the FrameworkElement and restores it;
            </summary>
            <param name="storyboard">The Panel may run several Transitions on the same Storyboard</param>
            <param name="element">FrameworkElement to Animate</param>
            <param name="beginTime">Used for Staggering (default Timespan.Zero)</param>
            <param name="xOffset">Used to determine the x axis renderTransform translation. The previous position of the IFrameworkElement in a List (Only used in reposition)</param>
            <param name="yOffset">Used to determine the y axis renderTransform translation. The previous position of the IFrameworkElement in a List (Only used in reposition)</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.PopRenderTransform(Windows.UI.Xaml.IFrameworkElement)">
            <summary>
            Restores the Stored Transformation
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.PushRenderTransform(Windows.UI.Xaml.IFrameworkElement)">
            <summary>
            Stores the elements Transformation - to be restored in the future
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.Transition.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.TransitionCollection">
            <summary>
            TransitionCollection : Based on WinRT TransitionCollection
            (https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.transitioncollection.aspx)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.AnimatorFactory.Create``1(Windows.UI.Xaml.Media.Animation.Timeline,``0,``0)">
            <summary>
            Creates the actual animator instance
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.AnimatorFactory.CreateDouble(Windows.UI.Xaml.Media.Animation.Timeline,System.Double,System.Double)">
            <summary>
            Creates the actual animator instance
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.AnimatorFactory.CreateColor(Windows.UI.Xaml.Media.Animation.Timeline,Windows.UI.ColorOffset,Windows.UI.ColorOffset)">
            <summary>
            Creates the actual animator instance
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.AnimatorFactory.ToNativeScale(System.Double)">
            <summary>
            Ensures that scale value is without the android accepted values
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ColorOffsetEasingExtensions.Ease(Windows.UI.Xaml.Media.Animation.IEasingFunction,System.Int64,Windows.UI.ColorOffset,Windows.UI.ColorOffset,System.Int64)">
            <summary>
            Apply easing function on each component of a ColorOffset
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.Update">
            <inheritdoc />
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.AnimationEnd">
            <inheritdoc />
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.AnimationPause">
            <inheritdoc />
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.AnimationCancel">
            <inheritdoc />
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.AnimationFailed">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.AnimatedValue">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.CurrentPlayTime">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.StartDelay">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.Duration">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.SetDuration(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.SetEasingFunction(Windows.UI.Xaml.Media.Animation.IEasingFunction)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.Start">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.Pause">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.Resume">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.Cancel">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.EnableFrameReporting">
            <summary>
            Requests to implementors to start ticking
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.DisableFrameReporting">
            <summary>
            Requests to implementors to stop ticking
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.SetStartFrameDelay(System.Int64)">
            <summary>
            Request to implementors to delay the next frame by <paramref name="delayMs"/> milliseconds since we are witing for the <see cref="P:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.StartDelay"/>.
            </summary>
            <remarks>You can still report freams using the <see cref="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.OnFrame(System.Object,System.Object)"/>, they will be ignored.</remarks>
            <param name="delayMs">The delay to wait before</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.SetAnimationFramesInterval">
            <summary>
            Request to implementors to configure its interval between frame for animations
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.CPUBoundAnimator`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ImmediateAnimator`1.Cancel">
            <summary>
            Cancel this instance.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ImmediateAnimator`1.SetDuration(System.Int64)">
            <summary>
            Sets the duration.
            </summary>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.ImmediateAnimator`1.SetEasingFunction(Windows.UI.Xaml.Media.Animation.IEasingFunction)">
            <summary>
            Sets the duration.
            </summary>
            <param name="duration">Duration.</param>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.IValueAnimator">
            <summary>
            Copy of the Android ValueAnimator API.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.IValueAnimator.Update">
            <summary>
            Occurs when a frame is ready.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.IValueAnimator.AnimationEnd">
            <summary>
            Occurs when animation ends.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.IValueAnimator.AnimationPause">
            <summary>
            Occurs when the animation is paused.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.IValueAnimator.AnimationCancel">
            <summary>
            Occurs when the animation is cancelled.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.IValueAnimator.AnimationFailed">
            <summary>
            Occurs when the animation failed.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.IValueAnimator.AnimatedValue">
            <summary>
            Gets or sets the animated value. The setter is public because the Java version is public 
            </summary>
            <value>The animated value.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.IValueAnimator.CurrentPlayTime">
            <summary>
            Gets or sets the current play time (in milliseconds).
            </summary>
            <value>The current play time.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.IValueAnimator.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.IValueAnimator.StartDelay">
            <summary>
            Gets or sets the start delay (in milliseconds).
            </summary>
            <value>The start delay.</value>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.IValueAnimator.Duration">
            <summary>
            Gets the duration of the animation (in milliseconds)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.IValueAnimator.Start">
            <summary>
            Start animating.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.IValueAnimator.Pause">
            <summary>
            Pause this instance.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.IValueAnimator.Resume">
            <summary>
            Resume this animation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.IValueAnimator.Cancel">
            <summary>
            Cancel this instance.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.IValueAnimator.SetDuration(System.Int64)">
            <summary>
            Sets the duration (in milliseconds).
            </summary>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.IValueAnimator.SetEasingFunction(Windows.UI.Xaml.Media.Animation.IEasingFunction)">
            <summary>
            Sets the EasingFunction
            </summary>
            <param name="easingFunction"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NotSupportedAnimator.Cancel">
            <summary>
            Cancel this instance.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NotSupportedAnimator.Stop">
            <summary>
            Stop this instance.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NotSupportedAnimator.SetDuration(System.Int64)">
            <summary>
            Sets the duration.
            </summary>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NotSupportedAnimator.SetEasingFunction(Windows.UI.Xaml.Media.Animation.IEasingFunction)">
            <summary>
            Sets the duration.
            </summary>
            <param name="duration">Duration.</param>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.EasingMode">
            <summary>
            Different easing mode for easing functions.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.IAnimation`1">
            <summary>
            Contract for a <see cref="T:Windows.UI.Xaml.Media.Animation.Timeline"/> animation which is backed by <see cref="T:Windows.UI.Xaml.Media.Animation.Timeline.AnimationImplementation`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.IEasingFunction.Ease(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method is used to transform frames of an animation to have a certain effect. 
            </summary>
            <param name="currentTime">Can be seconds or frame number</param>
            <param name="startValue"></param>
            <param name="finalValue"></param>
            <param name="duration">Can be seconds or frame number</param>
            <returns>Transformed double value at current time for the selected ease function</returns>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Animation.ITimeline">
            <summary>
            This interface maps to public methods on <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard"/>, which are implemented internally in Uno on types that inherit 
            from <see cref="T:Windows.UI.Xaml.Media.Animation.Timeline"/> and called from <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeyFrameComparer.Compare(Windows.UI.Xaml.Media.Animation.IKeyFrame,Windows.UI.Xaml.Media.Animation.IKeyFrame)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeyFrameComparer`1.Compare(Windows.UI.Xaml.Media.Animation.IKeyFrame{`0},Windows.UI.Xaml.Media.Animation.IKeyFrame{`0})">
            <inheritdoc />
        </member>
        <member name="F:Windows.UI.Xaml.Media.Animation.KeyFrameScheduler`1.EndReason.EndOfFrames">
            <summary>
            Reached the last frame and wait for the configured duration
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.Animation.KeyFrameScheduler`1.EndReason.Stopped">
            <summary>
            Stopped by the user
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.Animation.KeyFrameScheduler`1.EndReason.Disposed">
            <summary>
            Aborted
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeyFrameScheduler`1.GetNextFrameDueIn">
            <summary>
            Gets the delay to wait before moving to the next frame
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.KeyFrameScheduler`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.LinearEase.Ease(System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.Dispose">
            <inheritdoc />
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.Update">
            <inheritdoc />
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.AnimationPause">
            <inheritdoc />
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.AnimationEnd">
            <inheritdoc />
        </member>
        <member name="E:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.AnimationCancel">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.AnimatedValue">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.CurrentPlayTime">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.StartDelay">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.Duration">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.Start">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.Pause">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.Resume">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.Cancel">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.SetDuration(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Animation.NativeValueAnimatorAdapter.SetEasingFunction(Windows.UI.Xaml.Media.Animation.IEasingFunction)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Imaging.BitmapSource.SetSource(System.IO.Stream)">
            <summary>
            Helper for Uno... not part of UWP contract
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Imaging.BitmapSource.SetSourceAsync(System.IO.Stream)">
            <summary>
            Helper for Uno... not part of UWP contract
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Imaging.DownloadProgressEventArgs.Progress">
            <summary>
            Gets download progress as a value that is between 0 and 100.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Imaging.RenderTargetBitmap.IsSourceReady">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Imaging.RenderTargetBitmap.TryOpenSourceSync(System.Nullable{System.Int32},System.Nullable{System.Int32},Android.Graphics.Bitmap@)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Media3D.Transform3D.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Media3D.Transform3D.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Media3D.Transform3D.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.AcrylicBrush">
            <summary>
            Paints an area with a semi-transparent material that uses multiple
            effects including blur and a noise texture.
            </summary>
            <remarks>Currently uses blurring only in Uno.</remarks>
            <summary>
            Renderer to update all frames with better shadows matching material design standards.
            </summary>	
        </member>
        <member name="M:Windows.UI.Xaml.Media.AcrylicBrush.#ctor">
            <summary>
            Initializes a new instance of the AcrylicBrush class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.TintColor">
            <summary>
            Gets or sets the color tint for the semi-transparent acrylic material.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.TintOpacity">
            <summary>
            Gets or sets the degree of opacity of the color tint.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.TintLuminosityOpacity">
            <summary>
            Gets or sets the brightness amount between the TintColor
            and the underlying pixels behind the Acrylic surface.
            </summary>
            <remarks>Currently does not have effect in Uno.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.BackgroundSource">
            <summary>
            Gets or sets a value that specifies whether the brush samples
            from the app content or from the content behind the app window.
            </summary>
            <remarks>HostBackdrop currently supported on macOS only.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.AlwaysUseFallback">
            <summary>
            Gets or sets a value that specifies whether the brush
            is forced to the solid fallback color.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.TintColorProperty">
            <summary>
            Identifies the TintColor dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.TintOpacityProperty">
            <summary>
            Identifies the TintOpacity dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.TintLuminosityOpacityProperty">
            <summary>
            Identifies the TintLuminosityOpacity dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.BackgroundSourceProperty">
            <summary>
            Identifies the BackgroundSource dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.AlwaysUseFallbackProperty">
            <summary>
            Identifies the AlwaysUseFallback dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.TintColorWithTintOpacity">
            <summary>
            Returns the tint color mixed with tint opacity value.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.AcrylicBrush.GetPaintInner(Windows.Foundation.Rect)">
            <summary>
            Returns the fallback solid color brush.
            </summary>
            <param name="destinationRect">Destination rect.</param>
            <returns></returns>
        </member>
        <member name="T:Windows.UI.Xaml.Media.AcrylicBrush.AcrylicState">
            <summary>
            Wraps the acrylic brush metadata for a single view.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.AcrylicBrush.ThrowStopExceptionOnDraw">
            <summary>
            If set to <see langword="true"/>, the rendering result could be better (clearer blur not mixing front elements).
            However due to a bug in the Xamarin framework https://github.com/xamarin/xamarin-android/issues/4548, debugging is impossible with this mode (causes SIGSEGV).
            A suggestion would be to set it to false for debug, and to true for releases.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.AcrylicBrush.SupportsBlur">
            <summary>
            Checks if blurring is available on the current
            device.
            </summary>
            <returns>Value indicating whether blur is available.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Brush.GetFillPaint(Windows.Foundation.Rect)">
            <summary>
            Return a paint with Fill style
            </summary>
            <param name="destinationRect">RectF that will be drawn into - used by ImageBrush</param>
            <returns>A Paint with Fill style</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Brush.GetStrokePaint(Windows.Foundation.Rect)">
            <summary>
            Return a paint with Stroke style
            </summary>
            <param name="destinationRect">RectF that will be drawn into - used by ImageBrush</param>
            <returns>A Paint with Stroke style</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Brush.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Brush.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Brush.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Brush.CreateOpacityProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Media.Brush.OpacityProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Brush.CreateTransformProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Media.Brush.TransformProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Brush.CreateRelativeTransformProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Media.Brush.RelativeTransformProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.CacheMode.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.CacheMode.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.CacheMode.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.CompositeTransform">
            <summary>
            CompositeTransform :  Based on the WinRT Composite transform
            https://searchcode.com/codesearch/view/10522146/
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.GeneralTransform.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.GeneralTransform.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.GeneralTransform.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Geometry.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Geometry.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Geometry.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.GradientStop.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.GradientStop.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.GradientStop.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageBrush.GetBitmap(System.Threading.CancellationToken,Windows.Foundation.Rect,Android.Graphics.Path)">
            <summary>
            Loads the ImageBrush's source bitmap and transforms it based on target bounds and shape, Stretch mode, and RelativeTransform.
            </summary>
            <param name="drawRect">The destination bounds</param>
            <param name="maskingPath">An optional path to clip the bitmap by (eg an ellipse)</param>
            <returns>A bitmap transformed based on target bounds and shape, Stretch mode, and RelativeTransform</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageBrush.DrawBackground(Android.Graphics.Canvas,Windows.Foundation.Rect,Android.Graphics.Path)">
            <summary>
            Transforms ImageBrush's bitmap based on target bounds and shape, Stretch mode, and RelativeTransform, and draws it to the supplied canvas.
            </summary>
            <param name="destinationCanvas">The canvas to draw the final image on</param>
            <param name="drawRect">The destination bounds</param>
            <param name="maskingPath">An optional path to clip the bitmap by (eg an ellipse)</param>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageBrush.TryGetBitmap(Windows.Foundation.Rect,System.Action,Android.Graphics.Path)">
            <summary>
            Synchronously tries to return a bitmap for this ImageBrush. If the backing image is not available,
            a fetch will be scheduled and the onImageLoaded callback will be called once the backing image is ready.
            </summary>
            <param name="drawRect">The destination bounds</param>
            <param name="onImageLoaded">A callback that will be called when the backing image changes (eg, to redraw your view)</param>
            <param name="maskingPath">An optional path to clip the bitmap by (eg an ellipse)</param>
            <returns>A bitmap transformed based on target bounds and shape, Stretch mode, and RelativeTransform</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageBrush.TryGetTransformedBitmap(Windows.Foundation.Rect,Android.Graphics.Path)">
            <summary>
            Transforms ImageBrush's source bitmap based on target bounds and shape, Stretch mode, and RelativeTransform.
            </summary>
            <param name="drawRect">The destination bounds</param>
            <param name="maskingPath">An optional path to clip the bitmap by (eg an ellipse)</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageBrush.GenerateMatrix(Windows.Foundation.Rect,Android.Graphics.Bitmap)">
            <summary>
            Create matrix to transform image based on relative dimensions of bitmap and drawRect, Stretch mode, and RelativeTransform
            </summary>
            <param name="drawRect"></param>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="F:Windows.UI.Xaml.Media.ImageSource.DefaultDownloader">
            <summary>
            The default downloader instance used by all the new instances of <see cref="T:Windows.UI.Xaml.Media.ImageSource"/>.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.ImageSource.Downloader">
            <summary>
            The image downloader for the current instance.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.InitializeDownloader">
            <summary>
            Initializes the Uno image downloader.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.Download(System.Threading.CancellationToken,System.Uri)">
            <summary>
            Downloads an image from the provided Uri.
            </summary>
            <returns>n Uri containing a local path for the downloaded image.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.SetImageLoader">
            <summary>
            Set ImageLoader to be used for this case.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.ImageSource.ImageLoaderHandler">
            <summary>
            Defines an asynchronous image loader handler.
            </summary>
            <param name="ct">A cancellation token</param>
            <param name="uri">The image uri</param>
            <param name="targetSize">An optional target decoding size</param>
            <returns>A Bitmap instance</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Media.ImageSource.DefaultImageLoader">
            <summary>
            Provides a optional external image loader.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.ImageSource.ImageLoader">
            <summary>
            An optional image loader for this BindableImageView instance.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.ImageSource.ResourceString">
            <summary>
            The resource path for this ImageSource, if any. Useful for debugging purposes; internally the ResourceId is cached and used when fetching the resource.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.ImageSource.IsOpened">
            <summary>
            Indicates that this source has already been opened (So TryOpenSync will return true!)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.ImageSource.IsSourceReady">
            <summary>
            Indicates that this ImageSource has enough information to be opened
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.CalculateInSampleSize(Android.Graphics.BitmapFactory.Options,System.Int32,System.Int32)">
            <summary>
            Source of code taken from https://developer.android.com/training/displaying-bitmaps/load-bitmap.html
            with small adjustment
            </summary>
            <param name="options"></param>
            <param name="reqWidth"></param>
            <param name="reqHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.FetchResourceWithDownsampling(System.Threading.CancellationToken,System.Int32,System.Nullable{System.Drawing.Size})">
            <summary>
            Asynchronously retrieves an image resource, scaled to the target dimensions.
            </summary>
            <param name="ct"></param>
            <param name="resourceId"></param>
            <param name="targetSize"></param>
            <returns></returns>
        </member>
        <member name="P:Windows.UI.Xaml.Media.ImageSource.Drawables">
            <summary>
            Type used as the source of Drawables.
            Now available outside in Uno library with <see cref="T:Uno.UI.DrawableHelper"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.FindResourceId(System.String)">
            <summary>
            Returns the Id of the bundled image.
            Now available outside in Uno library with <see cref="T:Uno.UI.DrawableHelper"/>.
            </summary>
            <param name="imageName">Name of the image</param>
            <returns>Resource's id</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.ImageSource.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.PathFigure.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.PathFigure.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.PathFigure.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.PathSegment.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.PathSegment.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.PathSegment.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Projection.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Projection.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Projection.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.RotateTransform">
            <summary>
            RotateTransform :  Based on the WinRT Rotate transform
            https://msdn.microsoft.com/en-us/library/system.windows.media.rotatetransform(v=vs.110).aspx
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.ScaleTransform">
            <summary>
            ScaleTransform :  Based on the WinRT ScaleTransform
            https://msdn.microsoft.com/en-us/library/system.windows.media.scaletransform%28v=vs.110%29.aspx
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Shadow.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Shadow.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Shadow.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.SkewTransform">
            <summary>
            ScaleTransform :  Based on the WinRT ScaleTransform
            https://msdn.microsoft.com/en-us/library/system.windows.media.skewtransform(v=vs.110).aspx
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.SolidColorBrush.ColorWithOpacity">
            <summary>
            Blends the Color set on the SolidColorBrush with its Opacity. Should generally be used for rendering rather than the Color property itself.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.SolidColorBrush.UpdateColorWithOpacity(Windows.UI.Color)">
            <remarks>
            This method is required for performance. Creating a native Color 
            requires a round-trip with Objective-C, so updating this value only when opacity
            and color changes is more efficient.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Media.TimelineMarker.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.TimelineMarker.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.TimelineMarker.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Transform">
            <summary>
            Transform :  Based on the WinRT Transform
            
            https://msdn.microsoft.com/en-us/library/system.windows.media.transform(v=vs.110).aspx
            </summary>
            <summary>
            Transform: Android part
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Media.Transform.Changed">
            <summary>
            Notifies that a value of this transform changed (usually this means that the <see cref="T:Windows.UI.Xaml.Media.Matrix"/> has been updated).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Transform.MatrixCore">
            <summary>
            The matrix used by this transformation
            </summary>
            <remarks>This matrix does not include any center point</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Transform.ToMatrix(Windows.Foundation.Point,Windows.Foundation.Size)">
            <summary>
            Converts the transform to a standard transform matrix
            </summary>
            <param name="relativeOrigin">The origin of the transform relative to the <paramref name="viewSize"/>.</param>
            <param name="viewSize">The size of the view to transform, in virtual pixels</param>
            <returns>An affine matrix of the transformation</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Media.Transform.ToMatrix(Windows.Foundation.Point)">
            <summary>
            Converts the transform to a standard transform matrix
            </summary>
            <param name="absoluteOrigin">The absolute origin of the transform, in virtual pixels.</param>
            <returns>An affine matrix of the transformation</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Media.Transform.InverseCore">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Transform.TryTransformCore(Windows.Foundation.Point,Windows.Foundation.Point@)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Media.Transform.TransformBoundsCore(Windows.Foundation.Rect)">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Media.TransformGroup.ChildrenProperty">
            <summary>
            Backing dependency property for the <see cref="P:Windows.UI.Xaml.Media.TransformGroup.Children"/>
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.TranslateTransform">
            <summary>
            TranslateTransform :  Based on the WinRT TranslateTransform
            https://msdn.microsoft.com/en-us/library/system.windows.media.translatetransform(v=vs.110).aspx
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.VisualTreeHelper.AdaptNative(Android.Views.View)">
             <summary>
             Adapts a native view by wrapping it in a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> container so that it can be added to the managed visual tree.
             </summary>
             <remarks>
             This method is present to support adding native view types on Android, iOS and MacOS to Uno's visual tree.
            
             Calling it with a type that's already a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> will throw an <see cref="T:System.InvalidOperationException"/>.
             If there's a possibility that the wrapped type may be a <see cref="T:Windows.UI.Xaml.FrameworkElement"/>, use <see cref="M:Windows.UI.Xaml.Media.VisualTreeHelper.TryAdaptNative(Android.Views.View)"/>
             instead.
             </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Media.VisualTreeHelper.TryAdaptNative(Android.Views.View)">
             <summary>
             Adapts a native view by wrapping it in a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> container so that it can be added to the managed visual tree.
            
             This method is safe to call for any view. If <paramref name="view"/> is a <see cref="T:Windows.UI.Xaml.FrameworkElement"/>, it will simply be returned unmodified.
             </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.VisualTreeHelper.GetManagedVisualChildren(Android.Views.ViewGroup)">
            <summary>
            Gets all immediate UIElement children of this <paramref name="view"/>. If any immediate subviews are native, it will descend into
            them depth-first until it finds a UIElement, and return those UIElements.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.VisualTreeHelper.Branch.EnumerateLeafToRoot">
             <summary>
            
             </summary>
             <remarks>This method will pass through native element but will enumerate only UIElements</remarks>
             <returns></returns>
        </member>
        <member name="P:Windows.UI.Xaml.Media.XamlCompositionBrushBase.FallbackColorWithOpacity">
            <summary>
            Returns the fallback color mixed with opacity value.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.XamlLight.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.XamlLight.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.XamlLight.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.AlignmentX">
            <summary>
            Describes how content is positioned horizontally in a container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.AlignmentX.Left">
            <summary>
            The contents align toward the left of the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.AlignmentX.Center">
            <summary>
            The contents align toward the center of the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.AlignmentX.Right">
            <summary>
            The contents align toward the right of the container.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.AlignmentY">
            <summary>
            Describes how content is positioned vertically in a container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.AlignmentY.Top">
            <summary>
            The contents align toward the upper edge of the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.AlignmentY.Center">
            <summary>
            The contents align toward the center of the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.AlignmentY.Bottom">
            <summary>
            The contents align toward the lower edge of the container.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Media.IImageSourceDownloader">
            <summary>
            Defines an interface for <see cref="T:Windows.UI.Xaml.Media.ImageSource"/> to enable image downloads.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Media.IImageSourceDownloader.Download(System.Threading.CancellationToken,System.Uri)">
            <summary>
            Downloads a image and returns a valid local file system Uri.
            </summary>
            <param name="ct">An cancellation token</param>
            <param name="uri">A valid uri for the image</param>
            <returns>A valid local file system Uri.</returns>
        </member>
        <member name="T:Windows.UI.Xaml.Media.Stretch">
            <summary>Describes how content is resized to fill its allocated space.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.Stretch.None">
            <summary>The content preserves its original size.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.Stretch.Fill">
            <summary>The content is resized to fill the destination dimensions. The aspect ratio is not preserved.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.Stretch.Uniform">
            <summary>The content is resized to fit in the destination dimensions while it preserves its native aspect ratio.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Media.Stretch.UniformToFill">
            <summary>
            The content is resized to fill the destination dimensions while it preserves its native aspect ratio. 
            If the aspect ratio of the destination rectangle differs from the source, the source 
            content is clipped to fit in the destination dimensions.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.AutomationPeer.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.AutomationPeer.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.AutomationPeer.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.AutomationPeerAnnotation.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer.GetChildrenCore">
            <inheritdoc />
        </member>
        <member name="T:Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer">
            <summary>
            Exposes RadioButton types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer.#ctor(Windows.UI.Xaml.Controls.RadioButton)">
            <summary>
            Initializes a new instance of the RadioButtonAutomationPeer class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer.Select">
            <summary>
            Clears any existing selection and then selects the current element.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer.AddToSelection">
            <summary>
            Adds the current element to the collection of selected items.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer.RemoveFromSelection">
            <summary>
            Removes the current element from the collection of selected items.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer.IsSelected">
            <summary>
            Gets a value that indicates whether an item is selected.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer.SelectionContainer">
            <summary>
            Gets the UI automation provider that implements ISelectionProvider and acts as the container for the calling object.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.ToggleButtonAutomationPeer.ConvertToToggleState(System.Object)">
            <summary>
            Convert the Boolean in Inspectable to the ToggleState Enum, if the Inspectable is null
            that corresponds to Indeterminate state.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Automation.Peers.ToggleSwitchAutomationPeer">
            <summary>
            Exposes ToggleSwitch types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.ToggleSwitchAutomationPeer.#ctor(Windows.UI.Xaml.Controls.ToggleSwitch)">
            <summary>
            Initializes a new instance of the ToggleSwitchAutomationPeer class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:Windows.UI.Xaml.Automation.Peers.ToggleSwitchAutomationPeer.ToggleState">
            <summary>
            Gets the toggle state of the control.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Peers.ToggleSwitchAutomationPeer.Toggle">
            <summary>
            Cycles through the toggle states of a control.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider">
            <summary>
            Exposes methods and properties to support access by a Microsoft UI Automation client to individual,
            selectable child controls of containers that implement ISelectionProvider. Implement this interface
            in order to support the capabilities that an automation client requests with a GetPattern
            call and PatternInterface.SelectionItem.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.IsSelected">
            <summary>
            Gets a value that indicates whether an item is selected.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements ISelectionProvider and acts
            as the container for the calling object.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.AddToSelection">
            <summary>
            Adds the current element to the collection of selected items.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.RemoveFromSelection">
            <summary>
            Removes the current element from the collection of selected items.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.Provider.ISelectionItemProvider.Select">
            <summary>
            Clears any existing selection and then selects the current element.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.AutomationAnnotation.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.AutomationAnnotation.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Automation.AutomationAnnotation.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Automation.AutomationConfiguration">
            <summary>
            Provides static properties that are used to configure the behavior of the <seealso cref="T:Windows.UI.Xaml.Automation.AutomationProperties"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Automation.AutomationConfiguration.IsAccessibilityEnabled">
            <summary>
            Indicates if Accessibility features, such as VoiceOver/TalkBack, are enabled.
            True by default, set this to False if you need to override certain Accessibility features for things like UI Automation
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Automation.ExpandCollapseState">
            <summary>
            Contains values that specify the ExpandCollapseState of a UI Automation element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Automation.ExpandCollapseState.Collapsed">
            <summary>
            No child nodes, controls, or content of the UI Automation element are displayed.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Automation.ExpandCollapseState.Expanded">
            <summary>
            All child nodes, controls or content of the UI Automation element are displayed.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Automation.ExpandCollapseState.PartiallyExpanded">
            <summary>
            Some, but not all, child nodes, controls, or content of the UI Automation element are displayed.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Automation.ExpandCollapseState.LeafNode">
            <summary>
            The UI Automation element has no child nodes, controls, or content to display.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapCamera.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapCamera.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapCamera.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapCustomExperience.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapCustomExperience.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapCustomExperience.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapElement.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapElement.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapElement.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapInputEventArgs.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapInputEventArgs.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapInputEventArgs.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapItemsControl.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapItemsControl.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapItemsControl.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapLayer.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapLayer.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapLayer.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapModel3D.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapModel3D.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapModel3D.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapRouteView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapRouteView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapRouteView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapScene.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapScene.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapScene.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapStyleSheet.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapStyleSheet.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapStyleSheet.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapTileDataSource.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapTileDataSource.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapTileDataSource.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapTileSource.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapTileSource.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.MapTileSource.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.StreetsidePanorama.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.StreetsidePanorama.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Maps.StreetsidePanorama.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Maps.IUnoMapControl">
            <summary>
            A set of Uno.UI specific APIs to be used by presenters
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.ButtonBase._canExecuteChangedHandler">
            <summary>
            Event registration token corresponding to subscription for ICommand.CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnClickModeChanged(Windows.UI.Xaml.Controls.ClickMode)">
            <summary>
            Validate the ClickMode property when its value is changed.
            </summary>
            <param name="newClickMode">New click mode.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnIsPressedChanged">
            <summary>
            Update the visual states when the IsPressed property is changed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnVisibilityChanged">
            <summary>
            Update the visual states when the Visibility property is changed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnIsEnabledChanged(Windows.UI.Xaml.IsEnabledChangedEventArgs)">
            <summary>
            Called when the IsEnabled property changes.
            </summary>
            <param name="e">Enabled changed event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.EnterImpl">
            <summary>
            Called when the element enters the tree. Attaches event handler to Command.CanExecuteChanged.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.LeaveImpl">
            <summary>
            Called when the element leaves the tree. Detaches event handler from Command.CanExecuteChanged.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.ClearStateFlags">
            <summary>
            Clear flags relating to the visual state.  Called when IsEnabled is set to false
            or when Visibility is set to Hidden or Collapsed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnCommandChanged(System.Object,System.Object)">
            <summary>
            Called when ButtonBase.Command property changes.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.UpdateCanExecute">
            <summary>
            Coerces button enabled state with CanExecute state of the command.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.ExecuteCommand">
            <summary>
            Executes ButtonBase.Command.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Loaded event handler.
            </summary>
            <param name="sender">Sender.</param>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnGotFocus(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            GotFocus event handler.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.ReleasePointerCaptureInternal(Windows.UI.Xaml.Input.Pointer)">
            <summary>
            Release pointer capture if we already had it.
            </summary>
            <param name="pointer">Pointer or null.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnLostFocus(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            LostFocus event handler.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            KeyDown event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnKeyDownInternal(Windows.System.VirtualKey)">
            <summary>
            Handles the KeyDown event for ButtonBase.
            Note: ENTER previously did not use ClickMode and was processed on first
            keydown. However keydown events are sent synchronously, so if the button was
            clicked using the ENTER key, the click handler could not execute code that
            caused reentrancy, like displaying a dialog. Such handlers are common. To
            solve this, ENTER was changed to use ClickMode. The default ClickMode is
            ClickMode.Release, and keyup events are sent asynchronously, so in the
            default case, click handlers can display dialogs or execute other code that
            causes reentrancy. If the ClickMode is changed by the app to ClickMode.Press,
            the click handler will not be able to execute code that causes reentrancy.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnKeyUp(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            KeyUp event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnKeyUpInternal(Windows.System.VirtualKey)">
            <summary>
            Handle key up events.
            </summary>
            <param name="key">Key.</param>
            <returns>Handled?</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.IsValidPointerPosition">
            <summary>
            Determine if the pointer is above the button based on its last known position.
            </summary>
            <returns>Is valid?</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnPointerMoved(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            PointerMoved event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.CapturePointerInternal(Windows.UI.Xaml.Input.Pointer)">
            <summary>
            Capture the pointer.
            </summary>
            <param name="pointer">Pointer.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            PointerPressed event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnPointerReleased(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnPointerCaptureLost(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            PointerCaptureLost event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnApplyTemplate">
            <summary>
            Apply a template to the ButtonBase.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.OnClick">
            <summary>
            Raises the Click routed event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.GetUIControl">
            <summary>
            Gets the native UI Control, if any.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ButtonBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.ContainersCache.ItemFromContainer(Windows.UI.Xaml.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.ContainersCache.ContainerFromItem(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.ContainersCache.IndexFromContainer(Windows.UI.Xaml.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.ContainersCache.ContainerFromIndex(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.ContainersCache.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.ContainersCache.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.ViewportWidth">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.ViewportHeight">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.Windows#UI#Xaml#Controls#ILayoutDataInfoProvider#GetTotalItemCount">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.Windows#UI#Xaml#Controls#ILayoutDataInfoProvider#GetTotalGroupCount">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.IsViewHit">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.MeasureOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.MinViewWidth">
            <summary>Gets the minimum width of the view.</summary>
            <returns>The minimum width of the view.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.HeaderText">
            <summary>Gets the text of the header.</summary>
            <returns>The text of the header.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.WeekDay1">
            <summary>Gets the first day of the week.</summary>
            <returns>The first day of the week.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.WeekDay2">
            <summary>Gets the second day of the week.</summary>
            <returns>The second day of the week.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.WeekDay3">
            <summary>Gets the third day of the week.</summary>
            <returns>The third day of the week.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.WeekDay4">
            <summary>Gets the fourth day of the week.</summary>
            <returns>The fourth day of the week.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.WeekDay5">
            <summary>Gets the fifth day of the week.</summary>
            <returns>The fifth day of the week.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.WeekDay6">
            <summary>Gets the sixth day of the week.</summary>
            <returns>The sixth day of the week.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.WeekDay7">
            <summary>Gets the seventh day of the week.</summary>
            <returns>The seventh day of the week.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.HasMoreContentAfter">
            <summary>Gets a value that indicates whether the CalendarView has more content after the displayed content.</summary>
            <returns>**true** if the CalendarView has more content after the displayed content; otherwise, **false**.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.HasMoreContentBefore">
            <summary>Gets a value that indicates whether the CalendarView has more content before the displayed content.</summary>
            <returns>**true** if the CalendarView has more content after the displayed content; otherwise, **false**.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.HasMoreViews">
            <summary>Gets a value that indicates whether the CalendarView has more views (like year or decade) that can be shown.</summary>
            <returns>**true** if the CalendarView has more views (like year or decade) that can be shown; otherwise, **false**.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.ClipRect">
            <summary>Gets the rectangle used to clip the CalendarView.</summary>
            <returns>The rectangle used to clip the CalendarView.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.CenterX">
            <summary>Gets the X coordinate of the CalendarView 's center point.</summary>
            <returns>The X coordinate of the CalendarView 's center point.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.CenterY">
            <summary>Gets the Y coordinate of the CalendarView 's center point.</summary>
            <returns>The Y coordinate of the CalendarView 's center point.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CarouselPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ColorPickerSlider.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ColorSpectrum.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs.TotalHorizontalChange">
            <summary>
            Internal helper property that contains the total horizontal change since the DragStarted event
            </summary>
            <remarks>Be aware that this property will be filled only when the args are built internally by Uno</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs.TotalVerticalChange">
            <summary>
            Internal helper property that contains the total vertical change since the DragStarted event
            </summary>
            <remarks>Be aware that this property will be filled only when the args are built internally by Uno</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs.TotalHorizontalChange">
            <summary>
            Internal helper property that contains the total horizontal change since the DragStarted event
            </summary>
            <remarks>Be aware that this property will be filled only when the args are built internally by Uno</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs.TotalVerticalChange">
            <summary>
            Internal helper property that contains the total vertical change since the DragStarted event
            </summary>
            <remarks>Be aware that this property will be filled only when the args are built internally by Uno</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.UseNativePopup">
            <summary>
            Controls the appeareance of <see cref="T:Windows.UI.Xaml.Controls.MenuFlyout"/>, when true the native popups and appearance
            is used, otherwise the UWP appeareance is used. The default value is provided by <see cref="P:Uno.UI.FeatureConfiguration.Style.UseUWPDefaultStyles"/>.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.Placement">
            <summary>
            Preferred placement of the flyout.
            </summary>
            <remarks>
            If there's not enough place, the following logic will be used:
            https://docs.microsoft.com/en-us/previous-versions/windows/apps/dn308515(v=win.10)#placing-a-flyout
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.LightDismissOverlayBackground">
            <summary>
            Sets the light-dismiss colour, if the overlay is enabled. The external API for modifying this is to override the PopupLightDismissOverlayBackground, etc, static resource values.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.AllowFocusWhenDisabled">
            <summary>
            Gets or sets whether a disabled control can receive focus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.AllowFocusWhenDisabledProperty">
            <summary>
            Identifies the AllowFocusWhenDisabled  dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.AllowFocusOnInteraction">
            <summary>
            Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.AllowFocusOnInteractionProperty">
            <summary>
            Identifies for the AllowFocusOnInteraction dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.PopupPositionInTarget">
            <summary>
            Defines an optional position of the popup in the <see cref="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.Target"/> element.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.CreateAllowFocusWhenDisabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.AllowFocusWhenDisabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.CreateAllowFocusOnInteractionProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Primitives.FlyoutBase.AllowFocusOnInteractionProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.LoopingSelector.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.LoopingSelectorItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.LoopingSelectorPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PivotHeaderItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PivotHeaderPanel.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PivotHeaderPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PivotPanel.MeasureOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PivotPanel.ArrangeOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PivotPanel.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PivotPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.Popup.CustomLayouter">
            <summary>
            Defines a custom layouter which overrides the default placement logic of the <see cref="P:Windows.UI.Xaml.Controls.Primitives.Popup.PopupPanel"/>
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Popup.MeasureOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Popup.ArrangeOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Primitives.Popup.IDynamicPopupLayouter">
            <summary>
            A layouter responsible to layout the content of a popup at the right place
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Popup.IDynamicPopupLayouter.Measure(Windows.Foundation.Size,Windows.Foundation.Size)">
            <summary>
            Measure the content of the popup
            </summary>
            <param name="available">The available size to place to render the popup. This is expected to be the screen size.</param>
            <param name="visibleSize">The size of the visible bounds of the window. This is expected to be AtMost the available.</param>
            <returns>The desired size to render the content</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Popup.IDynamicPopupLayouter.Arrange(Windows.Foundation.Size,Windows.Foundation.Rect,Windows.Foundation.Size,System.Nullable{Windows.Foundation.Point})">
            <summary>
            Render the content of the popup at its final location
            </summary>
            <param name="finalSize">The final size available to render the view. This is expected to be the screen size.</param>
            <param name="visibleBounds">The frame of the visible bounds of the window. This is expected to be AtMost the finalSize.</param>
            <param name="desiredSize">The size at which the content expect to be rendered. This is the result of the last <see cref="M:Windows.UI.Xaml.Controls.Primitives.Popup.IDynamicPopupLayouter.Measure(Windows.Foundation.Size,Windows.Foundation.Size)"/>.</param>
            <param name="upperLeftOffset">Coordinate system adjustment, applied to the resulting frame computed from the popup content</param>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.Popup.Anchor">
            <summary>
            Overrides the default location of this popup (cf. Remarks)
            </summary>
            <remarks>
            When a Popup is opened, the <see cref="P:Windows.UI.Xaml.Controls.Primitives.Popup.PopupPanel"/> will top/left aligned the <see cref="P:Windows.UI.Xaml.Controls.Primitives.Popup.Child"/> to the
            current location of the given popup in the visual tree.
            However when an Anchor is set on a popup, the Child will instead be top/left aligned to the location of this Anchor.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.Popup.IsTabStopDefaultValue">
            <summary>
            In WinUI, Popup has IsTabStop set to true by default.
            UWP does not include IsTabStop, but Popup is still focusable.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.Popup.ShouldShowLightDismissOverlay">
            <summary>
            Returns true if the popup should show the light-dismiss overlay with its current configuration, false if not
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.Popup.PopupPanel">
            <summary>
            The <see cref="P:Windows.UI.Xaml.Controls.Primitives.Popup.PopupPanel"/> which host this Popup
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Popup.GetPanelBackground">
            <summary>
            Get background Brush to use for the PopupPanel.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.Popup.LightDismissOverlayBackground">
            <summary>
            Sets the light-dismiss colour, if the overlay is enabled. The external API for modifying this is to override the PopupLightDismissOverlayBackground, etc, static resource values.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Popup.DisableFocus">
            <summary>
            Prevent the popup from stealing focus from views in the main window.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Popup.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings">
            <summary>
            Provides calculated values that can be referenced as TemplatedParent sources
            when defining templates for a ProgressRing control. Not intended for general use.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings.EllipseDiameter">
            <summary>
            Gets the template-defined diameter of the "Ellipse" element that is animated in a templated ProgressRing.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings.EllipseOffset">
            <summary>
            Gets the template-defined offset position of the "Ellipse" element that is animated in a templated ProgressRing.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings.MaxSideLength">
            <summary>
            Gets the maximum bounding size of the progress ring as rendered.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RangeBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.#ctor">
            <summary>
            Initializes a new instance of the RepeatButton class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.RepeatButton.Delay">
            <summary>
            Gets or sets the time, in milliseconds, that the RepeatButton waits when it is pressed before it starts repeating the click action.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.RepeatButton.DelayProperty">
            <summary>
            Identifies the Delay dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.RepeatButton.Interval">
            <summary>
            Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.RepeatButton.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.RepeatButton.IgnoreTouchInput">
            <summary>
            Represents a value indicating whether the RepeatButton reacts to touch input or not.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.Initialize">
            <summary>
            Prepares object's state.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state for the repeat button.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnClick">
            <summary>
            Raises the Click routed event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnIsEnabledChanged(Windows.UI.Xaml.IsEnabledChangedEventArgs)">
            <summary>
            Called when the IsEnabled property changes.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            KeyDown event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnKeyUp(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            KeyUp event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnLostFocus(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            LostFocus event handler.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnPointerEntered(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            PointerEnter event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnPointerMoved(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            PointerMoved event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnPointerExited(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            PointerLeave event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            PointerPressed event handler.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.OnPointerReleased(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            PointerReleased event handler.
            </summary>
            <param name="args">Event agrs.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.RepeatButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ScrollBar.IsFixedOrientation">
            <summary>
            Indicates if this scrollbar supports to change its orientation once its template has been applied (cf. remarks).
            This is false by default (which means that the ScrollBar will support dynamic orientation changes).
            </summary>
            <remarks>
            This flag is for performance consideration, it allows ScrollBar to load only half of its template.
            It's used by core controls (e.g. ScrollViewer) where the ScrollBar's orientation will never change.
            It's required as, unlike UWP, a control which is Visibility = Collapsed will get its template applied anyway.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ScrollBar.OnPointerCaptureLost(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            PointerCaptureLost event handler.
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ScrollBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.Selector._selectedValueBindingPath">
            <summary>
            The path defined by <see cref="P:Windows.UI.Xaml.Controls.Primitives.Selector.SelectedValuePath"/>, if it is set, otherwise null. This may be reused multiple times for
            checking <see cref="P:Windows.UI.Xaml.Controls.Primitives.Selector.SelectedValue"/> candidates.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.Selector.IsSingleSelection">
            <summary>
            This is always true for <see cref="T:Windows.UI.Xaml.Controls.FlipView"/> and <see cref="T:Windows.UI.Xaml.Controls.ComboBox"/>, and depends on the value of <see cref="P:Windows.UI.Xaml.Controls.ListViewBase.SelectionMode"/> for <see cref="T:Windows.UI.Xaml.Controls.ListViewBase"/>.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.Selector._itemTemplatesThatArentContainers">
            <summary>
            Templates for which it's known that the template root doesn't qualify as a container.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexPath">
            <summary>
            The selected index as an <see cref="T:Uno.UI.IndexPath"/> of (group, group position), where group=0 if the source is ungrouped.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Selector.FindIndexOfItemWithValue(System.Object)">
            Finds the index of the first item with a given property path value.
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Selector.GetSelectedValue(System.Object)">
            Returns the selected value of an item using a path.
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.Selector.UsesManagedLayouting">
            <summary>
            Is the managed implementation for virtualized lists (ItemsStackPanel, ItemsWrapGrid, CarouselPanel etc) used on this platform?
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Selector.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.SelectorItem.MinTimeBetweenPressStates">
            <summary>
            Delay time before setting the pressed state of an item to false, to allow time for the Pressed visual state to be drawn and perceived. 
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.SelectorItem.ShouldHandlePressed">
            <summary>
            Whether the SelectorItem will handle touches. This can be set to false for compatibility with controls where the parent 
            handles touches (ComboBox-Android, legacy ListView/GridView). 
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.SelectorItem.CanCreateTemplateWithoutParent">
            <remarks>
            Ensure that the ContentControl will create its children even
            if it has no parent view. This is critical for the recycling panels,
            where the content is databound before being assigned to its
            parent and displayed.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SelectorItem.ApplyMultiSelectState(System.Boolean)">
            <summary>
            Set appropriate visual state from MultiSelectStates group. (https://msdn.microsoft.com/en-us/library/windows/apps/mt299136.aspx)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SelectorItem.OnPointerEntered(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SelectorItem.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SelectorItem.OnPointerReleased(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SelectorItem.OnPointerExited(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SelectorItem.OnPointerCanceled(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SelectorItem.OnPointerCaptureLost(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SelectorItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings.LeftClip">
            <summary>
            These properties were added to facilitate clipping while RectangleGeometry.Transform is not supported
            TODO: Remove and use NegativeOpenPaneLengthMinusCompactLength and OpenPaneLengthMinusCompactLength instead
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Thumb.DisablePointersTracking">
            <summary>
            Disable capture of all pointer kind
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Thumb.DisableMouseTracking">
            <summary>
            Disable capture for mouse
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.Thumb.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.TickBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Primitives.ToggleButton">
            <summary>
            Represents a control that a user can select (check) or clear (uncheck).
            Base class for controls that can switch states, such as CheckBox and RadioButton.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the ToggleButton class.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.Primitives.ToggleButton.Checked">
            <summary>
            Fires when a ToggleButton is checked.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.Primitives.ToggleButton.Unchecked">
            <summary>
            Fires when a ToggleButton is unchecked.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.Primitives.ToggleButton.Indeterminate">
            <summary>
            Fires when the state of a ToggleButton is switched to the indeterminate state.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsChecked">
            <summary>
            Gets or sets whether the ToggleButton is checked.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty">
            <summary>
            Identifies the IsChecked dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsThreeState">
            <summary>
            Gets or sets a value that indicates whether the control supports three states.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsThreeStateProperty">
            <summary>
            Identifies the IsThreeState dependency property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.OnToggle">
            <summary>
            Called when the ToggleButton receives toggle stimulus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.ToggleButton.CanRevertState">
            <summary>
            Determines if the current toggle button can revert its state when tapped.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state for the ToggleButton.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.OnClick">
            <summary>
            Toggles the Check state and raises the Click routed event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.OnChecked">
            <summary>
            Raises the Checked routed event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.OnUnchecked">
            <summary>
            Raises the Unchecked routed event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.OnIndeterminate">
            <summary>
            Raises the Indeterminate routed event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.OnToggleImpl">
            <summary>
            Raises the Click routed event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.OnIsCheckedChanged">
            <summary>
            Handle the IsChecked status change, resulting in updated VSM states and raising events
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.OnCreateAutomationPeer">
            <summary>
            Create ToggleButtonAutomationPeer to represent the ToggleButton.
            </summary>
            <returns>Automation peer.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode">
            <summary>
            Placement of the Flyout relative to its target control.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode.Top">
            <summary>
            The preferred location of the flyout is above the target element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode.Bottom">
            <summary>
            The preferred location of the flyout is below the target element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode.Left">
            <summary>
            The preferred location of the flyout is to the left of the target element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode.Right">
            <summary>
            The preferred location of the flyout is to the right of the target element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode.Full">
            <summary>
            The preferred location of the flyout is centered on the screen.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Primitives.NativePopupAdapter`1">
            <summary>
            This class wraps native popups and make them accessible through VisualTreeHelper.GetOpenPopups(Window)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Primitives.PlacementPopupPanel">
             <summary>
             This is a base popup panel to calculate the placement near an anchor control.
             </summary>
             <remarks>
             This class exists mostly to reuse the same logic between a Flyout and a ToolTip.
            
             This class should eventually be removed, and Uno should match WinUI's approach, where Flyout sets Popup.HorizontalOffset and VerticalOffset
             as well as Width and Height on FlyoutPresenter when it opens, and then allows the popup layouting to do its job.
            
             See also remarks on <see cref="T:Windows.UI.Xaml.Controls.FlyoutBasePopupPanel"/>.
             </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.PlacementPopupPanel.PopupPlacementTargetMargin">
            <summary>
            This value is an arbitrary value for the placement of
            a popup below its anchor.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Primitives.PlacementPopupPanel.NativeAnchor">
            <summary>
            A native view to use as the anchor, in the case that the managed <see cref="P:Windows.UI.Xaml.Controls.Primitives.PlacementPopupPanel.AnchorControl"/> is a proxy that's not actually
            included in the visual tree.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PlacementPopupPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PopupPanel.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PopupPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.PopupRoot.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Primitives.GroupHeaderPlacement">
            <summary>
            Declares where the header is placed in relation to the items in an items grouping control.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.ListViewBaseItemVisualStatesCriteria.ToString">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Primitives.NativePopup.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AppBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AppBarButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AppBarElementContainer.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AppBarElementContainer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AppBarSeparator.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AppBarToggleButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AutoSuggestBoxTextChangedEventArgs.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BitmapIcon.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Border">
            <summary>
            A border layouter, to apply Padding to the border.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Border.Add(Android.Views.View)">
            <summary>        
            Support for the C# collection initializer style.
            Allows items to be added like this 
            new Border 
            {
               new Border()
            }
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Border.ChildTransitions">
            <summary>
            This is a Transition for a UIElement.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Border.CreateCornerRadiusProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Border.CornerRadiusProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Border.CreatePaddingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Border.PaddingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Border.CreateBackgroundSizingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Border.BackgroundSizingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Border.CreateBorderThicknessProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Border.BorderThicknessProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Border.CreateBorderBrushProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Border.BorderBrushProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Border.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Button.#ctor">
            <summary>
            Initializes a new instance of the Button class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Button.Flyout">
            <summary>
            Gets or sets the flyout associated with this button.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Button.FlyoutProperty">
            <summary>
            Identifies the Flyout dependency property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Button.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state for the button.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Button.OnClick">
            <summary>
            Raises the Click routed event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Button.OnCreateAutomationPeer">
            <summary>
            Create ButtonAutomationPeer to represent the button.
            </summary>
            <returns>Automation peer.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Button.OpenAssociatedFlyout">
            <summary>
            In case if Button has set Flyout property, get associated Flyout and open it next to this Button.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Button.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarDatePicker.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.DayItemCornerRadius">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.CalendarItemCornerRadius">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.SelectedBackground">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.TodayBackground">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.TodaySelectedBackground">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.DayItemCornerRadiusProperty">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.CalendarItemCornerRadiusProperty">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.SelectedBackgroundProperty">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.TodayBackgroundProperty">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarView.TodaySelectedBackgroundProperty">
            <summary>
            Uno specific property
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewDayItem.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewDayItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Canvas._drawOrders">
            <summary>
            Draw order of children as determined by Canvas.ZIndex
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Canvas.CreateLeftProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Canvas.LeftProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Canvas.CreateTopProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Canvas.TopProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Canvas.CreateZIndexProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Canvas.ZIndexProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Canvas.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CaptureElement.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CheckBox.OnKeyDownInternal(Windows.System.VirtualKey)">
            <summary>
            Handles the KeyDown event for CheckBox.
            </summary>
            <param name="key">Key.</param>
            <returns>Handled?</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CheckBox.OnCreateAutomationPeer">
            <summary>
            Create CheckBoxAutomationPeer to represent the CheckBox.
            </summary>
            <returns>Automation peer.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CheckBox.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state for the CheckBox.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CheckBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ColorPicker.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ColumnDefinition.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ColumnDefinition.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ColumnDefinition.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ColumnDefinition.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.ColumnDefinition.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ColumnDefinition.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.ColumnDefinition.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ColumnDefinition.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.ColumnDefinition.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ColumnDefinitionCollection.InnerList">
            <summary>
            The inner list is exposed in order to get the struct enumerable exposed by <see cref="T:System.Collections.Generic.List`1"/> to avoid allocations.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ComboBox._selectionParentInDropdown">
            <summary>
            The 'inline' parent view of the selected item within the dropdown list. This is only set if SelectedItem is a view type.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ComboBox.RestoreSelectedItem(Android.Views.View)">
            <summary>
            Restore SelectedItem (or former SelectedItem) view to its position in the dropdown list.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ComboBox.IsPopupFullscreen">
            <summary>
            Stretches the opened Popup horizontally, and uses the VerticalAlignment
            of the first child for positioning.
            </summary>
            <remarks>
            This is required by some apps trying to emulate the native iPhone look for ComboBox.
            The standard popup layouter works like on Windows, and doesn't stretch to take the full size of the screen.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ComboBox.LightDismissOverlayBackground">
            <summary>
            Sets the light-dismiss colour, if the overlay is enabled. The external API for modifying this is to override the PopupLightDismissOverlayBackground, etc, static resource values.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ComboBox.DropDownLayouter.Measure(Windows.Foundation.Size,Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ComboBox.DropDownLayouter.Arrange(Windows.Foundation.Size,Windows.Foundation.Rect,Windows.Foundation.Size,System.Nullable{Windows.Foundation.Point})">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ComboBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ComboBoxItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CommandBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CommandBarOverflowPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs">
            <summary>
            Provides data for the ContainerContentChanging event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ContainerContentChangingEventArgs class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled.
            A true value for Handled prevents most handlers along the event
            route from handling the same event again.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs.InRecycleQueue">
            <summary>
            Gets a value that indicates whether this container is in the recycle queue
            of the ListViewBase and is not being used to visualize a data item.
            </summary>
            <remarks>Currently always false in Uno.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs.Item">
            <summary>
            Gets the data item associated with this container.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs.ItemContainer">
            <summary>
            Gets the UI container used to display the current data item.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs.ItemIndex">
            <summary>
            Gets the index in the ItemsSource of the data item associated with this container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ContentControl._dataTemplateUsedLastUpdate">
            <summary>
            Will be set to either the result of ContentTemplateSelector or to ContentTemplate, depending on which is used
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ContentControl._localContentDataContextOverride">
            <summary>
            Flag to determine if the current content has been overridden.
            This is only in use when <see cref="P:Windows.UI.Xaml.Controls.ContentControl.IsContentPresenterBypassEnabled"/> is true.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContentControl.IsContentPresenterBypassEnabled">
            <summary>
            This property determines if the current instance is not providing a Control
            Template, to allow for the ContentControl to avoid using a ContentPresenter. This extra layer
            is a problem on Android, where the stack size is severely limited (32KB at most)
            on version 4.4 and earlier.
            Android 5.0 does not have this limitation, because ART requires greater stack sizes.
            </summary>
            <remarks>
            If the default style for the current type has a Template property, 
            we know that the IsContentPresenterBypassEnabled will be false once the style has been set.
            Return false in this case, even if the Template is null.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ContentControl.HasDefaultTemplate">
            <summary>
            Gets whether the default style for the given type sets a non-null Template.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentControl.CreateItemContainer">
            <summary>
            Creates a ContentControl which can be measured without being added to the visual tree (eg as container in virtualized lists).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentDialog.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs">
            <summary>
            Provides data for the closing event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs.Cancel">
            <summary>
            Gets or sets a value that can cancel the closing of the dialog.
            A true value for Cancel cancels the default behavior.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs.Result">
            <summary>
            Gets the ContentDialogResult of the closing event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentDialogClosingEventArgs.GetDeferral">
            <summary>
            Gets a ContentDialogClosingDeferral that the app
            can use to respond asynchronously to the closing event.
            </summary>
            <returns>Deferral</returns>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ContentPresenter._dataTemplateUsedLastUpdate">
            <summary>
            Will be set to either the result of ContentTemplateSelector or to ContentTemplate, depending on which is used
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContentPresenter.SynchronizeContentWithOuterTemplatedParent">
            <summary>
            Indicates if the content should inherit templated parent from the presenter, or its templated parent.
            </summary>
            <remarks>Clear this flag to let the control nested directly under this ContentPresenter to inherit the correct templated parent</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContentPresenter.IsUsingDefaultTemplate">
            <summary>
            Flag indicating whether the content presenter uses implicit text block to render its content.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ContentPresenter.IsNativeHost">
            <summary>
            Determines if the current ContentPresenter is hosting a native control.
            </summary>
            <remarks>This is used to alter the propagation of the templated parent.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentPresenter.CleanupView(Android.Views.View)">
            <summary>
            Cleanup the view from its binding references
            </summary>
            <param name="previousValue"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentPresenter.CreateBackgroundSizingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.ContentPresenter.BackgroundSizingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentPresenter.CreateCornerRadiusProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.ContentPresenter.CornerRadiusProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Control">
            <summary>
            A generic control layouter, to apply size, alignment and margins to a single child.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Control._controlTemplateUsedLastUpdate">
            <summary>
            Will be set to Template when it is applied
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.SetUpdateControlTemplate(System.Boolean)">
            <summary>
            Defines a method that will request the update of the control's template and request layout update.
            </summary>
            <param name="forceUpdate">If true, forces an update even if the control has no parent.</param>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Control.TemplatedRoot">
            <summary>
            Represents the single child that is the result of the control template application.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.ApplyTemplate">
            <summary>
            Loads the relevant control template so that its parts can be referenced.
            </summary>
            <returns>A value that indicates whether the visual tree was rebuilt by this call. True if the tree was rebuilt; false if the previous visual tree was retained.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.EnsureTemplate">
            <summary>
            Applies default Style and implicit/explicit Style if not applied already, and materializes template.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.GetTemplateChild(System.String)">
            <summary>
            Finds a realized element in the control template.
            </summary>
            <param name="childName">The name of the template part.</param>
            <returns>The first template part of the specified name; otherwise, null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.GetTemplateChild``1(System.String)">
            <summary>
            Finds a realized element in the control template of the specified type.
            </summary>
            <typeparam name="T">The type of the template part.</typeparam>
            <param name="childName">The name of the template part.</param>
            <returns>The first template part of the specified name; otherwise, null.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Control.CanCreateTemplateWithoutParent">
            <summary>
            Allows to bypass the validation of the presence of a parent.
            </summary>
            <remarks>
            Setting to true property allows the ContentControl to create its children even if
            no parent view has been set. This is used for the ListView control (and other virtualizing controls)
            to measure items properly. These controls set the size of the view based on the size reported
            immediately after the BaseAdapter.GetView method returns, but the parent still has not been set.
            
            The Content control uses this delayed creation as an optimization technique for layout creation, when controls
            are created but not yet used.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Control.IsFocusEngaged">
            <summary>
            Get or sets a value that indicates whether focus is constrained
            within the control boundaries (for game pad/remote interaction).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Control.IsFocusEngagedProperty">
            <summary>
            Identifies the IsFocusEngaged dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Control.IsFocusEngagementEnabled">
            <summary>
            Get or sets a value that indicates whether focus can be constrained within
            the control boundaries (for game pad/remote interaction).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Control.IsFocusEngagementEnabledProperty">
            <summary>
            Identifies the IsFocusEngagementEnabled dependency property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.SetDefaultStyleKey``1(``0)">
            <summary>
            Duplicates the SetDefaultStyleKey() helper method from WinUI code.
            </summary>
            <remarks>
            Note: Although this is usually called as 'SetDefaultStyleKey(this)' (per WinUI C++ code), we actually only use the compile-time
             TDerived type and ignore the runtime derivedControl parameter, preserving the expected behaviour that DefaultStyleKey is 'fixed' 
            under inheritance unless explicitly changed by an inheriting type.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.Focus(Windows.UI.Xaml.FocusState)">
            <summary>
            Attempts to set the focus on the control.
            </summary>
            <param name="value">Specifies how focus was set, as a value of the enumeration.</param>
            <returns>True if focus was set to the control, or focus was already on the control. False if the control is not focusable.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Control.FocusTargetDescendant">
            <summary>
            Set to the UIElement child which has the IsTemplateFocusTarget attached property set to True, if any.
            Otherwise it's set to null.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.SetFocusEngagement">
            <summary>
            Sets Focus Engagement on a control, if
                1. The control (or one of its descendants) already has focus
                2. Control has IsEngagementEnabled set to true
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.RemoveFocusEngagement">
            <summary>
            Releases focus from the control boundaries for a control that
            has focus engagement (for game pad/remote interaction).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.UpdateEngagementState(System.Boolean)">
            <summary>
            Raise FocusEngaged and FocusDisengaged events and run
            default engagement visuals if necessary.
            </summary>
            <param name="engage">True if the control is engaging.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.GetTemplateRoot">
            <summary>
            Gets the first sub-view of this control or null if there is none
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.CreateCornerRadiusProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Control.CornerRadiusProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.CreateIsTemplateFocusTargetProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Control.IsTemplateFocusTargetProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.CreateIsFocusEngagedProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Control.IsFocusEngagedProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.CreateIsFocusEngagementEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Control.IsFocusEngagementEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Control.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ControlTemplate.#ctor(System.Object,Windows.UI.Xaml.FrameworkTemplateBuilder)">
            <summary>
            Build a ControlTemplate with an optional <paramref name="owner"/> to be provided during the call of <paramref name="factory"/>
            </summary>
            <param name="owner">The owner of the ControlTemplate</param>
            <param name="factory">The factory to be called to build the template content</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePickedEventArgs.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePickedEventArgs.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePickedEventArgs.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.DatePicker.UseNativeStyle">
            <summary>
            [UnoOnly] If we should use the native picker for the platform.
            IMPORTANT: must be set before the first time the picker is opened.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.DatePicker.UseNativeMinMaxDates">
            <summary>
            [UnoOnly] When using native pickers (through the UseNativeStyle property),
            setting this to true will interpret MinYear/MaxYear as MinDate and MaxDate.
            </summary>
            <remarks>
            This property has no effect when not using native pickers.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.DatePicker.FlyoutPresenterStyle">
            <summary>
            FlyoutPresenterStyle is an Uno-only property to allow the styling of the DatePicker's FlyoutPresenter.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePicker.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePickerFlyoutItem.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePickerFlyoutItem.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePickerFlyoutItem.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePickerFlyoutPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DropDownButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.FlipView.FlipViewPageChangeListener.Owner">
            <summary>
            The FlipView which uses this listener. This property is backed by a weak reference.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.FlipView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.FlipViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.FlyoutPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.FocusDisengagedEventArgs">
            <summary>
            Provides data for the FocusDisengaged event.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.FocusEngagedEventArgs">
            <summary>
            Provides data for the FocusEngaged event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.FocusEngagedEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.FontIcon.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.FontIconSource.CreateIconElement">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Frame.InnerNavigateUnsafe(Windows.UI.Xaml.Navigation.PageStackEntry,Windows.UI.Xaml.Navigation.NavigationMode)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Frame.ReleasePages(System.Collections.Generic.IList{Windows.UI.Xaml.Navigation.PageStackEntry})">
            <summary>
            Return pages removed from the stack to the pool, if enabled.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Frame.MoveFocusFromCurrentContent">
            <summary>
            In case the current page contains a focused element,
            we need to move the focus out of the page.
            </summary>
            <remarks>
            In UWP this is done automatically as the elements are unloaded,
            but due to the control lifecycle differences in Uno the focus move multiple times
            as controls are unloaded in "layers" and it could also not move outside this Frame,
            as the Parent would already be unassigned during the OnUnloaded execution.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Frame.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.InnerMeasureOverride(Windows.Foundation.Size)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.InnerArrangeOverride(Windows.Foundation.Size)">
            <remarks>
            This method contains or is called by a try/catch containing method and can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreateBackgroundSizingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.BackgroundSizingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreateBorderBrushProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.BorderBrushProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreateBorderThicknessProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.BorderThicknessProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreatePaddingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.PaddingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreateCornerRadiusProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.CornerRadiusProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreateRowProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.RowProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreateColumnProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.ColumnProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreateRowSpanProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.RowSpanProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.CreateColumnSpanProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.Grid.ColumnSpanProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Grid.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GridView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GridViewHeaderItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GridViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GroupItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.HandwritingView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Hub.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.HubSection.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.HyperlinkButton">
            <summary>
            Represents a button control that functions as a hyperlink.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.HyperlinkButton.#ctor">
            <summary>
            Initializes a new instance of the HyperlinkButton class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.HyperlinkButton.NavigateUriProperty">
            <summary>
            Identifies the NavigateUri dependency property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.HyperlinkButton.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.HyperlinkButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.IconSource.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.IconSource.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.IconSource.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.IconSourceElement.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Image.PreserveStateOnUnload">
            <summary>
            Setting this flag instructs the image control not to dispose pending image fetches when it is removed from the visual tree. 
            This should generally be left false, but may be required in cases that the image is rapidly unloaded and reloaded, or that 
            OnUnloaded/OnDetachedFromWindow is improperly called when the view isn't really being removed, and performance/stability is affected.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Image.MonochromeColor">
            <summary>
            When set, the resulting image is tentatively converted to Monochrome.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Image.CanDowngradeLayoutRequest">
            <summary>
            Gets or sets whether we should allow to downgrade a request for remeasure and layout to redraw the image only.
            This value can be set to false as a workaround to issues caused by optimizations introduced with ShouldDowngradeLayoutRequest.
            Default value: true
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Image.ShouldDowngradeLayoutRequest">
            <summary>
            Check whether we should downgrade a request for remeasure and layout to a request to redraw the image only,
            ie because we know that the image's dimensions have not changed after setting the source.
            </summary>
            <returns>True if we know that the image's dimensions have not changed.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Image.HasKnownWidth(System.Double)">
            <summary>
            True if horizontally stretched within finite container, or defined by this.Width
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Image.HasKnownHeight(System.Double)">
            <summary>
            True if vertically stretched within finite container, or defined by this.Height
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Image.UpdateSourceImageSize(Windows.Foundation.Size,System.Boolean)">
            <summary>
            Updates the size of the image source (drawable, bitmap, etc.)
            </summary>
            <param name="size">size of the image source (in physical pixels)</param>
            <param name="isLogicalPixels">indicates that the size of the image source is in logical pixels (this is the case when the source is an URI)</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Image.MustDispatchSetSource">
            <summary>
            If the image control does not have finite bounds, or if finite bounds have not yet been computed, then it must go through
            another measure/arrange pass after the image is set. 
            This is not guaranteed to happen if RequestLayout is called from within a layout pass, so we must set the image on the dispatcher 
            even if we wouldn't otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Image.UpdateMatrix(Windows.Foundation.Size)">
            <summary>
            Sets the value of ImageView.ImageMatrix based on Stretch.
            </summary>
            <param name="frameSize">In logical pixels</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Image.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Image.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkCanvas.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarBallpointPenButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarCustomPen.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarCustomPen.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarCustomPen.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarCustomPenButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarCustomToolButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarEraserButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarFlyoutItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarHighlighterButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarMenuButton.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarMenuButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarPenButton.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarPenButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarPencilButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarPenConfigurationControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarRulerButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarStencilButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarToggleButton.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarToggleButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarToolButton.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InkToolbarToolButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ItemsControl.InnerContentPresenterTemplate">
            <summary>
            This template is stored here in order to allow for 
            FrameworkTemplate pooling to function properly when an ItemTemplateSelector has been
            specified.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ItemsControl.InternalItemsPanelRoot">
            <summary>
            The actual View that acts as the ItemsPanelRoot (used by FlipView and ListView, which don't use actual Panels)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ItemsControl.ShouldItemsControlManageChildren">
            <summary>
            True if ItemsControl should manage the children of ItemsPanel, false if this is handled by an inheriting class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ItemsControl.NumberOfGroups">
            <summary>
            The number of groups in the <see cref="P:Windows.UI.Xaml.Controls.ItemsControl.ItemsSource"/>, zero if it is ungrouped.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ItemsControl.NumberOfItems">
            <summary>
            The number of items in the source.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetNextItemIndex(System.Nullable{Uno.UI.IndexPath},System.Int32)">
            <summary>
            Get the index for the next item after <paramref name="currentItem"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetIndexFromIndexPath(Uno.UI.IndexPath)">
            <summary>
            Gets a flattened item index. Unlike <see cref="M:Windows.UI.Xaml.Controls.ItemsControl.GetDisplayIndexFromIndexPath(Uno.UI.IndexPath)"/>, this can not be overridden to adjust for 
            supplementary elements (eg headers) on derived controls. This represents the (flattened) index in the data source as opposed
            to the 'display' index.
            
            Note that the <see cref="T:Uno.UI.IndexPath"/> is still the 'display' value in that it doesn't 'know about' empty groups if HidesIfEmpty is set to true.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetIndexPathFromIndex(System.Int32)">
            <summary>
            Convert flat item index to (group, index in group)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetLastItem">
            <summary>
            Get the last item in the source, or null if the source is empty.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.AdjustGroupIndexForHidesIfEmpty(System.Int32)">
            <summary>
            Return the index of a group in the unfiltered source, adjusted for empty groups hidden from the view by GroupStyle.HidesIfEmpty=true
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetItemsOnLastLine(System.Int32,System.Int32)">
            <summary>
            Return the number of items to show on the last line of a group, if there are multiple items per line.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetCachedGroupCount(System.Int32)">
            <summary>
            During an update, this will represent the group state immediately prior to the update. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.OnItemsSourceSingleCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Int32)">
            <summary>
            Called when a collection change occurs within a single group, or within the entire source if it is ungrouped.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.OnItemsSourceGroupsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when a change is made to an observable collection of groups.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.ResolveInternalItemsPanel(Android.Views.View)">
            <summary>
            Resolve the view to use as <see cref="P:Windows.UI.Xaml.Controls.ItemsControl.InternalItemsPanelRoot"/>. Inheriting classes should
            override this method if the 'real' displaying panel is different from the panel nominated by ItemsPanelTemplate.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.CleanUpContainer(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Unset content of container. This should be called when the container is no longer going to be used.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element that's used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.TryRepairContentConnection(Windows.UI.Xaml.Controls.ContentControl,System.Object)">
             <summary>
             Ensure the container template updates correctly when recycling with the same item.
             </summary>
             <remarks>
             This addresses the very specific case where 1) the item is a view, 2) It's being rebound to a container that was most
             recently used to show that same view, but 3) the view is no longer connected to the container, perhaps because it was bound to
             a different container in the interim.
            
             To force the item view to be reconnected, we set DataContext to null, so that when we set it to the item view immediately afterward,
             it does something instead of nothing.
             </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines whether the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>true if the item is (or is eligible to be) its own container; otherwise, false.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetContainerForIndex(System.Int32)">
            <summary>
            Create a new container for item at <paramref name="index"/> and returns it, unless the item is its own container, in which case
            returns the item itself, or the template root is a suitable container, in which case the template root is returned.
            </summary>
            <remarks>For virtualized controls, this method is only called if it's not possible to recycle an existing container.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetContainerForTemplate(Windows.UI.Xaml.DataTemplate)">
            <summary>
            Gets an appropriate container for a given template (either a new container, or the template's root if it is a container)
            </summary>
            <remarks>
            This is called directly by NativeListViewBase on Android rather than <see cref="M:Windows.UI.Xaml.Controls.ItemsControl.GetContainerForIndex(System.Int32)"/>, since the recycling
            mechanism doesn't permit for the exact item index to be known when the container is created.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.EnsureContainerItemsControlProperty(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Ensures the given container has valid reference to its ItemsControl owner.
            </summary>
            <param name="container">Container.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.ItemFromIndex(System.Int32)">
            <summary>
            Returns the item for a given flat index.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetGroupHeaderContainer(System.Object)">
            <summary>
            Return control which acts as container for group header for this ItemsControl subtype.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetItemFromIndex(System.Int32)">
            <summary>
            Return the item in the source collection at a given item index.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.SetItemsPresenter(Windows.UI.Xaml.Controls.ItemsPresenter)">
            <summary>
            Sets the ItemsPresenter that should be used by ItemsControl.
            </summary>
            <remarks>
            This is usually called from ItemsPresenter when its TemplatedParent (an ItemsControl) gets set.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.Refresh">
            <summary>
            Resets internal cached state of the collection.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetElementFromDisplayPosition(System.Int32)">
            <summary>
            Gets item for a particular 'display position.' For this purpose, if the source is grouped, it is treated as a flat list with the header items (groups themselves) placed contiguously after all of the group items.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetDisplayItemCount">
            <summary>
            Get number of display items, including group headers if the source is grouped.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetDisplayIndexFromIndexPath(Uno.UI.IndexPath)">
            <summary>
            Get flattened item index, if the source is grouped, to supply to <see cref="M:Windows.UI.Xaml.Controls.ItemsControl.GetElementFromDisplayPosition(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetGroupHeaderDisplayIndex(System.Int32)">
            <summary>
            Get index for group header to supply to <see cref="M:Windows.UI.Xaml.Controls.ItemsControl.GetElementFromDisplayPosition(System.Int32)"/>.
            </summary>
            <param name="groupIndex">The position of the group in the item source</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.GetIsGroupHeader(System.Int32)">
            <summary>
            Is the item at the display position a group header.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsPanelTemplate.#ctor(System.Object,Windows.UI.Xaml.FrameworkTemplateBuilder)">
            <summary>
            Build an ItemsPanelTemplate with an optional <paramref name="owner"/> to be provided during the call of <paramref name="factory"/>
            </summary>
            <param name="owner">The owner of the ItemsPanelTemplate</param>
            <param name="factory">The factory to be called to build the template content</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsPickedEventArgs.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsPickedEventArgs.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsPickedEventArgs.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ItemsPresenter.IsWithinScrollableArea">
            <summary>
            Indicates whether the ItemsPresenter is actually enclosed in the scrollable area of the 
            ItemsControl (or derived type). This is always true on Windows, but on Uno it's not the case
            for controls which delegate to a native implementation (eg <see cref="T:Windows.UI.Xaml.Controls.ListViewBase"/>).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsStackPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsWrapGrid.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListBoxItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListPickerFlyoutPresenter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListPickerFlyoutPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ListViewBase.RefreshOnCollectionChanged">
            <summary>
            When this flag is set, the ListViewBase will process every notification from <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> as if it 
            were a 'Reset', triggering a complete refresh of the list. By default this is false.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ListViewBase._isIncrementalLoadingInFlight">
            <summary>
            Whether an incremental data loading request is currently under way.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ListViewBase.Command">
            <summary>
            Deprecated, use ItemClickCommand instead.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.SaveContainersBeforeAddForIndexRepair(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Stores materialized containers starting a given index, so that their
            ItemsControl.IndexForContainerProperty can be updated after the collection changes.		
            </summary>
            <param name="startingIndex">The minimum index of containers we care about.</param>
            <param name="indexChange">How does the index change.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.SaveContainersBeforeRemoveForIndexRepair(System.Int32,System.Int32)">
            <summary>
            Stores materialized containers starting a given index, so that their
            ItemsControl.IndexForContainerProperty can be updated after the collection changes.		
            </summary>
            <param name="startingIndex">The minimum index of containers we care about.</param>
            <param name="indexChange">How does the index change.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.RepairIndices">
            <summary>
            Sets the indices of stored materialized containers to the appropriate index after
            collection change.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.OnGroupPropertyChanged(Windows.UI.Xaml.Data.ICollectionViewGroup,System.Int32)">
            <summary>
            Update onscreen group header DataContext when ICollectionViewGroup.Group property changes.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.ApplyMultiSelectState(Windows.UI.Xaml.Controls.Primitives.SelectorItem)">
            <summary>
            Apply the multi-selection state to the provided item
            </summary>
            <param name="selectorItem"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.AddGroupItems(System.Int32)">
            <summary>
            Insert items in a newly inserted group. This is only needed on Android, which doesn't natively support the concept of a group.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.RemoveGroupItems(System.Int32,System.Int32)">
            <summary>
            Remove items in a disappearing group. This is only needed on Android, which doesn't natively support the concept of a group.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.ReplaceItems(System.Int32,System.Int32,System.Int32)">
            <summary>
            Carry out collection Replace action. We just rebind the existing item, rather than calling the native replace method, to minimize 'flicker' when the item is nearly the same. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.HasTemplateChanged(System.Object,System.Object)">
            <summary>
            Does <paramref name="newItem"/> resolve to a different template than <paramref name="oldItem"/>?
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.ResolveHeaderOrFooterContext(Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Resolve the context to use for header/footer. This should be the Header/Footer properties if they are set;
            if not, but the HeaderTemplate/FooterTemplate is non-null, then the ListViewBase's DataContext should be used.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.TryLoadMoreItems(System.Int32)">
            <summary>
            Try to fetch more items, if the ItemsSource supports <see cref="T:Windows.UI.Xaml.Data.ISupportIncrementalLoading"/>.
            </summary>
            <param name="currentLastItem">The last item index currently visible. (In practice this may also be less than the last visible index, without ill effects.)</param>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ListViewBase.CanLoadItems">
            <summary>
            True if the source is an <see cref="T:Windows.UI.Xaml.Data.ISupportIncrementalLoading"/> with more items, incremental loading is enabled, and no request is pending.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.UpdateReordering(Windows.Foundation.Point,Windows.UI.Xaml.FrameworkElement,System.Object)">
            <summary>
            Update reordering information
            </summary>
            <param name="location">The current location of the pointer use to reordering items, in the ListView coordinates space</param>
            <param name="draggedContainer">The container that has been clicked to initiate the reordering (i.e. drag) operation (cf. remarks)</param>
            <param name="draggedItem">The item that has been clicked to initiate the reordering (i.e. drag) operation (cf. remarks)</param>
            <remarks>
            If the SelectionMode is not None or Single, the draggedItem/Container might not be the single that is being reordered.
            However, UWP hides in the ListView only the item that is being clicked by the user to initiate the reorder / drag operation.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ListViewBase.NativePanel">
            <summary>
            The native ListView type which is providing the implementation. This will be null if a panel other than <see cref="T:Windows.UI.Xaml.Controls.ItemsStackPanel"/>
            or <see cref="T:Windows.UI.Xaml.Controls.ItemsWrapGrid"/> is being used.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ListViewBase.ManagedVirtualizingPanel">
            <summary>
            The managed implementation of ItemsStackPanel, if it is set as ItemsPanel (normally only in a debugging scenario).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ListViewBase.PageSize">
            <summary>
            The number of currently visible items, ie a 'page' from the point of view of incremental data loading.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.AddGroup(System.Int32)">
            <summary>
            Add a group using the native in-place modifier.
            </summary>
            <param name="groupIndexInView">The index of the group from the native collection view's perspective, ie ignoring empty groups 
            if HidesIfEmpty=true.</param>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ListViewBase.GroupOperation">
            <summary>
            Record of an INotifyCollectionChanged operation which adds/removes groups from the source
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBaseHeaderItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewHeaderItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ListViewItem">
            <summary>
            An basic implementation for an item container
            </summary>
            <remarks>This container supports vertical scrolling and stretching for the whole item.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MediaElement.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MediaPlayerElement.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.MediaPlayerPresenter.IsTogglingFullscreen">
            <summary>
            Indicates whether or not the player is currently toggling the fullscreen mode.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MediaPlayerPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MediaTransportControls.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MenuBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MenuBarItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MenuFlyout.AutoAdjustPlacement(Windows.UI.Xaml.Controls.Primitives.FlyoutBase.MajorPlacementMode)">
            *static*/
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MenuFlyoutItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MenuFlyoutItemBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MenuFlyoutPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MenuFlyoutSeparator.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.MenuFlyoutSubItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationViewItemBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationViewItemHeader.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationViewItemSeparator.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationViewList.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationViewTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationViewTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NavigationViewTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Page.TrySetFocusedElement(Windows.UI.Xaml.DependencyObject)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Page.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Panel.Add(Windows.UI.Xaml.UIElement)">
            <summary>        
            Support for the C# collection initializer style.
            Allows items to be added like this 
            new Panel 
            {
               new Border()
            }
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Panel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ParallaxView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PasswordBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PathIcon.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_initialsTextBlock">
            <summary>
            XAML Element for the first TextBlock matching x:Name of InitialsTextBlock.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_badgeNumberTextBlock">
            <summary>
            XAML Element for the first TextBlock matching x:Name of BadgeNumberTextBlock.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_badgeGlyphIcon">
            <summary>
            XAML Element for the first TextBlock matching x:Name of BadgeGlyphIcon.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_badgeImageBrush">
            <summary>
            XAML Element for the first ImageBrush matching x:Name of BadgeImageBrush.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_badgingEllipse">
            <summary>
            XAML Element for the first Ellipse matching x:Name of BadgingBackgroundEllipse.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_badgingBackgroundEllipse">
            <summary>
            XAML Element for the first Ellipse matching x:Name of BadgingEllipse.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_profilePictureReadAsync">
            <summary>
            The async operation object representing the loading and assignment of the Thumbnail.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_displayNameInitials">
            <summary>
            The initials from the DisplayName property.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_contactDisplayNameInitials">
            <summary>
            The initials from the Contact property.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.PersonPicture.m_contactImageSource">
            <summary>
            The ImageSource from the Contact property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PersonPicture.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PickerConfirmedEventArgs.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PickerConfirmedEventArgs.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PickerConfirmedEventArgs.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PickerFlyoutPresenter.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PickerFlyoutPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Pivot.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PivotItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ProgressBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ProgressRing">
            <summary>
            Represents a control that indicates that an operation is ongoing. The typical visual appearance is a ring-shaped "spinner" that cycles an animation as progress continues.
            See https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.progressring
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ProgressRing.IsActive">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/> is showing progress.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ProgressRing.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.RadioButton">
            <summary>
            Represents a button that allows a user to select a single option from a group of options.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the RadioButton class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RadioButton.GroupName">
            <summary>
            Gets or sets the name that specifies which RadioButton controls are mutually exclusive.
            </summary>
            <remarks>In line with UWP, the property returns empty string
            even if the actual group is null. Conversely, it is not possible
            to set it to <see langword="null"/> directly (only via SetValue).</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RadioButton.GroupNameProperty">
            <summary>
            Identifies the GroupName dependency property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RadioButton.UnregisterSafe(Windows.UI.Xaml.Controls.RadioButton)">
            <summary>
            Unregister by searching for the instance in all groups. This is safer during shutdown, because
            GroupName may access an external (CLR) string which may have been GC'ed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RadioButton.Unregister(System.String,Windows.UI.Xaml.Controls.RadioButton)">
            <summary>
            Unregister within a specific group name. This is faster, but not safe during shutdown.
            </summary>
            <param name="groupName">Group name.</param>
            <param name="radioButton">RadioButton.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RadioButton.OnCreateAutomationPeer">
            <summary>
            Create RadioButtonAutomationPeer to represent the RadioButton.
            </summary>
            <returns>Automation peer.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RadioButton.ChangeVisualState(System.Boolean)">
            <summary>
            Change to the correct visual state for the RadioButton.
            </summary>
            <param name="useTransitions">Use transitions.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RadioButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RatingControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RatingItemInfo.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RatingItemInfo.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RatingItemInfo.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RefreshContainer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RefreshVisualizer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.GetChildGraph(Windows.Foundation.Size)">
            <summary>
            Gets the graph for all the children in the Panel
            </summary>
            <param name="availableSize">The Panel's available size</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.GetDependencies(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.IFrameworkElement[])">
            <summary>
            Gets all the direct dependencies of a FrameworkElement (based on the set AttachedProperties)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.ValidateDependencies(Windows.UI.Xaml.IFrameworkElement[],Windows.UI.Xaml.IFrameworkElement[])">
            <summary>
            Make sure all dependencies are valid
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.OrderChildBasedOnDependencies(Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.IFrameworkElement[],System.Collections.Generic.List{Windows.UI.Xaml.IFrameworkElement})">
            <summary>
            Order the child in a list so that the sibling it depends on are laid out before itself
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.ValidateCircularReferences(System.Collections.Generic.List{Windows.UI.Xaml.IFrameworkElement},System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.Dependency[]})">
            <summary>
            Make sure there are no relationships between Siblings that make a circular dependency (E.G. A depends on B, B depends on C, C depends on A)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.BuildGraph(Windows.UI.Xaml.IFrameworkElement[],System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.Dependency[]})">
            <summary>
            Build the sibling graph for the given chilren
            </summary>
            <param name="orderedChildren">The list of all children, properly ordered and without circular dependencies</param>
            <param name="childrenDependencies">The list of all given sibling dependencies</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.GetChild(System.Object,System.Collections.Generic.IEnumerable{Windows.UI.Xaml.IFrameworkElement})">
            <summary>
            Gets a child instance from the named siblings, whether it's the name of a sibling, an instance or 
            an ElementNameSubject
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.RelativePanel.Dependency.DependencyTypeCount">
            <summary>
            The number of possible <see cref="T:Windows.UI.Xaml.Controls.RelativePanel.DependencyType"/> values. Must 
            be adjusted manually if the count changes.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.AddNode(Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.Dependency[])">
            <summary>
            Adds a node to the Sibling Graph.
            </summary>
            <param name="child">The FrameworkElement to add to the graph</param>
            <param name="dependencies">The dependencies this FrameworkElement has</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.GetClusters(System.Boolean,System.Boolean)">
            <summary>
            Gets all the FrameworkElements in the graph, starting from the entry points of the graph and then navigating through the graph
            until all branches have been explored, then goes to the next entry point and so on.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.CleanupDependencies(System.Collections.Generic.List{Windows.UI.Xaml.Controls.RelativePanel.Sibling},System.Boolean,System.Boolean)">
            <summary>
            Makes sure dependencies in the cluster are reversed if they are based on unknown boundaries
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.ReverseDependencies(Windows.UI.Xaml.Controls.RelativePanel.Sibling,System.Boolean)">
            <summary>
            Reverses which dependencies are inferred or not in a certain orientation
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.OrderClusterForLayouting(System.Collections.Generic.List{Windows.UI.Xaml.Controls.RelativePanel.Sibling})">
            <summary>
            Prioritizes elements for layouting.  First treat the entrypoints, starting from top-left then around.
            Then select the ones with dependencies that are already laid out.
            </summary>
            <param name="cluster"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.GetSibling(Windows.UI.Xaml.IFrameworkElement)">
            <summary>
            Gets the Sibling structure associated to a particular FrameworkElement
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.MeasureSiblings(Windows.Foundation.Size,Windows.UI.Xaml.Thickness,System.Func{Android.Views.View,Windows.Foundation.Size,Windows.Foundation.Size})">
            <summary>
            Measures all the siblings in the graph and returns the minimal required size to display all siblings
            </summary>
            <param name="availableSize">The available size for the siblings to be displayed in</param>
            <param name="measureChild">The method to call in order to measure one child</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.PrepareAndMeasureChild(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,Windows.UI.Xaml.Thickness,System.Func{Android.Views.View,Windows.Foundation.Size,Windows.Foundation.Size},System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo},System.Collections.Generic.List{Windows.UI.Xaml.IFrameworkElement})">
            <summary>
            Prepares a child for a measuring pass and sets up this child's sibling layout info and measures it when required
            </summary>
            <param name="child">The child to prepare for measure</param>
            <param name="availableSize">The available size in the panel</param>
            <param name="padding">The panel's padding</param>
            <param name="measureChild">The method to call when we need to measure the child</param>
            <param name="siblingLayoutInfos">The set of SiblingLayoutInfos from the child's siblings</param>
            <param name="updateCallerStack">The stack of all siblings that caused a remeasure of their dependencies, null at first pass</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.UpdateSiblingsBasedOnSize(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,Windows.UI.Xaml.Thickness,System.Func{Android.Views.View,Windows.Foundation.Size,Windows.Foundation.Size},System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo},System.Collections.Generic.List{Windows.UI.Xaml.IFrameworkElement})">
            <summary>
            Re-measures the siblings that are affected by a change in size of a dependent sibling
            </summary>
            <param name="child">The child for which the size changed</param>
            <param name="availableSize">The panel's available size</param>
            <param name="padding">The panel's padding</param>
            <param name="measureChild">The method to call when we need to measure a child</param>
            <param name="siblingLayoutInfos">The set of sibling layout information of the currently laid out siblings</param>
            <param name="updateCallerStack">The stack of all IFrameworkElements that caused the chain of updates</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.ArrangeSiblings(Windows.Foundation.Size,Windows.UI.Xaml.Thickness,System.Func{Android.Views.View,Windows.Foundation.Size},System.Action{Android.Views.View,Windows.Foundation.Rect})">
            <summary>
            Arranges all the siblings in the graph and lays them out in the available space, relative to their parent
            </summary>
            <param name="finalSize">The size that is available for the layout</param>
            <param name="arrangeChild">The method to call in order to arrange one specific child</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.GetAvailableAreaForChild(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo},Windows.UI.Xaml.Thickness)">
            <summary>
            Gets the available area for the children, based on the currently laid out siblings and on the available size in the panel
            </summary>
            <param name="child">The child for which we want to find out the available area</param>
            <param name="availableSize">The panel's available size</param>
            <param name="siblingLayoutInfos">The information about the currently laid out siblings</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.ComputeChildLeftBound(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo},Windows.UI.Xaml.Thickness,System.Boolean)">
            <summary>
            Checks if the given FrameworkElement has any dependencies that would provide a left boundary using the existing layout info
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.IsAlignLeftWithPanel(Windows.UI.Xaml.UIElement)">
            <summary>
            Returns true if the child is left aligned with Panel or has no horizontal alignment instructions
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.ComputeChildTopBound(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo},Windows.UI.Xaml.Thickness,System.Boolean)">
            <summary>
            Checks if the given FrameworkElement has any dependencies that would provide a top boundary using the existing layout info
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.IsAlignTopWithPanel(Windows.UI.Xaml.UIElement)">
            <summary>
            Returns true if the child is top aligned with Panel or has no vertical alignment instructions
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.ComputeChildRightBound(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo},System.Double,Windows.UI.Xaml.Thickness,System.Boolean)">
            <summary>
            Checks if the given FrameworkElement has any dependencies that would provide a right boundary using the existing layout info
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.ComputeChildBottomBound(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo},System.Double,Windows.UI.Xaml.Thickness,System.Boolean)">
            <summary>
            Checks if the given FrameworkElement has any dependencies that would provide a bottom boundary using the existing layout info
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.GetAvailableDependencies(Windows.UI.Xaml.Controls.RelativePanel.Sibling,Windows.UI.Xaml.Controls.RelativePanel.DependencyType,System.Boolean,System.Collections.Generic.IDictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo})">
            <summary>
            Gets already laid out FrameworkElements that have a given dependency type in relation to this sibling and where indeference is appropriate
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.ComputeChildArea(Windows.Foundation.Rect,Windows.Foundation.Size,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo)">
            <summary>
            Get the area (including location) of a child based on the measured size and the layout information of other children in order
            </summary>
            <param name="availableArea">The child's available area</param>
            <param name="childSize">The measured child size</param>
            <param name="siblingLayoutInfo">The information about the previously laid out children</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.UpdateFinalMeasuredSize(Windows.Foundation.Rect,Windows.Foundation.Size,Windows.Foundation.Size,Windows.UI.Xaml.Thickness)">
            <summary>
            Update the final size of the panel with the new layout info
            </summary>
            <param name="childArea">The area of the newly measured child</param>
            <param name="currentFinalMeasuredSize">The current size of the panel, based on the previous children</param>
            <param name="availableSize">The available size for the panel</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.UpdateSiblingsBasedOnArea(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size,Windows.UI.Xaml.Thickness,System.Func{Android.Views.View,Windows.Foundation.Size},System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo})">
            <summary>
            After updating the size of a child, find the related siblings and make sure their position is updated accordingly
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.ExecuteOnSiblingLayoutInfoIfAvailable``1(Windows.UI.Xaml.IFrameworkElement,System.Collections.Generic.Dictionary{Windows.UI.Xaml.IFrameworkElement,Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo},System.Func{Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo,``0})">
            <summary>
            Executes an operation on an already existing SiblingLayoutInfo or create it before executing.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingGraph.GetOppositeDependency(Windows.UI.Xaml.Controls.RelativePanel.DependencyType)">
            <summary>
            Gets the Dependency Type for a sibling of a particular dependency (E.G. LeftOf would return RightOf, AlignLeftWith will remain AlignLeftWith)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.IsAreaSet">
            <summary>
            Defines if the SiblingLayoutInfo's Area has been set once
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.Area">
            <summary>
            Defines the area in which the sibling is laid out
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.IsLeftBound">
            <summary>
            Defines if the sibling is bound to the left, either with a sibling or with the panel
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.IsTopBound">
            <summary>
            Defines if the sibling is bound to the top, either with a sibling or with the panel
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.IsRightBound">
            <summary>
            Defines if the sibling is bound to the right, either with a sibling or with the panel
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.IsBottomBound">
            <summary>
            Defines if the sibling is bound to the bottom, either with a sibling or with the panel
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.StretchesHorizontally">
            <summary>
            Returns true if the sibling is bound both left and right
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.StretchesVertically">
            <summary>
            Returns true if the sibling is bound both top and bottom
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingLayoutInfo.Center">
            <summary>
            Returns the X and Y pair around which the sibling is being centered.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.Sibling.GetSiblings(Windows.UI.Xaml.IFrameworkElement[])">
            <summary>
            Returns all the siblings that are related to a particular FrameworkElement, going through each dependency
            and then trough the siblings of those dependencies.
            </summary>
            <param name="except">A list of FrameworkElements to avoid while enumerating.  This enables us to prevent redundancy in the enumeration of the graph.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.SiblingDependency.#ctor(Windows.UI.Xaml.Controls.RelativePanel.Sibling,Windows.UI.Xaml.Controls.RelativePanel.DependencyType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sibling">The sibling on which the element is bound</param>
            <param name="type">The type of dependency</param>
            <param name="isInferred">True if the dependency is inferred (is the inverse of an actual dependency)</param>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingDependency.Sibling">
            <summary>
            The sibling on which the element is bound
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingDependency.Type">
            <summary>
            The type of dependency for the sibling
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RelativePanel.SiblingDependency.IsInferred">
            <summary>
            True if the dependency is inferred (is the inverse of an actual dependency)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.CreateBackgroundSizingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.RelativePanel.BackgroundSizingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.CreateBorderBrushProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.RelativePanel.BorderBrushProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.CreateBorderThicknessProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.RelativePanel.BorderThicknessProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.CreatePaddingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.RelativePanel.PaddingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.CreateCornerRadiusProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.RelativePanel.CornerRadiusProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RelativePanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RichTextBlock.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RichTextBlockOverflow.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RichTextBlockOverflow.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RowDefinition.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RowDefinition.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RowDefinition.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RowDefinition.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.RowDefinition.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RowDefinition.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.RowDefinition.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.RowDefinition.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.RowDefinition.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.RowDefinitionCollection.InnerList">
            <summary>
            The inner list is exposed in order to get the struct enumerable exposed by <see cref="T:System.Collections.Generic.List`1"/> to avoid allocations.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollContentPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ScrollViewer.ConstantVelocityScroller">
            <summary>
            Apply a constant scroll velocity, used as a substitute for constant-pan Manipulation functionality which Uno doesn't currently support.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollViewer.ConstantVelocityScroller.FrameIntervalMS">
            <summary>
            Custom value. The exact value is not too important here, the idea is just to update the scroll frequently, but still give the
            layouting enough time to update.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.ScrollViewer.ViewChanged">
            <summary>
            Occurs when manipulations such as scrolling and zooming have caused the view to change.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ScrollViewer.Presenter">
            <summary>
            Gets the ScrollContentPresenter resolved from the template.
            Be aware that on iOS and Android this might be only a wrapper onto the NativeScrollContentPresenter.
            </summary>
            <remarks>
            This is a temporary workaround until the NativeSCP knows its managed SCP and will most probably been removed in a near .
            Try to avoid usage of this property as much as possible!
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ScrollViewer.ViewportMeasureSize">
            <summary>
            Gets the size of the Viewport used in the **CURRENT** (cf. remarks) or last measure
            </summary>
            <remarks>Unlike the LayoutInformation.GetAvailableSize(), this property is set **BEFORE** measuring the children of the ScrollViewer</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ScrollViewer.ViewportArrangeSize">
            <summary>
            Gets the size of the Viewport used in the **CURRENT** (cf. remarks) or last arrange
            </summary>
            <remarks>Unlike the LayoutInformation.GetLayoutSlot(), this property is set **BEFORE** arranging the children of the ScrollViewer</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ScrollViewer.UpdatesMode">
            <summary>
            Cached value of <see cref="P:Uno.UI.Xaml.Controls.ScrollViewer.UpdatesModeProperty"/>,
            in order to not access the DP on each scroll (perf considerations)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ScrollViewer.ShouldReportNegativeOffsets">
            <summary>
            If this flag is enabled, the ScrollViewer will report offsets less than 0 and greater than <see cref="P:Windows.UI.Xaml.Controls.ScrollViewer.ScrollableHeight"/> when
            'overscrolling' on iOS. By default this is false, matching Windows behaviour.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ScrollViewer.ComputedIsHorizontalScrollEnabled">
            <summary>
            Determines if the vertical scrolling is allowed or not.
            Unlike the Visibility of the scroll bar, this will also applies to the mousewheel!
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ScrollViewer.ComputedIsVerticalScrollEnabled">
            <summary>
            Determines if the vertical scrolling is allowed or not.
            Unlike the Visibility of the scroll bar, this will also applies to the mousewheel!
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollViewer.ComputeIsScrollAllowed(Windows.UI.Xaml.Controls.ScrollBarVisibility,Windows.UI.Xaml.Controls.ScrollMode)">
            <summary>
            Determines if the scroll has been allowed on that scroll viewer, not matter if scroll is possible or not due to the size of the content.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollViewer.Add(Android.Views.View)">
            <summary>
            Sets the content of the ScrollViewer
            </summary>
            <param name="view"></param>
            <remarks>Used in the context of member initialization</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollViewer.ChangeView(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Single})">
            <summary>
            Causes the ScrollViewer to load a new view into the viewport using the specified offsets and zoom factor, and optionally disables scrolling animation.
            </summary>
            <param name="horizontalOffset">A value between 0 and ScrollableWidth that specifies the distance the content should be scrolled horizontally.</param>
            <param name="verticalOffset">A value between 0 and ScrollableHeight that specifies the distance the content should be scrolled vertically.</param>
            <param name="zoomFactor">A value between MinZoomFactor and MaxZoomFactor that specifies the required target ZoomFactor.</param>
            <returns>true if the view is changed; otherwise, false.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollViewer.ChangeView(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Single},System.Boolean)">
            <summary>
            Causes the ScrollViewer to load a new view into the viewport using the specified offsets and zoom factor, and optionally disables scrolling animation.
            </summary>
            <param name="horizontalOffset">A value between 0 and ScrollableWidth that specifies the distance the content should be scrolled horizontally.</param>
            <param name="verticalOffset">A value between 0 and ScrollableHeight that specifies the distance the content should be scrolled vertically.</param>
            <param name="zoomFactor">A value between MinZoomFactor and MaxZoomFactor that specifies the required target ZoomFactor.</param>
            <param name="disableAnimation">true to disable zoom/pan animations while changing the view; otherwise, false. The default is false.</param>
            <returns>true if the view is changed; otherwise, false.</returns>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollViewer._forceChangeToCurrentView">
             <summary>
             Gets or set whether the <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> will allow scrolling outside of the ScrollViewer's Child bound.
             </summary>
            
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollViewer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SearchBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SemanticZoom.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SettingsFlyout.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Slider.GetSanitizedDimension(System.Double)">
            <summary>
            Replace NaN with 0, because some of the children of this control sometimes have NaN dimensions,
            which messes with our calculations. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Slider.ApplySlideToValue(System.Double)">
            <summary>
            Take the relative position of the slider and update the Value property accordingly
            </summary>
            <param name="slideFraction">Proportion of the total Slider by which the Thumb has advanced</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Slider.ApplyValueToSlide">
            <summary>
            Take the given value and move the slider accordingly.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Slider.GetSnapFrequency">
            <summary>
            Get the snap frequency, given the current values of SnapsTo,
            StepFrequency and TickFrequency, and sanitizing the value
            so that it does not exceed the total range of Value.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Slider.IsTrackerEnabled">
            <summary>
            Enables or disables tracking on the Slider container. <para />
            
            When enabled, the Slider will intercept touch events on the entire container as well as the Thumb.
            This is the default value. <para />
            
            When disabled, only the Thumb will intercept touch events. Therefore, the user cannot tap or drag
            on the bar to change the Slider's value. This is a better option in cases involving Sliders within
            a ScrollView, to avoid the Slider stealing the focus when the user tries to scroll.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Slider.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SplitButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SplitView.UpdateVisualStates(System.Boolean)">
            <summary>
            DisplayModeStates
            -----------------
            Closed
            ClosedCompactLeft
            ClosedCompactRight
            OpenOverlayLeft
            OpenOverlayRight
            OpenInlineLeft
            OpenInlineRight
            OpenCompactOverlayLeft
            OpenCompactOverlayRight
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SplitView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.StackPanel.Spacing">
            <summary>
            Gets or sets a uniform distance (in pixels) between stacked items. It is applied in the direction of the StackPanel's Orientation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.StackPanel.CreateBackgroundSizingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.StackPanel.BackgroundSizingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.StackPanel.CreateBorderBrushProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.StackPanel.BorderBrushProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.StackPanel.CreateBorderThicknessProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.StackPanel.BorderThicknessProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.StackPanel.CreatePaddingProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.StackPanel.PaddingProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.StackPanel.CreateCornerRadiusProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.StackPanel.CornerRadiusProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.StackPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwapChainBackgroundPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwapChainPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeControl.GetAttenuatedPosition(System.Numerics.Vector2)">
            <summary>
            Attenuates the displacement by 50% past the stack panel size.
            This creates an elastic effect.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItem.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItem.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItem.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.Add(Windows.UI.Xaml.Controls.SwipeItem)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.Contains(Windows.UI.Xaml.Controls.SwipeItem)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.CopyTo(Windows.UI.Xaml.Controls.SwipeItem[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.Remove(Windows.UI.Xaml.Controls.SwipeItem)">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Controls.SwipeItems.Count">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Controls.SwipeItems.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.IndexOf(Windows.UI.Xaml.Controls.SwipeItem)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.Insert(System.Int32,Windows.UI.Xaml.Controls.SwipeItem)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Controls.SwipeItems.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SwipeItems.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SymbolIcon.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlock.InitializeProperties">
            <summary>
            Calls On[Property]Changed for most DPs to ensure the values are correctly applied to the native control
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBlock.Inlines">
            <summary>
            Gets an InlineCollection containing the top-level Inline elements that comprise the contents of the TextBlock.
            </summary>
            <remarks>
            Accessing this property initializes an InlineCollection, whose content will be synchronized with the Text.
            This can have a significant impact on performance. Only access this property if absolutely necessary.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBlock.UseInlinesFastPath">
            <summary>
            Gets whether the TextBlock is using the fast path in which Inlines
            have not been initialized and don't need to be synchronized.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBlock.IsLayoutConstrainedByMaxLines">
            <summary>
            Returns if the TextBlock is constrained by a maximum number of lines.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlock.GetEffectiveInlines">
            <summary>
            Gets the inlines which affect the typography of the TextBlock.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlock.InitializeStaticLayoutInterop">
            <summary>
            Finds a private constructor that allows for the specification of MaxLines. 
            </summary>
            <remarks>
            This code may fail in a newer version of android that
            does not provide this exact constructor, DO NOT REUSE AS-IS.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.TextBlock._measureLayout">
            <summary>
            The last build layout will be stored in this two fields.
            Both exists as most of the time, the measured layout size will be different
            from the imposed arrange size, particularly when a control is placed in a 
            StackPanel or a Grid.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.TextBlock._arrangeLayout">
            <summary>
            The last build layout will be stored in this two fields.
            Both exists as most of the time, the measured layout size will be different
            from the imposed arrange size, particularly when a control is placed in a 
            StackPanel or a Grid.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBlock.NativeArrangedColor">
            <summary>
            Used by unit tests to verify that the displayed color matches the nominal managed color.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlock.UpdateLayout(Windows.UI.Xaml.Controls.TextBlock.LayoutBuilder@,Windows.Foundation.Size,System.Boolean)">
            <summary>
            Updates the specified layout using the current properties, and the specified new size.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.TextBlock.LayoutBuilder">
            <summary>
            A layout builder, used to perform change tracking and avoid creating the same layout multiple times.
            </summary>
            <remarks>
            This class is intentionally left here for easier 
            change tracking. This class can be moved later on with no other 
            changes.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBlock.LayoutBuilder.MeasuredSize">
            <summary>
            The size of this layout.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBlock.LayoutBuilder.Layout">
            <summary>
            The layout to be drawn
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlock.LayoutBuilder.#ctor(Java.Lang.ICharSequence,Android.Text.TextPaint,Android.Text.TextUtils.TruncateAt,Android.Text.Layout.Alignment,Android.Text.JustificationMode,Windows.UI.Xaml.TextWrapping,System.Int32,Windows.Foundation.Size,System.Boolean,System.Single,Windows.UI.Xaml.LineStackingStrategy,Windows.UI.Xaml.Controls.TextBlock.LayoutBuilder)">
            <summary>
            Builds a new layout with the specified parameters.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlock.LayoutBuilder.UpdateLayout(Windows.Foundation.Size,System.Boolean)">
            <summary>
            Updates the current TextBlock layout to use the provided width and height.
            </summary>
            <remarks>
            Specifies if the provided width must be used for the new layout, and 
            not "at most" of the widh.
            </remarks>
            <returns>The size of the new layout</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlock.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.TextBox._isInvokingTextChanged">
            <summary>
            Set when <see cref="E:Windows.UI.Xaml.Controls.TextBox.TextChanged"/> event is being raised, to ensure modifications by handlers don't trigger an infinite loop.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.TextBox._isInputModifyingText">
            <summary>
            Set when the <see cref="P:Windows.UI.Xaml.Controls.TextBox.Text"/> property is being modified by user input.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.TextBox._isTextChangedPending">
            <summary>
            Set when <see cref="M:Windows.UI.Xaml.Controls.TextBox.RaiseTextChanged"/> has been dispatched but not yet called.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.TextBox._hasTextChangedThisFocusSession">
             <summary>
             True if Text has changed while the TextBox has had focus, false otherwise
            
             This flag is checked to avoid pushing a value to a two-way binding if no edits have occurred, per UWP's behavior.
             </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBox.OnPointerReleased(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBox.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBox.ProcessTextInput(System.String)">
            <summary>
            Respond to text input from user interaction.
            </summary>
            <param name="newText">The most recent version of the text from the input field.</param>
            <returns>The value of the <see cref="P:Windows.UI.Xaml.Controls.TextBox.Text"/> property, which may have been modified programmatically.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBox.ShouldForceDisableSpellCheck">
            <summary>
            If true, and <see cref="P:Windows.UI.Xaml.Controls.TextBox.IsSpellCheckEnabled"/> is false, take vigorous measures to ensure that spell-check (ie predictive text) is
            really disabled.
            </summary>
            <remarks>
            Specifically, when true, and <see cref="P:Windows.UI.Xaml.Controls.TextBox.IsSpellCheckEnabled"/> is false, this sets <see cref="F:Android.Text.InputTypes.TextVariationPassword"/> on
            the inner <see cref="T:Windows.UI.Xaml.Controls.TextBoxView"/>. This is required because a number of OEM keyboards (particularly on older devices?) ignore
            the <see cref="F:Android.Text.InputTypes.TextFlagNoSuggestions"/>. It's optional because setting the password InputType is a workaround which is
            known to cause issues in certain circumstances. See discussion here: https://stackoverflow.com/a/5188119/1902058
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBox.PreventKeyboardDisplayIfSet">
            <summary>
            Applies PreventKeyboardDisplayOnProgrammaticFocus by temporarily disabling soft input display.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.TextBox.TextBoxStringBuilder">
            <summary>
            Subclass of <see cref="T:Android.Text.SpannableStringBuilder"/> which allows input text to be modified by <see cref="T:Windows.UI.Xaml.Controls.TextBox"/>'s event handlers. 
            </summary>
            <remarks>
            Overriding the <see cref="M:Windows.UI.Xaml.Controls.TextBox.TextBoxStringBuilder.Replace(System.Int32,System.Int32,Java.Lang.ICharSequence,System.Int32,System.Int32)"/> method is more powerful than applying an <see cref="T:Android.Text.IInputFilter"/>
            to the native text field, because we can make arbitrary modifications to the entire content string, whereas <see cref="T:Android.Text.IInputFilter"/> only
            allows modifications to the new text being added to the buffer.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.TextBox.TextBoxInputConnection">
             <summary>
             Intercepts communication between the software keyboard and <see cref="T:Windows.UI.Xaml.Controls.TextBoxView"/>, in order to prevent incorrect changes.
             </summary>
             <remarks>
             Certain keyboards get confused when the input string is changed by TextChanging, particularly in the case of predictive text. We
             override the <see cref="M:Windows.UI.Xaml.Controls.TextBoxView.OnCreateInputConnection(Android.Views.InputMethods.EditorInfo)"/> method to intercept erroneous changes.
            
             Most overrides are delegated to the EditableInputConnection object returned by the base EditText.OnCreateInputConnection() method (which can't
             be directly subclassed because it's internal).
             </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TimePickedEventArgs.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TimePickedEventArgs.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TimePickedEventArgs.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TimePicker.LightDismissOverlayBackground">
            <summary>
            Sets the light-dismiss colour, if the overlay is enabled. The external API for modifying this is to override the PopupLightDismissOverlayBackground, etc, static resource values.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TimePicker.BindToFlyout(System.String)">
            <summary>
            Apply 2-way binding to equivalent property on TimePickerFlyout
            </summary>
            <param name="propertyName">The property to 2-way bind</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TimePicker.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TimePickerFlyoutPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSplitButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ToggleSwitch">
            <summary>
            Represents a switch that can be toggled between two states.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSwitch.#ctor">
            <summary>
            Initializes a new instance of the ToggleSwitch class.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.ToggleSwitch.Toggled">
            <summary>
            Occurs when "On"/"Off" state changes for this ToggleSwitch.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.Header">
            <summary>
            Gets or sets the header content.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.HeaderTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the control's header.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.IsOn">
            <summary>
            Gets or sets a value that declares whether the state of the ToggleSwitch is "On".
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty">
            <summary>
            Identifies the IsOn dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.OffContent">
            <summary>
            Provides the object content that should be displayed using the OffContentTemplate when this ToggleSwitch has state of "Off".
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.OffContentProperty">
            <summary>
            Identifies the OffContent dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.OffContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the control's content while in "Off" state.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.OffContentTemplateProperty">
            <summary>
            Identifies the OffContentTemplate dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.OnContent">
            <summary>
            Provides the object content that should be displayed using the OnContentTemplate when this ToggleSwitch has state of "On".
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.OnContentProperty">
            <summary>
            Identifies the OnContent dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.OnContentTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the control's content while in "On" state.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.OnContentTemplateProperty">
            <summary>
            Identifies the OnContentTemplate dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ToggleSwitch.TemplateSettings">
            <summary>
            Gets an object that provides calculated values that can be referenced as TemplateBinding sources when defining templates for a ToggleSwitch control.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSwitch.GetDefaultValue2(Windows.UI.Xaml.DependencyProperty,System.Object@)">
            <summary>
            Gives the default values for our properties.
            </summary>
            <param name="dependencyProperty"></param>
            <param name="value"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSwitch.OnPointerCaptureLost(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSwitch.HandlesKey(Windows.System.VirtualKey)">
            <summary>
            Whether the given key may cause the ToggleSwitch to toggle.
            </summary>
            <param name="key">Key.</param>
            <returns>Handled?</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSwitch.OnIsEnabledChanged(Windows.UI.Xaml.IsEnabledChangedEventArgs)">
            <summary>
            Called when the IsEnabled property changes.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSwitch.OnVisibilityChanged">
            <summary>
            Update the visual states when the Visibility property is changed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSwitch.UpdateHeaderPresenterVisibility">
            <summary>
            Updates the visibility of the Header ContentPresenter
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToggleSwitch.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToolTip.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeViewItemTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeViewList.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeViewNode.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeViewNode.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TreeViewNode.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TwoPaneView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.UserControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VariableSizedWrapGrid.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Viewbox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingStackPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.WebView.InternalWebChromeClient.StartActivity``1(System.Threading.CancellationToken)">
            <summary>
            Uses the Activity Tracker to start, then return an Activity
            </summary>
            <typeparam name="T">A BaseActivity to start</typeparam>
            <param name="ct">CancellationToken</param>
            <returns>The BaseActivity that just started (OnResume called)</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.WebView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.WrapGrid.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AnimatedVisualPlayer.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.AnimatedVisualPlayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ClickMode">
            <summary>Specifies when the Click event should be raised for a control.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ClickMode.Release">
            <summary>Specifies that the Click event should be raised when the left mouse button is pressed and released, and the mouse pointer is over the control. If you are using the keyboard, specifies that the Click event should be raised when the SPACEBAR or ENTER key is pressed and released, and the control has keyboard focus.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ClickMode.Press">
            <summary>Specifies that the Click event should be raised when the mouse button is pressed and the mouse pointer is over the control. If you are using the keyboard, specifies that the Click event should be raised when the SPACEBAR or ENTER key is pressed and the control has keyboard focus.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ClickMode.Hover">
            <summary>Specifies that the Click event should be raised when the mouse pointer moves over the control.</summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarLayoutStrategy.VirtualizationDirection">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewBaseItem.IsViewHit">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewBaseItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewGeneratorHost.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewGeneratorHost.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewGeneratorHost.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewHeaderAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Controls.CalendarViewItem.DateBase">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewItem.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CalendarViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ImplicitTextBlock">
            <summary>
            A special textblock that will not inherit from the default style of a TextBlock. This type should not be used directly.
            </summary>
            <remarks>This is required to ensure that content controls that are given no ContentTemplate 
            are using the proper inherited properties, and not the implicit or default style of a TextBlock.
            Do to this, we just ignore the default style of a TextBlock.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ImplicitTextBlock.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ImplicitTextBlock.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ContentDialogPopupPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.DatePickerSelector">
            <summary>
            Shows an interface for selecting a date. Used as the content of DatePickerFlyout, and can also be used in other templates.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.DatePickerSelector.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeDatePickerFlyoutPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.FlyoutBasePopupPanel">
            <summary>
            PopupPanel implementation for <see cref="T:Windows.UI.Xaml.Controls.Primitives.FlyoutBase"/>.
            </summary>
            <remarks>
            This panel is *NOT* used by types derived from <see cref="T:Windows.UI.Xaml.Controls.Primitives.PickerFlyoutBase"/>. Pickers use a plain
            <see cref="T:Windows.UI.Xaml.Controls.Primitives.PopupPanel"/> (see <see cref="M:Windows.UI.Xaml.Controls.Primitives.PickerFlyoutBase.InitializePopupPanel"/>).
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.FlyoutBasePopupPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GridExtensions.GridRow``1(``0,System.Int32)">
            <summary>
            Sets the row for the specified control, when included in a Grid control. 
            </summary>
            <param name="row">The row to be set for the control</param>
            <returns>The view to be used in a fluent expression.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GridExtensions.GridRowSpan``1(``0,System.Int32)">
            <summary>
            Sets the row for the specified control, when included in a Grid control. 
            </summary>
            <param name="rowSpan">The row to be set for the control</param>
            <returns>The view to be used in a fluent expression.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GridExtensions.GridColumn``1(``0,System.Int32)">
            <summary>
            Sets the column for the specified control, when included in a Grid control. 
            </summary>
            <param name="column">The column to be set for the control</param>
            <returns>The view to be used in a fluent expression.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GridExtensions.GridColumnSpan``1(``0,System.Int32)">
            <summary>
            Sets the column span for the specified control, when included in a Grid control. 
            </summary>
            <param name="columnSpan">The column to be set for the control</param>
            <returns>The view to be used in a fluent expression.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.GridExtensions.GridPosition``1(``0,System.Int32,System.Int32)">
            <summary>
            Sets the column and row for the specified control, when included in a Grid control. 
            </summary>
            <param name="column">The column to be set for the control</param>
            <returns>The view to be used in a fluent expression.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.IconElement.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ItemsStackPanelLayout">
            <summary>
            A native layout which implements <see cref="T:Windows.UI.Xaml.Controls.ItemsStackPanel"/> behaviour.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.IVirtualizingPanel">
            <summary>
            A panel which supports virtualization when used in <see cref="T:Windows.UI.Xaml.Controls.ListViewBase"/>. On Uno this is supported by delegating the panel's responsibilities
            to <see cref="T:Windows.UI.Xaml.Controls.NativeListViewBase"/>, which inherits from a native collection view.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.IVirtualizingPanel.GetLayouter">
            <summary>
            Get a native layout object with the same layout configuration as the panel and is databound to the panel's properties.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ItemsWrapGridLayout">
            <summary>
            A native layout which implements <see cref="T:Windows.UI.Xaml.Controls.ItemsWrapGrid"/> behaviour.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ResolveAvailableWidth(System.Int32)">
            <summary>
            Resolve the width available for a single item view, using, in decreasing order of priority, the <see cref="P:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ItemWidth"/> if 
            defined, the width of the first item in the grid, or the maximum available space if we are measuring the first item.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ResolveAvailableHeight(System.Int32)">
            <summary>
            Resolve the height available for a single item view, using, in decreasing order of priority, the <see cref="P:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ItemHeight"/> if 
            defined, the height of the first item in the grid, or the maximum available space if we are measuring the first item.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ResolveItemBreadth">
            <summary>
            Resolve the breadth of items in the grid, if it is known.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ResolveItemExtent">
            <summary>
            Resolve the extent of items in the grid, if it is known.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ResolveItemWidth">
            <summary>
            Resolve the width of items in the grid, if it is known.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ResolveItemHeight">
            <summary>
            Resolve the height of items in the grid, if it is known.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.ResolveMaximumItemsInLine(System.Int32)">
            <summary>
            Resolve the items per line, limited by dimensions and/or <see cref="P:Windows.UI.Xaml.Controls.ItemsWrapGridLayout.MaximumRowsOrColumns"/>
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ILayouter.Measure(Windows.Foundation.Size)">
            <summary>
            Measures the current layout
            </summary>
            <param name="availableSize">The available size in virtual pixels</param>
            <returns>The measured size in virtual pixels</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ILayouter.Arrange(Windows.Foundation.Rect)">
            <summary>
            Arranges the current layout.
            </summary>
            <param name="finalSize">The maximum size to use when arranging the layout</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ILayouter.MeasureChild(Android.Views.View,Windows.Foundation.Size)">
            <summary>
            Measures the specified child.
            </summary>
            <param name="view">The view to measure</param>
            <param name="slotSize">The maximum size the child can use.</param>
            <returns>The size the view requires.</returns>
            <remarks>
            Provides the ability for external implementations to measure children.
            Mainly used for compatibility with existing WPF/WinRT implementations.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ILayouter.ArrangeChild(Android.Views.View,Windows.Foundation.Rect)">
            <summary>
            Arranges the specified view.
            </summary>
            <param name="view">The view to arrange</param>
            <param name="frame">The frame available for the child.</param>
            <remarks>
            Provides the ability for external implementations to measure children.
            Mainly used for compatibility with existing WPF/WinRT implementations.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ILayouter.GetDesiredSize(Android.Views.View)">
            <summary>
            Provides the desired size of the element, from the last measure phase.
            </summary>
            <param name="element">The element to get the measured with</param>
            <returns>The measured size</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Layouter.Measure(Windows.Foundation.Size)">
            <summary>
            Determine the size of the panel.
            </summary>
            <param name="availableSize">The available size, in logical pixels.</param>
            <returns>The size of the panel, in logical pixel.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Layouter.Arrange(Windows.Foundation.Rect)">
            <summary>
            Places the children of the panel using a specific size, in logical pixels.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Layouter.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Determine the size of the panel.
            </summary>
            <param name="availableSize">The available size, in logical pixels.</param>
            <returns>The size of the panel, in logical pixel.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Layouter.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Places the children of the panel using a specific size, in logical pixels.
            </summary>
            <param name="finalSize">The final panel size</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Layouter.Windows#UI#Xaml#Controls#ILayouter#GetDesiredSize(Android.Views.View)">
            <summary>
            Provides the desired size of the element, from the last measure phase.
            </summary>
            <param name="view">The element to get the measured with</param>
            <returns>The measured size</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Layouter.ArrangeChild(Android.Views.View,Windows.Foundation.Rect)">
            <summary>
            Arranges the location a child in the current panel
            </summary>
            <param name="view">The child instance</param>
            <param name="frame">The rectangle to use, in Logical position</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Layouter.Windows#UI#Xaml#Controls#ILayouter#ArrangeChild(Android.Views.View,Windows.Foundation.Rect)">
            <summary>
            Measures the specified child.
            </summary>
            <param name="view">The view to measure</param>
            <param name="slotSize">The maximum size the child can use.</param>
            <returns>The size the view requires.</returns>
            <remarks>
            Provides the ability for external implementations to measure children.
            Mainly used for compatibility with existing WPF/WinRT implementations.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Layouter.Windows#UI#Xaml#Controls#ILayouter#MeasureChild(Android.Views.View,Windows.Foundation.Size)">
            <summary>
            Arranges the specified view.
            </summary>
            <param name="view">The view to arrange</param>
            <param name="frame">The frame available for the child.</param>
            <remarks>
            Provides the ability for external implementations to measure children.
            Mainly used for compatibility with existing WPF/WinRT implementations.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.CollectionChangedOperation">
            <summary>
            Temporary record of an <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> operation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CollectionChangedOperation.Offset(Uno.UI.IndexPath)">
            <summary>
            Apply the offset to a collection index resulting from this collection operation.
            </summary>
            <param name="indexPath">The index in the collection prior to the operation</param>
            <returns>The offset position, or null if this position is no longer valid (ie because it has been removed by the operation).</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.CollectionChangedOperation.Offset(Uno.UI.IndexPath,System.Collections.Generic.IEnumerable{Windows.UI.Xaml.Controls.CollectionChangedOperation})">
            <summary>
            Sequentially applies offsets to a collection index resulting from multiple collection operations.
            </summary>
            <param name="index">The index in the collection prior to the operation</param>
            <param name="collectionChanges">The changes to be applied, in order from oldest to newest.</param>
            <returns>The offset position, or null if this position is no longer valid (ie because it has been removed by one of the operations).</returns>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Deque`1">
            <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
            <typeparam name="T">The type of elements contained in the deque.</typeparam>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Deque`1.DefaultCapacity">
            <summary>
            The default capacity.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Deque`1._buffer">
            <summary>
            The circular _buffer that holds the view.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Deque`1._offset">
            <summary>
            The offset into <see cref="F:Windows.UI.Xaml.Controls.Deque`1._buffer"/> where the view begins.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Windows.UI.Xaml.Controls.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Windows.UI.Xaml.Controls.Deque`1"/> class with the elements from the specified collection.
            </summary>
            <param name="collection">The collection. May not be <c>null</c>.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Windows.UI.Xaml.Controls.Deque`1"/> class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether this list is read-only. This implementation always returns <c>false</c>.
            </summary>
            <returns>true if this list is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in this list.</exception>
            <exception cref="T:System.NotSupportedException">This property is set and the list is read-only.</exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into this list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in this list.
            </exception>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in this list.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>The index of <paramref name="item"/> if found in this list; otherwise, -1.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the end of this list.
            </summary>
            <param name="item">The object to add to this list.</param>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether this list contains a specific value.
            </summary>
            <param name="item">The object to locate in this list.</param>
            <returns>
            true if <paramref name="item"/> is found in this list; otherwise, false.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this list to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this slice. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.CopyToArray(System.Array,System.Int32)">
            <summary>
            Copies the deque elements into an array. The resulting array always has all the deque elements contiguously.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The optional index in the destination array at which to begin writing.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
            <param name="item">The object to remove from this list.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item"/> is not found in this list.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="index"/> argument to see if it refers to an existing element in a source of a given length.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="index">The index into the source.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an existing element for the source.</exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the <paramref name="offset"/> and <paramref name="count"/> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
            <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
            <param name="offset">The index into source at which the range begins.</param>
            <param name="count">The number of elements in the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Deque`1.IsFull">
            <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Deque`1.IsSplit">
            <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Windows.UI.Xaml.Controls.Deque`1._buffer"/> than the end).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Deque`1.Capacity">
            <summary>
            Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be set to a value less than <see cref="P:Windows.UI.Xaml.Controls.Deque`1.Count"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>Capacity</c> cannot be set to a value less than <see cref="P:Windows.UI.Xaml.Controls.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.Deque`1.Count">
            <summary>
            Gets the number of elements contained in this deque.
            </summary>
            <returns>The number of elements contained in this deque.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DequeIndexToBufferIndex(System.Int32)">
            <summary>
            Applies the offset to <paramref name="index"/>, resulting in a buffer index.
            </summary>
            <param name="index">The deque index.</param>
            <returns>The buffer index.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoGetItem(System.Int32)">
            <summary>
            Gets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoSetItem(System.Int32,`0)">
            <summary>
            Sets an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoInsert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
            <param name="item">The element to store in the list.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoRemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified view index.
            </summary>
            <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.PostIncrement(System.Int32)">
            <summary>
            Increments <see cref="F:Windows.UI.Xaml.Controls.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:Windows.UI.Xaml.Controls.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to increase <see cref="F:Windows.UI.Xaml.Controls.Deque`1._offset"/>. May not be negative.</param>
            <returns>The value of <see cref="F:Windows.UI.Xaml.Controls.Deque`1._offset"/> after it was incremented.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.PreDecrement(System.Int32)">
            <summary>
            Decrements <see cref="F:Windows.UI.Xaml.Controls.Deque`1._offset"/> by <paramref name="value"/> using modulo-<see cref="P:Windows.UI.Xaml.Controls.Deque`1.Capacity"/> arithmetic.
            </summary>
            <param name="value">The value by which to reduce <see cref="F:Windows.UI.Xaml.Controls.Deque`1._offset"/>. May not be negative or greater than <see cref="P:Windows.UI.Xaml.Controls.Deque`1.Capacity"/>.</param>
            <returns>The value of <see cref="F:Windows.UI.Xaml.Controls.Deque`1._offset"/> before it was decremented.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoAddToBack(`0)">
            <summary>
            Inserts a single element to the back of the view. <see cref="P:Windows.UI.Xaml.Controls.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoAddToFront(`0)">
            <summary>
            Inserts a single element to the front of the view. <see cref="P:Windows.UI.Xaml.Controls.Deque`1.IsFull"/> must be false when this method is called.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoRemoveFromBack">
            <summary>
            Removes and returns the last element in the view. <see cref="P:Windows.UI.Xaml.Controls.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former last element.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoRemoveFromFront">
            <summary>
            Removes and returns the first element in the view. <see cref="P:Windows.UI.Xaml.Controls.Deque`1.IsEmpty"/> must be false when this method is called.
            </summary>
            <returns>The former first element.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Inserts a range of elements into the view.
            </summary>
            <param name="index">The index into the view at which the elements are to be inserted.</param>
            <param name="collection">The elements to insert. The sum of <c>collection.Count</c> and <see cref="P:Windows.UI.Xaml.Controls.Deque`1.Count"/> must be less than or equal to <see cref="P:Windows.UI.Xaml.Controls.Deque`1.Capacity"/>.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the view.
            </summary>
            <param name="index">The index into the view at which the range begins.</param>
            <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:Windows.UI.Xaml.Controls.Deque`1.Count"/>.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.EnsureCapacityForOneElement">
            <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:Windows.UI.Xaml.Controls.Deque`1.IsFull"/> is false.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.AddToBack(`0)">
            <summary>
            Inserts a single element at the back of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.AddToFront(`0)">
            <summary>
            Inserts a single element at the front of this deque.
            </summary>
            <param name="value">The element to insert.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of elements into this deque.
            </summary>
            <param name="index">The index at which the collection is inserted.</param>
            <param name="collection">The collection of elements to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index to an insertion point for the source.</exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from this deque.
            </summary>
            <param name="offset">The index into the deque at which the range begins.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset"/> or <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The range [<paramref name="offset"/>, <paramref name="offset"/> + <paramref name="count"/>) is not within the range [0, <see cref="P:Windows.UI.Xaml.Controls.Deque`1.Count"/>).</exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.RemoveFromBack">
            <summary>
            Removes and returns the last element of this deque.
            </summary>
            <returns>The former last element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.RemoveFromFront">
            <summary>
            Removes and returns the first element of this deque.
            </summary>
            <returns>The former first element.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.Clear">
            <summary>
            Removes all items from this deque.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.Deque`1.ToArray">
            <summary>
            Creates and returns a new array containing the elements in this deque.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ListViewBaseScrollContentPresenter">
            <summary>
            An Uno-only class which allows the <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/> within a <see cref="T:Windows.UI.Xaml.Controls.ListViewBase"/> template
            to host a native collection view. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ListViewBaseScrollContentPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ScrollOrientation">
            <summary>
            The direction of scroll.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ShouldBreadthStretch">
            <summary>
            Whether the content should be stretched in breadth (ie perpendicular to the direction of scroll).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.IsInsidePopup">
            <summary>
            Determines if the owner Panel is inside a popup. Used to determine
            if the computation of the breadth should be using the parent's stretch
            modes.
            Related: https://github.com/unoplatform/uno/issues/135
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.GetNextUnmaterializedItem(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Nullable{Uno.UI.IndexPath})">
            <summary>
            Get the index of the next item that has not yet been materialized in the nominated fill direction. Returns null if there are no more available items in the source.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout._materializedLines">
            <summary>
            Ordered record of all currently-materialized lines.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout._averageLineHeight">
            <summary>
            The current average line height based on materialized lines. Used to estimate scroll extent of unmaterialized items.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout._dynamicSeedIndex">
            <summary>
            The previous item to the old first visible item, used when a lightweight layout rebuild is called.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout._dynamicSeedStart">
            <summary>
            Start position of the old first group, used when a lightweight layout rebuild is called.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout._pendingCollectionChanges">
            <summary>
            Pending collection changes to be processed when the list is re-measured.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout._scrollAdjustmentForCollectionChanges">
            <summary>
            Pending scroll adjustment, if an item has been added/removed backward of the current visible viewport by a collection change.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ScrollOffset">
            <summary>
            The current offset from the original scroll position.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ViewportSize">
            <summary>
            The size of the scroll viewport.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ViewportExtent">
            <summary>
            The extent (parallel to scroll direction) of the scroll viewport.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ViewportStart">
            <summary>
            The start of the visible viewport, relative to the start of the panel.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ViewportEnd">
            <summary>
            The end of the visible viewport, relative to the end of the panel.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ViewportExtension">
            <summary>
            The additional length in pixels for which to create buffered views.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ExtendedViewportStart">
            <summary>
            The start of the 'extended viewport,' the area of the visible viewport plus the buffer area defined by <see cref="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.CacheLength"/>.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ExtendedViewportEnd">
            <summary>
            The end of the 'extended viewport,' the area of the visible viewport plus the buffer area defined by <see cref="P:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.CacheLength"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.GetScrollConsumptionIncrement(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection)">
            <summary>
            Get the increment to consume scroll changes, based on the size of the disappearing view.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.UpdateLayout(System.Nullable{System.Double},System.Boolean)">
            <summary>
            Update the item container layout by removing no-longer-visible views and adding visible views.
            </summary>
            <param name="extentAdjustment">Adjustment to apply when calculating fillable area.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.UpdateCompleted">
            <summary>
            Called after an update cycle is completed. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.FillLayout(System.Double)">
            <summary>
            Fill in extended viewport with views.
            </summary>
            <param name="extentAdjustment">Adjustment to apply when calculating fillable area.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.UnfillLayout(System.Double)">
            <summary>
            Remove views that lie entirely outside extended viewport.
            </summary>
            <param name="extentAdjustment">Adjustment to apply when calculating fillable area.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.RecycleLine(Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.Line)">
            <summary>
            Recycle all views for a given line.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ScrapLine(Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.Line)">
            <summary>
            Send views in line to temporary scrap.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.CorrectForEstimationErrors">
            <summary>
            Item positions relative to the start of the panel are an estimate, which may be incorrect eg if unmaterialized items were added/removed
            or had their databound heights changed. Here we try to correct it.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ApplyCollectionChanges">
            <summary>
            If there are pending collection changes, update values and prepare the layouter accordingly.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ApplyScrollAdjustmentForCollectionChange(System.Double)">
            <summary>
            Update scroll offset for changes in position from collection change operation
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.IsScrolledToStart">
            <summary>
            True if the scroll position is right at the start of the list.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.IsScrolledToEnd">
            <summary>
            True if the scroll position is all the way to the end of the list.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.EstimatePanelSize(System.Boolean)">
            <summary>
            Estimate the 'correct' size of the panel.
            </summary>
            <param name="isMeasure">True if this is called from measure, false if after arrange.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.EstimatePanelExtent">
            <summary>
            Estimate the 'correct' extent of the panel, based on number and guessed size of remaining unmaterialized items.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.LightRefresh">
            <summary>
            Update the display of the panel without clearing caches.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ScrapLayout">
            <summary>
            Sends all views to temporary scrap, in preparation for a lightweight layout rebuild.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.GetDynamicSeedIndex(System.Nullable{Uno.UI.IndexPath})">
            <summary>
            Get 'seed' index for recreating the visual state of the list after <see cref="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ScrapLayout"/>;
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.CreateLine(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Double,System.Double,Uno.UI.IndexPath)">
            <summary>
            Create a new line.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.Line">
            <summary>
            Represents a single row in a vertically-scrolling panel, or a column in a horizontally-scrolling panel.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ManagedVirtualizingPanelLayout.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.NativeListViewBase._isInAnimatedScroll">
            <summary>
            Is the RecyclerView currently undergoing animated scrolling, either user-initiated or programmatic.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.SnapPointsSnapHelper.CalculateDistanceToFinalSnap(AndroidX.RecyclerView.Widget.RecyclerView.LayoutManager,Android.Views.View)">
            <summary>
            Called immediately on drag release, or once fling has 'found' the view for target position, to determine the remaining 
            scroll offset to apply. This will determine where the target view is positioned in the viewport. It will only be called 
            if <see cref="M:Windows.UI.Xaml.Controls.NativeListViewBase.SnapPointsSnapHelper.FindSnapView(AndroidX.RecyclerView.Widget.RecyclerView.LayoutManager)"/> or <see cref="M:Windows.UI.Xaml.Controls.NativeListViewBase.SnapPointsSnapHelper.FindTargetSnapPosition(AndroidX.RecyclerView.Widget.RecyclerView.LayoutManager,System.Int32,System.Int32)"/> has 
            previously returned a valid view/position.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.SnapPointsSnapHelper.FindSnapView(AndroidX.RecyclerView.Widget.RecyclerView.LayoutManager)">
            <summary>
            Called when drag is released (ie no fling) to find an existing materialized view to snap to. Here we simply set the 
            velocity sign to 0 and return an arbitrary view; the actual snap logic is in <see cref="M:Windows.UI.Xaml.Controls.NativeListViewBase.SnapPointsSnapHelper.CalculateDistanceToFinalSnap(AndroidX.RecyclerView.Widget.RecyclerView.LayoutManager,Android.Views.View)"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.SnapPointsSnapHelper.FindTargetSnapPosition(AndroidX.RecyclerView.Widget.RecyclerView.LayoutManager,System.Int32,System.Int32)">
            <summary>
            Called when fling begins to find an adapter position to snap to. Here we simply set the velocity sign correctly and return 
            an arbitrary position; the actual snap logic is in <see cref="M:Windows.UI.Xaml.Controls.NativeListViewBase.SnapPointsSnapHelper.CalculateDistanceToFinalSnap(AndroidX.RecyclerView.Widget.RecyclerView.LayoutManager,Android.Views.View)"/>.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeListViewBase.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeListViewBase.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.NativeListViewBase.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.NativeListViewBase.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeListViewBase.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeListViewBase.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeListViewBase.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeListViewBase.RenderTransformOriginProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.RenderTransformOrigin"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeListViewBase.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeListViewBase.IsEffectiveViewportEnabled">
            <summary>
            Indicates if the effective viewport should/will be propagated to/by this element
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.ReconfigureViewportPropagation(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Make sure to request or disable effective viewport changes from the parent
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#RequestViewportUpdates(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Used by a child of this element, in order to subscribe to viewport updates
            (so the OnParentViewportChanged will be invoked on this given child)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#OnParentViewportChanged(System.Boolean,System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport,Windows.UI.Xaml.ViewportInfo)">
            <summary>
            Used by a parent element to propagate down the viewport change
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeListViewBase.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator">
            <summary>
            Handles creation, recycling and binding of items for an <see cref="T:Windows.UI.Xaml.Controls.IVirtualizingPanel"/>.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.MaxCacheLimit">
            <summary>
            Maxmimum number of cached items per DataTemplate group.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.MinCacheLimit">
            <summary>
            Minimum number of cached items per DataTemplate group.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator._cacheLimit">
            <summary>
            Current cache limit, to be adjusted based on the extent size
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator._itemContainerCache">
            <summary>
            Recycled item containers that can be reused as needed. This is actually multiple caches indexed by template id.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator._idCache">
             <summary>
             Caching the id is more efficient, and also important in the case of the ItemsSource changing, when the (former) item may no longer be in the new collection.
            
             Key == item index, Value = template id
             </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator._scrapCache">
            <summary>
            Items that have been temporarily scrapped and can be reused without being rebound.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.CacheLimit">
            <summary>
            Sets the items cache limit per DataTemplate group
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.DequeueViewForItem(System.Int32)">
            <summary>
            Returns a container view bound to the item at <paramref name="index"/>, recycling an available view if possible, or creating a new container if not.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.TryDequeueCachedContainer(System.Int32)">
            <summary>
            Try to retrieve a cached container for a given template <paramref name="id"/>. Returns null if none is available.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.TryGetScrappedContainer(System.Int32)">
            <summary>
            Try to retrieve a temporarily-scrapped container for given item <paramref name="index"/>. Returns null if none is available.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.RecycleViewForItem(Windows.UI.Xaml.FrameworkElement,System.Int32)">
            <summary>
            Return a container to the reuse pool once it has finished being displayed.
            </summary>
            <param name="container">The item container to recycle.</param>
            <param name="index">The item index that the container was being used for.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.DiscardContainer(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Completely remove an item container that will not be reused again.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.ScrapViewForItem(Windows.UI.Xaml.FrameworkElement,System.Int32)">
            <summary>
            Send view to temporary scrap. Intended for use during lightweight layout rebuild. Views in scrap will be reused without being rebound if a view for that position is requested.
            </summary>
            <param name="container">The item container to scrap</param>
            <param name="index">The item index that the container is currently bound to</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.ClearScrappedViews">
            <summary>
            Empty scrap, this should be called after a lightweight layout rebuild.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.UpdateVisibilities">
            <summary>
            Hide cached views that are no longer displaying materialized items. Doing this in a single batch, rather than repeatedly toggling
            the visibility as items are recycled and then reused, significantly improves scrolling performance in WebAssembly.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.UpdateForCollectionChanges(System.Collections.Generic.Queue{Windows.UI.Xaml.Controls.CollectionChangedOperation})">
            <summary>
            Update cache indices for pending collection updates.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelGenerator.GetItemId(System.Int32)">
            <summary>
            Get the container reuse ID associated with the item <paramref name="index"/>, based on the template associated with it (eg if <see cref="P:Windows.UI.Xaml.Controls.ItemsControl.ItemTemplateSelector"/> is set)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.IsInsidePopup">
            <summary>
            Determines if the owner Panel is inside a popup. Used to determine
            if the computation of the breadth should be using the parent's stretch
            modes.
            Related: https://github.com/unoplatform/uno/issues/135
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ScrollOrientation">
            <summary>
            The direction of scroll.
            </summary>
            <remarks>For <see cref="T:Windows.UI.Xaml.Controls.ItemsStackPanel"/> layouting this is identical to <see cref="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Orientation"/> but for <see cref="T:Windows.UI.Xaml.Controls.ItemsWrapGrid"/> it is the opposite of <see cref="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Orientation"/>.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.RelativeGroupHeaderPlacement">
            <summary>
            The placement of group headers with respect to the scroll direction of the panel.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Orientation">
            <summary>
            Bound to <see cref="P:Windows.UI.Xaml.Controls.ItemsStackPanel.Orientation"/> or <see cref="P:Windows.UI.Xaml.Controls.ItemsWrapGrid.Orientation"/>.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ShouldBreadthStretch">
            <summary>
            Whether the content should be stretched in breadth (ie perpendicular to the direction of scroll).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetSnapTo(System.Single,System.Single)">
            <summary>
            Get target snap point, based on scroll velocity sign, current scroll offset, and snap settings.
            </summary>
            <returns>The snap point to snap to, or null if no snapping should occur.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetNextUnmaterializedItem(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Nullable{Uno.UI.IndexPath})">
            <summary>
            Get the index of the next item that has not yet been materialized in the nominated fill direction. Returns null if there are no more available items in the source.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ViewType">
            Notes: For the sake of minimizing conditional branches, almost all the layouting logic is carried out relative to the scroll 
            direction. To avoid confusion, a number of terms are used in place of terms like 'width' and 'height':
            
            Extent: Size along the dimension parallel to scrolling. The equivalent of 'Height' if scrolling is vertical, or 'Width' otherwise.
            Breadth: Size along the dimension orthogonal to scrolling. The equivalent of 'Width' if scrolling is vertical, or 'Height' otherwise.
            Start: The edge of the element nearest to the top of the content panel, ie 'Top' or 'Left' depending whether scrolling is vertical or horizontal.
            End: The edge of the element nearest to the bottom of the content panel, ie 'Bottom' or 'Right' depending whether scrolling is vertical or horizontal.
            
            Leading: When scrolling, the edge that is coming into view. ie, if the scrolling forward in a vertical orientation, the bottom edge.
            Trailing: When scrolling, the edge that is disappearing from view.
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelLayout._groups">
            <summary>
            Stores the layout state of materialized items. All layout coordinates are relative to the viewport, in physical pixels.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelLayout._needsHeaderAndFooterUpdate">
            <summary>
            Header and/or footer's content and/or template have changed, they need to be updated.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelLayout._needsUpdateAfterCollectionChange">
            <summary>
            The items collection has been modified and the subsequent relayout is pending.
            </summary>
            <remarks>
            Much of the time this is handled automatically by RecyclerView, but there are edge cases (modifications while list was unloaded,
            or when no ItemAnimator is set) that need special attention.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelLayout._shouldDecrementSeedForPendingReorder">
            <summary>
            If we're moving an item from before the topmost visible item to after it, then its position will immediately decrease
            by one. We should decrement the seed to anticipate this and prevent it jumping out of view.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ItemViewCount">
            <summary>
            The count of views that correspond to collection items (and not group headers, etc)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.FirstItemView">
            <summary>
            The index of the first child view that is an item (ie not a header/footer/group header).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelLayout._pendingReorder">
            <summary>
            State of a drag-to-reorder operation in flight.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.VirtualizingPanelLayout._pendingReorderScrollAdjustment">
            <summary>
            The pending expected adjustment to the position as a result of requested scroll, used while reordering to correct the pointer position.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.OnLayoutChildren(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            "Lay out all relevant child views from the given adapter." https://developer.android.com/reference/AndroidX.RecyclerView.Widget/RecyclerView.LayoutManager.html#onLayoutChildren(AndroidX.RecyclerView.Widget.RecyclerView.Recycler, AndroidX.RecyclerView.Widget.RecyclerView.State)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ApplyScrollToPosition(System.Int32,Windows.UI.Xaml.Controls.ScrollIntoViewAlignment,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Apply a requested ScrollToPosition during layouting by calling <see cref="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ScrollByInner(System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)"/>
            until the requested item is visible.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetStickyGroupHeaderExtent">
            <summary>
            Get extent of currently sticking group header (if any)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.RemoveAllViews">
            <summary>
            Removes all child views and wipes the internal state of the <see cref="T:Windows.UI.Xaml.Controls.VirtualizingPanelLayout"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.OnMeasure(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State,System.Int32,System.Int32)">
            <summary>
            Called when the owner <see cref="T:Windows.UI.Xaml.Controls.NativeListViewBase"/> is measured. Materializes items in order to determine how much space is desired.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.OffsetChildrenHorizontal(System.Int32)">
            <summary>
            "Offset all child views attached to the parent RecyclerView by dx pixels along the horizontal axis." https://developer.android.com/reference/AndroidX.RecyclerView.Widget/RecyclerView.LayoutManager.html#offsetChildrenHorizontal(int)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.OffsetChildrenVertical(System.Int32)">
            <summary>
            "Offset all child views attached to the parent RecyclerView by dy pixels along the vertical axis." https://developer.android.com/reference/AndroidX.RecyclerView.Widget/RecyclerView.LayoutManager.html#offsetChildrenVertical(int)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.FindViewByAdapterPosition(System.Int32)">
            <summary>
            Find view by its 'adapter position' (current position in the collection, versus current laid-out position). These are different 
            when a collection change is in process.
            </summary>
            <param name="position">The adapter position</param>
            <returns>Container matching the provided adapter position, if currently visible.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.RecycleLayout">
            <summary>
            Rebuild the layout, recycling current elements. This is 'heavier' than simply scrapping the layout, but less destructive than
            completely refreshing the layout (eg scroll position is preserved).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.NotifyCollectionChange(System.Nullable{Windows.UI.Xaml.Controls.ListViewBase.GroupOperation})">
            <summary>
            Informs the layout that a INotifyCollectionChanged operation has occurred.
            </summary>
            <param name="groupOperation">The details of a group operation, if it was a group operation, else null.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ComputeScrollExtent(AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            The currently-displayed extent, ie the viewport size.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ComputeScrollOffset(AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            The scrolled offset.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ComputeScrollRange(AndroidX.RecyclerView.Widget.RecyclerView.State,Windows.UI.Xaml.Controls.Orientation)">
            <summary>
            The total range of all content (necessarily an estimate since we can't measure non-materialized items.)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CorrectForEstimationErrors">
            <summary>
            Correct the scroll offset, eg if items were added/removed or had their databound heights changed while they were scrolled out
            of view.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ApplyOffset(System.Int32)">
            <summary>
            Update the internal state of the layout, as well as 'floating' views like group headers, when the scrolled offset changes.
            </summary>
            <remarks>
            This is called in conjunction with <see cref="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.OffsetChildrenVertical(System.Int32)"/> (or Horizontal), which actually moves the views
            themselves; this method applies the same adjustment to the Uno-side state to keep it in sync with the actual view positions.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.UpdateHeaderAndFooterPositions">
            <summary>
            Adjust Header and Footer positions to be outside the range of collection items at all times.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.UpdateGroupHeaderPositions">
            <summary>
            Update group header positions, either because they should 'stick' or because the best guess of their 'clamped' position has changed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CanCurrentlyScrollHorizontally(System.Int32)">
            <summary>
            Check if this view can be scrolled horizontally in a certain direction.
            </summary>
            <param name="direction">Negative to check scrolling left, positive to check scrolling right.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CanCurrentlyScrollVertically(System.Int32)">
            <summary>
            Check if this view can be scrolled vertically in a certain direction.
            </summary>
            <param name="direction">Negative to check scrolling up, positive to check scrolling down.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ResetLayoutInfo">
            <summary>
            Wipes stored layout information. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.AddViewAtOffset(Android.Views.View,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,System.Int32,Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ViewType)">
            <summary>
            Add view and layout it with a particular offset.
            </summary>
            <returns>Child's frame in logical pixels, including its margins</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.TryMeasureChild(Android.Views.View,Windows.Foundation.Size,Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ViewType)">
            <summary>
            Measure item view if needed.
            </summary>
            <returns>Measured size, or cached size if no measure was necessary.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ApplyChildStretch(Windows.Foundation.Size,Windows.Foundation.Size,Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ViewType)">
            <summary>
            Apply appropriate stretch to measured size return by child view.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.LayoutChild(Android.Views.View,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,Windows.Foundation.Size)">
            <summary>
            Layout child view at desired offsets.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.AddView(Android.Views.View,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ViewType)">
            <summary>
            Adds a child view to the list in either the leading or trailing direction, incrementing the count of the corresponding
            view type and the position of <see cref="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.FirstItemView"/> as appropriate.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ScrollBy(System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Called during scrolling, sets the layout according to the requested scroll offset.
            </summary>
            <returns>The actual amount scrolled (which may be less than requested if the end of the list is reached).</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.IsReorderingAndNotReadyToScroll(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection)">
            <summary>
            During a drag-to-reorder, if the item is dragged very rapidly then we may receive a scroll request before the item has been
            redrawn at the position under the cursor. If the item is still at the beginning of the list (that is, the 'trailing' position
            relative to scroll), this would violate the assumptions of the reordering logic (<see cref="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.TryTrimReorderingView(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,AndroidX.RecyclerView.Widget.RecyclerView.Recycler)"/>).
            As a simple fix we simply skip this scroll request, and wait for one to occur after the item has been repositioned.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ScrollByInner(System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Materialize and dematerialize views corresponding to their visibility after the requested scroll offset.
            </summary>
            <remarks>
            In essence: fill the window that <paramref name="offset"/> is attempting to make visible, and unfill views outside of that window.
            </remarks>
            <returns>The actual scroll offset (which may be less than requested if the end of the list is reached).</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.UpdateLayout(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State,System.Boolean)">
            <summary>
            Fills in visible views and unfills invisible views from the list.
            </summary>
            <param name="direction">The fill direction.</param>
            <param name="availableExtent">The available extent (dimension of the viewport parallel to the scroll direction).</param>
            <param name="availableBreadth">The available breadth (dimension of the viewport orthogonal to the scroll direction).</param>
            <param name="recycler">Supplied recycler.</param>
            <param name="state">Supplied state object.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.UpdateScrollPositionForPaddingChanges(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Scroll to close the gap between the end of the content and the end of the panel if any.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.FillLayout(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Fills in visible views, using the strategy of creating new views in the desired fill direction as long as there is (a) available 
            fill space and (b) available items. 
            Also initializes header, footer, and internal state if need be.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.TryCreateLine(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State,Uno.UI.IndexPath)">
            <summary>
            Checks if there is available space and, if so, materializes a new <see cref="T:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Line"/> (as well as a new <see cref="T:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group"/> if 
            the new line is in a different group).
            </summary>
            <returns>True if a new line was created, false otherwise.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.AddLine(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State,Uno.UI.IndexPath)">
            <summary>
            Materializes a new line in the desired fill direction and adds it to the corresponding group.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CreateLine(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State,Uno.UI.IndexPath,System.Boolean)">
            <summary>
            Create a single row or column
            </summary>
            <param name="fillDirection">The direction we're filling in new views</param>
            <param name="extentOffset">Extent offset relative to the origin of the panel's bounds</param>
            <param name="breadthOffset">Breadth offset relative to the origin of the panel's bounds</param>
            <param name="availableBreadth">The breadth available for the line</param>
            <param name="recycler">Provided recycler</param>
            <param name="state">Provided <see cref="T:AndroidX.RecyclerView.Widget.RecyclerView.State"/></param>
            <param name="nextVisibleItem">The first item in the line to draw (or the last, if we're filling backwards)</param>
            <param name="isNewGroup">Whether this is the first line materialized in a new group.</param>
            <returns>An object containing information about the created line.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CreateGroupsAtLeadingEdge(System.Int32,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Add a new non-empty group to the internal state of the layout. It will be added at the end if filling forward or the start if 
            filling backward. Any intervening empty groups will also be added.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CreateGroupAtLeadingEdge(System.Int32,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State,System.Int32)">
            <summary>
            Add a new group to the internal state of the layout. It will be added at the end if filling forward or the start if 
            filling backward. If filling backward, the cached layout information of the group will be restored.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CreateGroupHeader(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State,Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group)">
            <summary>
            Materialize a view for a group header.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CreateHeaderAndFooter(System.Int32,System.Int32,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Materialize header and footer views, if they should be shown.
            </summary>
            <returns>The extent of the header (used for layouting).</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.UnfillLayout(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Dematerialize lines and group headers that are no longer visible with the nominated offset.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.TryTrimReorderingView(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,AndroidX.RecyclerView.Widget.RecyclerView.Recycler)">
            <summary>
            Trim all but the trailing view while scrolling, with the intention of trimming the reordering view so that it can be inserted in
            its recalculated correct position.
            </summary>
            <remarks>
            Implicitly assumes that the trailing view will not be the reordering view, since the reordering view must be near enough to the
            leading edge to trigger a scroll.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ScrapLayout(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,System.Int32)">
            <summary>
            Tears down the current layout and allows it to be recreated without losing the current scroll position.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetDynamicSeedIndex(System.Nullable{Uno.UI.IndexPath},System.Int32)">
            <summary>
            Get 'seed' index for recreating the visual state of the list after <see cref="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ScrapLayout(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,System.Int32)"/>;
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetAdjustedFirstItem(System.Nullable{Uno.UI.IndexPath})">
            <summary>
            Update the first visible item in case the group it occupies has changed due to INotifyCollectionChanged operations.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.UpdateHeaderAndFooter">
            <summary>
            Set header and footer dirty and trigger a layout to recreate them.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ResetHeaderAndFooter(AndroidX.RecyclerView.Widget.RecyclerView.Recycler)">
            <summary>
            Rebind and recycle any existing header and footer views.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.TryAttachView(Android.Views.View)">
            <summary>
            Attach view to window if it has been detached. https://developer.android.com/reference/android/view/ViewGroup.html#attachViewToParent(android.view.View,%20int,%20android.view.ViewGroup.LayoutParams)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.TryDetachView(Android.Views.View)">
            <summary>
            Detach view from window if not already detached.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.UpdateSelection(Android.Views.View)">
            <summary>
            Set up-to-date selection state on item view.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.AdjustOffsetForSnapPointsAlignment(System.Single)">
            <summary>
            Apply snap points alignment to scroll offset.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.IsThereAGapWithinGroup(Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32)">
            <summary>
            Returns true if there is space between the edge of the leading item within the group and the edge of the viewport in the 
            desired fill direction, false otherwise.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetLeadingEdgeWithinGroup(Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection)">
            <summary>
            Get the edge of the leading item of the group in the desired fill direction. Note that this may differ from the Start/End of 
            the group because if the group header is <see cref="F:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.RelativeHeaderPlacement.Adjacent"/>, it may take up more extent than the items themselves.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.IsThereAGapOutsideGroup(Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32)">
            <summary>
            True if there is space between the leading edge of the group and the edge of the viewport in the 
            desired fill direction, false otherwise.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.IsThereAGap(System.Int32,Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,System.Int32,System.Int32)">
            <summary>
            True if there is a gap between the nominated leading edge and the edge of the viewport after the nominated scroll offset is applied,
            false otherwise.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.IsLineVisible(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Line,System.Int32,System.Int32)">
            <summary>
            True if the nominated line is still visible after the nominated scroll offset is applied, false otherwise.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.IsGroupVisible(Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group,System.Int32,System.Int32)">
            <summary>
            True if the nominated group is still visible after the nominated scroll offset is applied, false otherwise.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.CleanupReordering">
            <summary>
            Clean up state after a drag-to-reorder operation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetContentEnd">
            <summary>
            Return the farthest extent of all currently materialized content, including the extent of the notional 'panel' defined by the ItemsPresenter.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetItemsContentEnd">
            <summary>
            Return the farthest extent of all currently materialized content items. Most of the time <see cref="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetContentEnd"/> should be used instead.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetContentStart">
            <summary>
            Return the nearest extent of all currently materialized content.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetLeadingNonEmptyGroup(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection)">
            <summary>
            Get the leading non-empty group in the nominated fill direction.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetLeadingMaterializedItem(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection)">
            <summary>
            Returns the index of the item on the far leading edge for direction <paramref name="fillDirection"/>. Ie, if scrolling/filling towards
            the end of the list, this will return the bottom-most materialized item, and if scrolling/filling towards the beginning of the list, this will
            return the top-most item.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.RemoveTrailingView(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,System.Boolean)">
            <summary>
            Remove the trailing item view in the nominated fill direction and update the internal layout state.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.RemoveTrailingLine(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,System.Boolean)">
            <summary>
            Remove the trailing line in the nominated fill direction and update the internal layout state.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.RemoveTrailingGroup(Windows.UI.Xaml.Controls.Primitives.GeneratorDirection,AndroidX.RecyclerView.Widget.RecyclerView.Recycler,System.Boolean)">
            <summary>
            Remove the trailing group in the nominated fill direction and update the internal layout state.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetFlatItemIndex(Uno.UI.IndexPath)">
            <summary>
            Flatten item index to pass it to the native recycler.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetGroupHeaderAdapterIndex(System.Int32)">
            <summary>
            Get index for header to pass to native recycler
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.GetAssertMessage(System.String,System.String,System.Int32)">
            <summary>
            Format a message to pass to Debug.Assert.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Line">
            <summary>
            A row or column.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Line.Extent">
            <summary>
            Dimension of this line in the direction of scroll, in physical units
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Line.Breadth">
            <summary>
            Dimension of this line orthogonal to the direction of scroll, in physical units
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group">
            <summary>
            A materialized group.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group.GroupIndex">
            <summary>
            The absolute index of this group within the source collection.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group.ItemsExtent">
            <summary>
            The extent of all materialized lines.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group.ItemsBreadth">
            <summary>
            The breadth of the broadest materialized line.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group.Start">
            <summary>
            The offset of the group relative to the top/left of panel (equivalent to GetChildStart()).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group.HeaderExtent">
            <summary>
            The extent of the header, in physical units. 
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.Group.HeaderBreadth">
            <summary>
            The breadth of the header, in physical units.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.VirtualizingPanelLayout.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.Orientation">
            <summary>
            Defines constants that specify the different orientations that a control or layout can have.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Orientation.Vertical">
            <summary>
            The control or layout should be vertically oriented.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.Orientation.Horizontal">
            <summary>
            The control or layout should be horizontally oriented.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.CharacterType">
            <summary>
            Value indicating the general character set for a given character.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.CharacterType.Other">
            <summary>
            Indicates we could not match the character set.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.CharacterType.Standard">
            <summary>
            Member of the Latin character set.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.CharacterType.Symbolic">
            <summary>
            Member of a symbolic character set.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.CharacterType.Glyph">
            <summary>
            Member of a character set which supports glyphs.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.InitialsGenerator.InitialsFromContactObject(Windows.ApplicationModel.Contacts.Contact)">
            <summary>
            Helper function which takes in a Contact object and produces initials
            which represent that contact.
            </summary>
            <remarks>
            INTENDED LOGIC BEHAVIOR:
            - If the name contains glyphs, return a generic icon.
            - If we have access to First Name vs. Last Name data
              (First Name being set regionally - i.e. it equals Given Name or Family Name based on system setting),
              . If non-symbolic, use the first letter of the First Name and first letter of the Last Name
              . If symbolic, use the first character of the Given Name
            - If we don't have access to First/Last or Given/Family Name, (i.e. long string Dr. Jordan von Hammerspike III)
              . If non-symbolic, break by space delimiter then follow the following rules:
                 -. Use the first letter of the first word and the first letter of the last word
                 -. If only one word, use a single letter
              . If symbolic, use the first one or two characters of the string (decided by how squished it looks visually)
                 -. Note: This branch of the logic falls apart in the Family Name, Given Name case.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PersonPictureTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PersonPictureTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.PersonPictureTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePivotPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePopupBase.CreateIsOpenProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePopupBase.IsOpenProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePopupBase.CreateChildProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePopupBase.ChildProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePopupBase.CreateIsLightDismissEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePopupBase.IsLightDismissEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePopupBase.CreateHorizontalOffsetProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePopupBase.HorizontalOffsetProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePopupBase.CreateVerticalOffsetProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePopupBase.VerticalOffsetProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePopupBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ScrollBarVisibility">
            <summary>
            Specifies the scroll bar visibility in ScrollViewer control.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollBarVisibility.Auto">
            <summary>
            Enables the scrollbars if the content is greater than the view port.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollBarVisibility.Disabled">
            <summary>
            Disables scrolling.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollBarVisibility.Hidden">
            <summary>
            Enables scrolling, but the scrollbars are not visible.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollBarVisibility.Visible">
            <summary>
            Enables scrolling, with scrollbars visible.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.IScrollContentPresenter">
            <summary>
            An interface consumed by <see cref="T:Windows.UI.Xaml.Controls.ScrollViewer"/>, which may contain either a <see cref="T:Windows.UI.Xaml.Controls.ScrollContentPresenter"/> (the
            normal case) or a <see cref="T:Windows.UI.Xaml.Controls.ListViewBaseScrollContentPresenter"/> (special case to handle usage within the template of 
            <see cref="T:Windows.UI.Xaml.Controls.ListViewBase"/>)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.IScrollContentPresenter.CustomContentExtent">
            <summary>
            The absolute dimensions of the content (or an estimate), for presenters where this is not simply equal to the Content element's size.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ScrollMode">
            <summary>
            Specifies the scroll behavior in ScrollViewer control.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollMode.Disabled">
            <summary>
            Disables scrolling
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollMode.Enabled">
            <summary>
            Enables scrolling
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.ScrollMode.Auto">
            <summary>
            Scrolling is enabled but behavior uses a "rails" manipulation mode
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ICustomScrollInfo.ViewportWidth">
            <summary>
            Defines the desired viewport width, if not set, fallbacks to the default algorithm.
            This is used in the ScrollViewer measure and in computation of all the ScrollViewer properties.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ICustomScrollInfo.ViewportHeight">
            <summary>
            Defines the desired viewport height, if not set, fallbacks to the default algorithm
            This is used in the ScrollViewer measure and in computation of all the ScrollViewer properties.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollViewerExtensions.Padding(Windows.UI.Xaml.Controls.ScrollViewer,Windows.UI.Xaml.Thickness)">
            <summary>
            Sets the padding on the scrollviewer.
            </summary>
            <param name="sv">The scrollviewer</param>
            <param name="padding">The padding thickness</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollViewerExtensions.Padding(Windows.UI.Xaml.Controls.ScrollViewer,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the padding on the scrollviewer.
            </summary>
            <param name="sv">The scrollviewer</param>
            <param name="left">The left padding</param>
            <param name="top">The top padding</param>
            <param name="right">The right padding</param>
            <param name="bottom">The bottom padding</param>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.SelectionMode">
            <summary>
            Defines values used to specify how items can be selected.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SelectionMode.Single">
            <summary>
            Only a single item can be selected.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SelectionMode.Multiple">
            <summary>
            Multiple items can be selected (no special mode required).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SelectionMode.Extended">
            <summary>
            Multiple items can be selected within a special mode (such as with a modifier key).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SplitViewDisplayMode.Overlay">
            <summary>
            The pane covers the content when it's open and does not take up space in the control layout. The pane closes when the user taps outside of it.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SplitViewDisplayMode.Inline">
            <summary>
            The pane is shown side-by-side with the content and takes up space in the control layout. The pane does not close when the user taps outside of it.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SplitViewDisplayMode.CompactOverlay">
            <summary>
            The amount of the pane defined by the CompactPaneLength property is shown side-by-side with the content and takes up space in the control layout. The remaining part of the pane covers the content when it's open and does not take up space in the control layout. The pane closes when the user taps outside of it.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SplitViewDisplayMode.CompactInline">
            <summary>
            The amount of the pane defined by the CompactPaneLength property is shown side-by-side with the content and takes up space in the control layout. The remaining part of the pane pushes the content to the side when it's open and takes up space in the control layout. The pane does not close when the user taps outside of it.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SplitViewPanePlacement.Left">
            <summary>
            The pane is shown to the left of the SplitView content .
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.SplitViewPanePlacement.Right">
            <summary>
            The pane is shown to the right of the SplitView content .
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.StackPanelExtensions.Orientation(Windows.UI.Xaml.Controls.StackPanel,Windows.UI.Xaml.Controls.Orientation)">
            <summary>
            Sets the orientation for this IStackPanel instance.
            </summary>
            <typeparam name="T">An IStackPanel type</typeparam>
            <param name="instance">An IStackPanel instance</param>
            <param name="orientation">The orientation</param>
            <returns>The IStackPanelInstance</returns>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.TextBlockMeasureCache">
            <summary>
            A TextBlock measure cache for non-formatted text.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlockMeasureCache.FindMeasuredSize(Windows.UI.Xaml.Controls.TextBlock,Windows.Foundation.Size)">
            <summary>
            Finds a cached measure for the provided <see cref="T:Windows.UI.Xaml.Controls.TextBlock"/> characteristics
            given an <paramref name="availableSize"/>.
            </summary>
            <param name="source">The source</param>
            <param name="availableSize">The available size to query</param>
            <returns>An optional <see cref="T:Windows.Foundation.Size"/> if found.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBlockMeasureCache.CacheMeasure(Windows.UI.Xaml.Controls.TextBlock,Windows.Foundation.Size,Windows.Foundation.Size)">
            <summary>
            Cache a <paramref name="measuredSize"/> for an <paramref name="availableSize"/>, given
            the <paramref name="source"/> characteristics.
            </summary>
            <param name="source"></param>
            <param name="availableSize"></param>
            <param name="measuredSize"></param>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.TextBlockMeasureCache.MeasureEntry">
            <summary>
            A set of TextBlock measures for a set of text characteristics
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.TextBlockMeasureCache.MeasureKey">
            <summary>
            Defines text characteristics
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.TextBlockMeasureCache.MeasureSizeEntry">
            <summary>
            Result of a single measure
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBlockMeasureCache.MeasureSizeEntry.MeasuredSize">
            <summary>
            Computed Size
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TimePickerSelector.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ToolTipPopupPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.NumericExtensions">
            <summary>
            Numeric utility methods used by controls.  These methods are similar in
            scope to the WPF DoubleUtil class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NumericExtensions.IsZero(System.Double)">
            <summary>
            Check if a number is zero.
            </summary>
            <param name="value">The number to check.</param>
            <returns>True if the number is zero, false otherwise.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NumericExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determine if one number is less than or close to another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is less than or close to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.OrientedSize">
            <summary>
            The OrientedSize structure is used to abstract the growth direction from
            the layout algorithms of WrapPanel.  When the growth direction is
            oriented horizontally (ex: the next element is arranged on the side of
            the previous element), then the Width grows directly with the placement
            of elements and Height grows indirectly with the size of the largest
            element in the row.  When the orientation is reversed, so is the
            directional growth with respect to Width and Height.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.OrientedSize._orientation">
            <summary>
            The orientation of the structure.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.OrientedSize.Orientation">
            <summary>
            Gets the orientation of the structure.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.OrientedSize._direct">
            <summary>
            The size dimension that grows directly with layout placement.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.OrientedSize.Direct">
            <summary>
            Gets or sets the size dimension that grows directly with layout
            placement.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.OrientedSize._indirect">
            <summary>
            The size dimension that grows indirectly with the maximum value of
            the layout row or column.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.OrientedSize.Indirect">
            <summary>
            Gets or sets the size dimension that grows indirectly with the
            maximum value of the layout row or column.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.OrientedSize.Width">
            <summary>
            Gets or sets the width of the size.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.OrientedSize.Height">
            <summary>
            Gets or sets the height of the size.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.OrientedSize.#ctor(Windows.UI.Xaml.Controls.Orientation)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.OrientedSize.#ctor(Windows.UI.Xaml.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
            <param name="width">Un-oriented width of the structure.</param>
            <param name="height">Un-oriented height of the structure.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.WrapPanel.ArrangeLine(Android.Views.View[],System.Int32,System.Int32,System.Nullable{System.Double},System.Double,System.Double)">
            <summary>
            Arrange a sequence of elements in a single line.
            </summary>
            <param name="lineStart">
            Index of the first element in the sequence to arrange.
            </param>
            <param name="lineEnd">
            Index of the last element in the sequence to arrange.
            </param>
            <param name="directDelta">
            Optional fixed growth in the primary direction.
            </param>
            <param name="indirectOffset">
            Offset of the line in the indirect direction.
            </param>
            <param name="indirectGrowth">
            Shared indirect growth of the elements on this line.
            </param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.WrapPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.UIElementCollection.Owner">
            <summary>
            The owner of this collection.
            This is intended to be used to redispatch to a specific instance in ** static ** CollectionChanged handlers.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.UIElementCollection.Move(System.UInt32,System.UInt32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BorderLayerRenderer.UpdateLayer(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush,Windows.UI.Xaml.Controls.BackgroundSizing,Windows.UI.Xaml.Thickness,Windows.UI.Xaml.Media.Brush,Windows.UI.Xaml.CornerRadius,Windows.UI.Xaml.Thickness,System.Boolean)">
            <summary>
            Updates or creates a sublayer to render a border-like shape.
            </summary>
            <param name="view">The view to which we should add the layers</param>
            <param name="background">The background brush of the border</param>
            <param name="backgroundSizing">The background sizing (if drawn under border or not)</param>
            <param name="borderThickness">The border thickness</param>
            <param name="borderBrush">The border brush</param>
            <param name="cornerRadius">The corner radius</param>
            <param name="padding">The padding to apply on the content</param>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BorderLayerRenderer.Clear">
            <summary>
            Removes the added layers during a call to <see cref="M:Windows.UI.Xaml.Controls.BorderLayerRenderer.UpdateLayer(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.Media.Brush,Windows.UI.Xaml.Controls.BackgroundSizing,Windows.UI.Xaml.Thickness,Windows.UI.Xaml.Media.Brush,Windows.UI.Xaml.CornerRadius,Windows.UI.Xaml.Thickness,System.Boolean)" />.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BindableButtonEx.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.SpinnerEx.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.SpinnerViewPool">
            <summary>
            A secondary view pool implementation for the Spinner control.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeDatePickerFlyout.UseNativeMinMaxDates">
            <summary>
            Setting this to true will interpret MinYear/MaxYear as MinDate and MaxDate.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.FlipViewAdapter.Owner">
            <summary>
            The FlipView which uses this adapter. This property is backed by a weak reference.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeFlipView.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeFlipView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativePagedView.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativePagedView.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.NativePagedView.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.NativePagedView.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativePagedView.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativePagedView.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativePagedView.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativePagedView.RenderTransformOriginProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.RenderTransformOrigin"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativePagedView.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativePagedView.IsEffectiveViewportEnabled">
            <summary>
            Indicates if the effective viewport should/will be propagated to/by this element
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.ReconfigureViewportPropagation(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Make sure to request or disable effective viewport changes from the parent
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#RequestViewportUpdates(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Used by a child of this element, in order to subscribe to viewport updates
            (so the OnParentViewportChanged will be invoked on this given child)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#OnParentViewportChanged(System.Boolean,System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport,Windows.UI.Xaml.ViewportInfo)">
            <summary>
            Used by a parent element to propagate down the viewport change
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativePagedView.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativePagedView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeImage.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.LayouterHelper">
            <summary>
            Provides access to internal methods for native View measuring.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.BufferViewCache">
            <summary>
            Cache implementation that maintains a buffer of views to either side of the visible viewport.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.BufferViewCache._trailingBuffer">
            <summary>
            Buffer on the offset-zero side of the visible viewport.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.BufferViewCache._leadingBuffer">
            <summary>
            Buffer on the offset-max side of the visible viewport.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.BufferViewCache._intermediateCache">
            <summary>
            'Overflow' cache of views not associated with either buffer.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.BufferViewCache._shouldBlockIntermediateCache">
            <summary>
            Don't return views from the intermediate cache if true: used when the specific intent is to populate the cache.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.UpdateBuffers(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Update buffers by removing out-of-range views and adding views in range.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.DetachAndCacheView(Android.Views.View,AndroidX.RecyclerView.Widget.RecyclerView.Recycler)">
            <summary>
            Detach view that was visible and send it to the cache.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.UnbufferViews(AndroidX.RecyclerView.Widget.RecyclerView.Recycler)">
            <summary>
            Remove all views not in the target range from the buffer.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.TrimEmpty">
            <summary>
            Prune empty records from the edges of the buffer (as subsequent retrieval logic expects).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.PrefetchViews(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State)">
            <summary>
            Prefetch views in the target range that aren't yet in the buffer.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.PrefetchView(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,AndroidX.RecyclerView.Widget.RecyclerView.State,System.Int32)">
            <summary>
            Prefetch a view for given <paramref name="displayPosition"/>.
            </summary>
            <returns>
            A record of the position and associated view holder, or null if the item returned by the recycler is not in a recyclable state.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.GetViewFromIntermediateCache(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,System.Int32)">
            <summary>
            Retrieve view for <paramref name="displayPosition"/> from intermediate cache.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.SendToIntermediateCache(AndroidX.RecyclerView.Widget.RecyclerView.Recycler,Windows.UI.Xaml.Controls.BufferViewCache.ElementViewRecord)">
            <summary>
            Send view that was unbuffered or scrolled out of view to the intermediate cache.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.TrimIntermediateCache(AndroidX.RecyclerView.Widget.RecyclerView.Recycler)">
            <summary>
            Reduce intermediate cache down to its size limit.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.DequeueRecordFromBuffer(System.Int32)">
            <summary>
            Retrieve view record from buffer if available.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.EmptyAndRemove">
            <summary>
            Remove all views from the window and clear all local caches
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.OnUnloaded">
            <summary>
            Remove detached views completely when list is unloaded. This prevents errors where the view's attached window info isn't 
            properly updated. (Which is very bad.)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.OnRecycled(Windows.UI.Xaml.Controls.UnoViewHolder,System.Action)">
            <summary>
            Queues an action to be executed when the provided viewHolder is being recycled.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.CheckValidState">
            <summary>
            Check that the buffers are in a consistent state. This is safe to call during certain intermediate operations.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.BufferViewCache.CheckValidSteadyState">
            <summary>
            Check that the buffers are in a consistent state. This should only be called after intermediate operations have completed.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ItemContainerHolder">
            <summary>
            Exists as a top-level container for SelectorItems, allowing their Alignments and Margins to be taken into account
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.ItemContainerHolder.StretchOrientation">
            <summary>
            Defines the orientation in which items should stretch (if any)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ItemContainerHolder.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.Controls.NativeListViewBaseAdapter._itemTemplatesByViewType">
            <summary>
            Known templates cached for each view type.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeListViewBaseAdapter.RegisterPhaseBinding(AndroidX.RecyclerView.Widget.RecyclerView.ViewHolder)">
            <summary>
            Register provided list item for Phase binding.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.ScrollingViewCache">
            <summary>
            A <see cref="T:AndroidX.RecyclerView.Widget.RecyclerView.ViewCacheExtension"/> implementation which temporarily 'detaches' views from the parent rather than removing them completely,
            significantly improving performance when scrolling an <see cref="T:Windows.UI.Xaml.Controls.ItemsStackPanel"/> or <see cref="T:Windows.UI.Xaml.Controls.ItemsWrapGrid"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.ScrollingViewCache.OnRecycled(Windows.UI.Xaml.Controls.UnoViewHolder,System.Action)">
            <summary>
            Queues an action to be executed when the provided viewHolder is being recycled.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.UnoViewHolder.IsDetached">
            <summary>
            Has the ItemView been detached from the window? This is a public mirror of the internal ViewHolder.isTmpDetached() method.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeProgressRing.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RenderTransformOriginProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RenderTransformOrigin"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.IsEffectiveViewportEnabled">
            <summary>
            Indicates if the effective viewport should/will be propagated to/by this element
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.ReconfigureViewportPropagation(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Make sure to request or disable effective viewport changes from the parent
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#RequestViewportUpdates(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Used by a child of this element, in order to subscribe to viewport updates
            (so the OnParentViewportChanged will be invoked on this given child)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#OnParentViewportChanged(System.Boolean,System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport,Windows.UI.Xaml.ViewportInfo)">
            <summary>
            Used by a parent element to propagate down the viewport change
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeScrollContentPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Controls.TextBoxView.EditTextCursorColorChanger">
            <summary>
            Class that uses reflection to change the color of an EditText cursor at runtime
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBoxView.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBoxView.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.TextBoxView.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Controls.TextBoxView.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBoxView.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBoxView.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBoxView.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBoxView.RenderTransformOriginProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.RenderTransformOrigin"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBoxView.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Controls.TextBoxView.IsEffectiveViewportEnabled">
            <summary>
            Indicates if the effective viewport should/will be propagated to/by this element
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.ReconfigureViewportPropagation(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Make sure to request or disable effective viewport changes from the parent
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#RequestViewportUpdates(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Used by a child of this element, in order to subscribe to viewport updates
            (so the OnParentViewportChanged will be invoked on this given child)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#OnParentViewportChanged(System.Boolean,System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport,Windows.UI.Xaml.ViewportInfo)">
            <summary>
            Used by a parent element to propagate down the viewport change
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.GetBinderDetail">
            <summary>
             Should not be used directly.
             Helper method to provide Xaml debugging information to tools like Stetho.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.RegisterLoadActions(System.Action,System.Action)">
            <summary>
            Registers actions to be executed when the control is Loaded and Unloaded.
            </summary>
            <param name="loaded"></param>
            <param name="unloaded"></param>
            <returns></returns>
            <remarks>The loaded action may be executed immediately if the control is already loaded.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Controls.TextBoxView.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.TextBoxView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.NativeWebView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Controls.UIElementCollectionExtensions.Add(Windows.UI.Xaml.Controls.UIElementCollection,Android.Views.View)">
            <summary>
            Add a native view to a <see cref="T:Windows.UI.Xaml.Controls.UIElementCollection"/>. It will be wrapped in a <see cref="T:Windows.UI.Xaml.FrameworkElement"/>-derived container to satisfy the type constraints of <see cref="T:Windows.UI.Xaml.Controls.UIElementCollection"/>.
            </summary>
            <remarks>This method is present to support collection initializer syntax for native views.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.BlockCollection.Add(Windows.UI.Xaml.Documents.Block)">
            <remarks>For backward compatibility</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.ContentLinkProvider.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.ContentLinkProvider.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.ContentLinkProvider.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Glyphs.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateFocusStateProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.FocusStateProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateTabIndexProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.TabIndexProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateXYFocusUpProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.XYFocusUpProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateXYFocusDownProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.XYFocusDownProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateXYFocusLeftProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.XYFocusLeftProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateXYFocusRightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.XYFocusRightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateXYFocusDownNavigationStrategyProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.XYFocusDownNavigationStrategyProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateXYFocusLeftNavigationStrategyProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.XYFocusLeftNavigationStrategyProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateXYFocusRightNavigationStrategyProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.XYFocusRightNavigationStrategyProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.Hyperlink.CreateXYFocusUpNavigationStrategyProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.Hyperlink.XYFocusUpNavigationStrategyProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineCollection.Add(Windows.UI.Xaml.Documents.Inline)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineCollection.Contains(Windows.UI.Xaml.Documents.Inline)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineCollection.CopyTo(Windows.UI.Xaml.Documents.Inline[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineCollection.Remove(Windows.UI.Xaml.Documents.Inline)">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Documents.InlineCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Documents.InlineCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineCollection.IndexOf(Windows.UI.Xaml.Documents.Inline)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineCollection.Insert(System.Int32,Windows.UI.Xaml.Documents.Inline)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Documents.InlineCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Windows.UI.Xaml.Documents.TextElement.AllowFocusOnInteractionProperty">
            <summary>
            Identifies for the AllowFocusOnInteraction dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Documents.TextElement.AllowFocusOnInteraction">
            <summary>
            Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.TextElement.GetContainingFrameworkElement">
            <summary>	
            Retrieves the parent RichTextBox/CRichTextBlock/TextBlock.
            </summary>
            <returns>FrameworkElement or <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.TextElement.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.TextElement.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.TextElement.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.TextElement.CreateAllowFocusOnInteractionProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.Documents.TextElement.AllowFocusOnInteractionProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.TextHighlighterBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.TextHighlighterBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.TextHighlighterBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineExtensions.GetText(Windows.UI.Xaml.Documents.Inline)">
            <summary>
            Gets the combined text of all the leaf Inlines given a root Inline
            </summary>
            <param name="inline">The root Inline from which descend the leaf Inlines to combine</param>
            <returns>The combined text of all the leaf Inlines (Run or LineBreak)</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineExtensions.Enumerate(Windows.UI.Xaml.Documents.Inline)">
            <summary>
            Enumerate all Inline nodes using pre-order depth-first traversal given a root Inline
            </summary>
            <param name="root">The root Inline of the tree</param>
            <returns>All Inline nodes of the given tree (including the root), ordered using pre-order depth-first traversal</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineExtensions.HasTypographicalEffectWithin(Windows.UI.Xaml.Documents.Inline,Windows.UI.Xaml.Controls.TextBlock)">
            <summary>
            Checks whether an Inline has a typographical effect within a given TextBlock
            </summary>
            <param name="inline">The Inline for which we want to check the typographical effectiveness</param>
            <param name="textBlock">The TextBlock within which we want to check the Inline's typographical effectiveness</param>
            <returns>Whether the Inline has a typographical effect within the given TextBlock</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Documents.InlineExtensions.IsTypographicallyEquivalentTo(Windows.UI.Xaml.Documents.Inline,Windows.UI.Xaml.Controls.TextBlock)">
            <summary>
            Checks whether an Inline is typographically equivalent to a given TextBlock
            </summary>
            <param name="inline">The Inline we want to compare to the TextBlock</param>
            <param name="textBlock">The TextBlock we want to compare to the Inline</param>
            <returns>Whether the Inline is typographically equivalent to the given TextBlock</returns>
        </member>
        <member name="T:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason">
            <summary>
            Defines values that represent the reasons that the Windows.UI.Xaml.UIElement got focus
            in a desktop application that uses a DesktopWindowXamlSource object to host XAML-based UI.
            The XamlSourceFocusNavigationRequest.Reason property returns one of these values.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Programmatic">
            <summary>
            The focus was set programmatically.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Restore">
            <summary>
            The focus was restored after a task switch, such as pressing Alt + Tab.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.First">
            <summary>
            The focus was set in response to the user navigating to the next element
            by using a bidirectional navigation experience (for example, by pressing Tab).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Last">
            <summary>
            The focus was set in response to the user navigating to the previous element
            by using a bidirectional navigation experience (for example, by pressing Shift-Tab).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Left">
            <summary>
            The focus was set in response to the user navigating left by using
            a 4-direction navigation experience (for example, by using keyboard arrow keys).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Up">
            <summary>
            The focus was set in response to the user navigating up by using
            a 4-direction navigation experience (for example, by using keyboard arrow keys).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Right">
            <summary>
            The focus was set in response to the user navigating right by using
            a 4-direction navigation experience (for example, by using keyboard arrow keys).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason.Down">
            <summary>
            The focus was set in response to the user navigating down by using
            a 4-direction navigation experience (for example, by using keyboard arrow keys).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.#ctor(Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason)">
            <summary>
            Initializes a new instance of the XamlSourceFocusNavigationRequest
            class with the reason for the navigation request.
            </summary>
            <param name="reason">A value that indicates the reason for the navigation request.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.#ctor(Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason,Windows.Foundation.Rect)">
            <summary>
            Initializes a new instance of the XamlSourceFocusNavigationRequest class
            with the reason for the navigation request and the bounding rectangle
            that will receive navigation focus.
            </summary>
            <param name="reason">A value that indicates the reason for the navigation request.</param>
            <param name="hintRect">The bounding rectangle of the element in the desktop application that is losing focus.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.#ctor(Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationReason,Windows.Foundation.Rect,System.Guid)">
            <summary>
            Initializes a new instance of the XamlSourceFocusNavigationRequest class
            with the reason for the navigation request, the bounding rectangle that
            will receive navigation focus, and the unique correlation ID for the request.
            </summary>
            <param name="reason">A value that indicates the reason for the navigation request.</param>
            <param name="hintRect">The bounding rectangle of the element in the desktop application that is losing focus.</param>
            <param name="correlationId">The unique identifier for the navigation request. You can use this parameter
            for logging purposes, or if you have an existing correlation ID from an in-progress focus movement
            already in progress and you want to connect that focus movement with the current navigation request.</param>
        </member>
        <member name="P:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.Reason">
            <summary>
            Gets the unique identifier for the navigation request. You can use this value for logging purposes,
            or if you have an existing correlation ID from an in-progress focus movement already in progress
            and you want to connect that focus movement with a new navigation request.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.HintRect">
            <summary>
            Gets the bounding rectangle of the element in the desktop application that is losing focus
            (that is, the element that had focus before the DesktopWindowXamlSource received focus).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest.CorrelationId">
            <summary>
            Gets the unique identifier for the navigation request.
            You can use this value for logging purposes, or if you
            have an existing correlation ID from an in-progress focus movement
            already in progress and you want to connect that focus movement
            with a new navigation request.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult">
            <summary>
            Provides data for a request to navigate focus to
            a DesktopWindowXamlSource object by using the NavigateFocus method.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the XamlSourceFocusNavigationResult class.
            </summary>
            <param name="focusMoved">True if the focus successfully moved
            to the DesktopWindowXamlSource object; otherwise, false.</param>
        </member>
        <member name="P:Windows.UI.Xaml.Hosting.XamlSourceFocusNavigationResult.WasFocusMoved">
            <summary>
            Gets a value that indicates whether the focus successfully
            moved to the DesktopWindowXamlSource object.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs">
            <summary>
            Data for event which occurs when access keys should no longer be displayed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the AccessKeyDisplayDismissedEventArgs class.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs">
            <summary>
            Data for event which occurs when the user requests that access keys be displayed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the AccessKeyDisplayRequestedEventArgs class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs.PressedKeys">
            <summary>
            Gets the keys that were pressed to start the access key sequence.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs">
            <summary>
            Data for event which occurs when a user completes an access key sequence.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the AccessKeyInvokedEventArgs class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.AccessKeyInvokedEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled.
            A true value for Handled prevents most handlers along the event
            route from handling the same event again.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs">
            <summary>
            Data for event which occurs when a single, composed character is received by the input queue.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled.
            A true value for Handled prevents most handlers along the event
            route from handling the same event again.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs.Character">
            <summary>
            Gets the composed character associated with the UIElement.CharacterReceived event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.CharacterReceivedRoutedEventArgs.KeyStatus">
            <summary>
            Gets the status of the physical key that raised the character-received event.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.ExecuteRequestedEventArgs">
            <summary>
            Provides event data for the ExecuteRequested event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.ExecuteRequestedEventArgs.Parameter">
            <summary>
            Gets the command parameter passed into the Execute method that raised this event.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.FindNextElementOptions">
            <summary>
            Provides options to help identify the next element that can programmatically receive navigation focus.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FindNextElementOptions.#ctor">
            <summary>
            Initializes a new instance of the FindNextElementOptions class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FindNextElementOptions.XYFocusNavigationStrategyOverride">
            <summary>
            Gets or sets the focus navigation strategy used to identify
            the best candidate element to receive focus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FindNextElementOptions.SearchRoot">
            <summary>
            Gets or sets the object that must be the root from which to identify
            the next focus candidate to receive navigation focus.
            </summary>
            <remarks>In many cases UWP throws when this is null. In non-UWP targets,
            we use the current window as the search root in case of null.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FindNextElementOptions.HintRect">
            <summary>
            Gets or sets a bounding rectangle used to identify the focus candidates
            most likely to receive navigation focus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FindNextElementOptions.ExclusionRect">
            <summary>
            Gets or sets a bounding rectangle where all overlapping navigation
            candidates are excluded from navigation focus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FindNextElementOptions.IgnoreOcclusivity">
            <summary>
            Gets or sets a valud indicating whether occlusivity
            should be ignored in the search.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Input.FocusManager.GotFocus">
            <summary>
            Occurs when an element within a container element (a focus scope) receives focus.
            This event is raised asynchronously, so focus might move before bubbling is complete.
            </summary>		
        </member>
        <member name="E:Windows.UI.Xaml.Input.FocusManager.LostFocus">
            <summary>
            Occurs when an element within a container element (a focus scope) loses focus.
            This event is raised asynchronously, so focus might move again before bubbling is complete.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Input.FocusManager.GettingFocus">
            <summary>
            Occurs before an element actually receives focus.
            This event is raised synchronously to ensure focus isn't moved while the event is bubbling.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Input.FocusManager.LosingFocus">
            <summary>
            Occurs before focus moves from the current element with focus to the target element.
            This event is raised synchronously to ensure focus isn't moved while the event is bubbling.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FindFirstFocusableElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Retrieves the last element that can receive focus based on the specified scope.
            </summary>
            <param name="searchScope">The root object from which to search. If null, the search scope is the current window.</param>
            <returns>The first focusable object.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FindLastFocusableElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Retrieves the last element that can receive focus based on the specified scope.
            </summary>
            <param name="searchScope">The root object from which to search. If null, the search scope is the current window.</param>
            <returns>The first focusable object.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FindNextElement(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Retrieves the element that should receive focus based on the specified navigation direction.
            </summary>
            <param name="focusNavigationDirection">The direction that focus moves from element
            to element within the app UI.</param>
            <returns>The next object to receive focus.</returns>
            <remarks>We recommend using this method instead of <see cref="M:Windows.UI.Xaml.Input.FocusManager.FindNextFocusableElement(Windows.UI.Xaml.Input.FocusNavigationDirection)" />.
            FindNextFocusableElement retrieves a UIElement, which returns null if the next focusable element
            is not a UIElement (such as a Hyperlink object).</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FindNextElement(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.UI.Xaml.Input.FindNextElementOptions)">
            <summary>
            Retrieves the element that should receive focus based on the specified navigation direction
            (cannot be used with tab navigation, see remarks).
            </summary>
            <param name="focusNavigationDirection">The direction that focus moves from element
            to element within the app UI</param>
            <param name="focusNavigationOptions">The options to help identify the next element
            to receive focus with keyboard/controller/remote navigation.</param>
            <returns>The next object to receive focus.</returns>
            <remarks>
            We recommend using this method instead of <see cref="M:Windows.UI.Xaml.Input.FocusManager.FindNextFocusableElement(Windows.UI.Xaml.Input.FocusNavigationDirection)" />.
            FindNextFocusableElement retrieves a UIElement, which returns null if the next focusable element
            is not a UIElement (such as a Hyperlink object).
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FindNextFocusableElement(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Retrieves the element that should receive focus based on the specified navigation direction.
            </summary>
            <param name="focusNavigationDirection">The direction that focus moves from element to element within the application UI.</param>
            <returns>Next focusable view depending on FocusNavigationDirection, null if focus cannot be set in the specified direction.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FindNextFocusableElement(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.Foundation.Rect)">
            <summary>
            Retrieves the element that should receive focus based on the specified navigation direction and hint rectangle.
            </summary>
            <param name="focusNavigationDirection">The direction that focus moves from element to element within the app UI.</param>
            <param name="hintRect">A bounding rectangle used to influence which element is most likely to be considered the next to receive focus.</param>
            <returns>Next focusable view depending on FocusNavigationDirection, null if focus cannot be set in the specified direction.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFocusedElement">
            <summary>
            Retrieves the element in the UI that has focus, if any.
            </summary>
            <returns>The object that has focus. Typically, this is a Control class.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFocusedElement(Windows.UI.Xaml.XamlRoot)">
            <summary>
            Retrieves the focused element within the XAML island container.
            </summary>
            <param name="xamlRoot">XAML island container where to search.</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.TryFocusAsync(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FocusState)">
            <summary>
            Asynchronously attempts to set focus on an element when the application is initialized.
            </summary>
            <param name="element">The object on which to set focus.</param>
            <param name="value">One of the values from the FocusState enumeration that specify how an element can obtain focus.</param>
            <returns>The <see cref="T:Windows.UI.Xaml.Input.FocusMovementResult" /> that indicates whether focus was successfully set.</returns>
            <remarks>Completes synchronously when called on an element running in the app process.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.TryMoveFocus(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Attempts to change focus from the element with focus to the next focusable element in the specified direction.
            </summary>
            <param name="focusNavigationDirection">The direction to traverse.</param>
            <returns>true if focus moved; otherwise, false.</returns>
            <remarks>The tab order is the order in which a user moves from one control to another by pressing the Tab key (forward) or Shift+Tab (backward).
            This method uses tab order sequence and behavior to traverse all focusable elements in the UI.
            If the focus is on the first element in the tab order and FocusNavigationDirection.Previous is specified, focus moves to the last element.
            If the focus is on the last element in the tab order and FocusNavigationDirection.Next is specified, focus moves to the first element.
            Other directions are not supported on all platforms.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.TryMoveFocus(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.UI.Xaml.Input.FindNextElementOptions)">
            <summary>
            Attempts to change focus from the element with focus to the next focusable element in the specified direction,
            using the specified navigation options.
            </summary>
            <param name="focusNavigationDirection">The direction to traverse (in tab order).</param>
            <param name="focusNavigationOptions">The options to help identify the next element to receive focus with keyboard/controller/remote navigation.</param>
            <returns>true if focus moved; otherwise, false.</returns>
            <remarks>The tab order is the order in which a user moves from one control to another by pressing the Tab key (forward) or Shift+Tab (backward).
            This method uses tab order sequence and behavior to traverse all focusable elements in the UI.
            If the focus is on the first element in the tab order and FocusNavigationDirection.Previous is specified, focus moves to the last element.
            If the focus is on the last element in the tab order and FocusNavigationDirection.Next is specified, focus moves to the first element.
            Other directions are not supported on all platforms.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.TryMoveFocusAsync(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Asynchronously attempts to change focus from the current element
            with focus to the next focusable element in the specified direction.
            </summary>
            <param name="focusNavigationDirection">The direction that focus moves from element to element within the app UI.</param>
            <returns>The <see cref="T:Windows.UI.Xaml.Input.FocusMovementResult" /> that indicates whether focus was successfully set.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.TryMoveFocusAsync(Windows.UI.Xaml.Input.FocusNavigationDirection,Windows.UI.Xaml.Input.FindNextElementOptions)">
            <summary>
            Asynchronously attempts to change focus from the current element
            with focus to the next focusable element in the specified direction.
            </summary>
            <param name="focusNavigationDirection">The direction that focus moves from element to element within the app UI.</param>
            <param name="focusNavigationOptions">The navigation options used to identify the focus candidate.</param>
            <returns>The <see cref="T:Windows.UI.Xaml.Input.FocusMovementResult" /> that indicates whether focus was successfully set.</returns>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._contentRoot">
            <summary>
            Represents the content root with which this focus manager is associated.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._focusRectManager">
            <summary>
            Responsible for drawing the focus rectangles.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._focusedElement">
            <summary>
            Represents the currently focused element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._focusedAutomationPeer">
            <summary>
            Focused element's AutomationPeer.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._focusTarget">
            <summary>
            Represents the focus target.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._focusRectangleUIElement">
            <summary>
            Represents the focus visual.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._pluginFocused">
            <summary>
            Indicates whether plugin is focused.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._realFocusStateForFocusedElement">
            <summary>
            Represents the real focus state for the currently focused element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._focusObserver">
            <summary>
            Foccus observer.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._xyFocus">
            <summary>
            Represents the XY focus manager.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._canTabOutOfPlugin">
            <summary>
            This is a leftover from Silverlight times :-) .
            When the platform cannot support tabbing out of plugin, we will act as if
            there is an implicit top-level TabNavigation="Cycle"
            So instead of tabbing out, we handle the "last" tab by cycling to the
            "first" tab.  This is deemed better than getting stuck at the end.
            (Reverse "first" and "last" for Shift-Tab.)
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._engagedControl">
            <summary>
            Represents the control which is focus-engaged.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._focusLocked">
            <summary>
            Represents a value indicating whether focus is currently locked.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._ignoreFocusLock">
            <summary>
            During Window Activation/Deactivation, we lock focus. However, focus can move internally via the focused element becoming
            unfocusable (ie. leaving the tree or changing visibility). This member will force focus manager to bypass the _focusLocked logic.
            This should be used with care... if used irresponsibly, we can enable unsupported reentrancy scenarios.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._currentFocusOperationCancellable">
            <summary>
            It is possible to continue with a focus operation, even though focus is locked. In this case, we need to ensure
            that we persist the fact that focus should not be canceled.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._initialFocus">
            <summary>
            Represents a valud indicating whether we are still to provide the initial focus.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusManager._asyncOperation">
            <summary>
            This represents the async operation that can initiated through a public async FocusManager method, such as TryFocusAsync.
            We store it as a memeber because the operation can continue to run even after the api has finished executing.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManager.FocusedElement">
            <summary>
            Returns the current focused element.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManager.ContentRoot">
            <summary>
            Returns the content root associated with this focus manager instance.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManager.FocusRectManager">
            <summary>
            Focus rect manager.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManager.EngagedControl">
            <summary>
            Represents the control which is focus-engaged.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManager.InitialFocus">
            <summary>
            Represents a value indicating whether we are still to provide the initial focus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManager.FocusObserver">
            <summary>
            Focus observer getter, checking for null.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.SetFocusObserver(Uno.UI.Xaml.Input.FocusObserver)">
            <summary>
            Sets the focus observer.
            </summary>
            <param name="focusObserver"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.SetFocusedElement(Uno.UI.Xaml.Input.FocusMovement)">
            <summary>
            Sets focused element based on FocusMovement, if target is not focusable, tries to find first
            focusable in it. Validates whether the navigation direction matches the situation (tabbing).
            In the end updates focus with UpdateFocus method.
            </summary>
            <param name="movement">Focus movement.</param>
            <returns>Focus movement result.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.ClearFocus">
            <summary>
            Clears the focus.
            </summary>
            <remarks>
            Original code checks for "shutting down", which is not supported in Uno,
            so we always go through UpdateFocus.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.ReleaseFocusRectManagerResources">
            <summary>
            Releases resources held by FocusManager's FocusRectManager. These
            elements are automatically created on CFrameworkManager.UpdateFocus()
            and must be released before core releases its main render target on
            shutdown.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.CleanupDeviceRelatedResources(System.Boolean)">
            <summary>
            Cleans up device related resources.
            </summary>
            <param name="cleanupDComp">Cleanup.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FocusedElementIsBehindFullWindowMediaRoot">
            <summary>
            Checks whether the focused element is hidden behind full
            window media.
            </summary>
            <returns>True if hidden, false otherwise.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFirstFocusableElementFromRoot(System.Boolean)">
            <summary>
            Returns first focusable element from root visual based on given direction (first/last).
            </summary>
            <param name="useReverseDirection">Should be reverse direction?</param>
            <returns>Focusable element or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFirstFocusableElement(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the first focusable element from the specified visual tree.
            </summary>
            <param name="searchStartLocation">Location where to start searching.</param>
            <param name="focusCandidate">First focused element candidate.</param>
            <returns>First focusable element.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFirstFocusableElementInternal(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the first focusable element from the specified visual tree.
            </summary>
            <param name="searchStartLocation">Location where to start searching.</param>
            <param name="firstFocusedElement">First focused element.</param>
            <returns>First focusable element or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetLastFocusableElement(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the last focusable element from the specified visual tree.
            </summary>
            <param name="searchStartLocation">Search start location.</param>
            <param name="focusCandidate">Last foucsed element candidate.</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetLastFocusableElementInternal(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the last focusable element from the specified visual tree.
            </summary>
            <param name="searchStartLocation">Search start location.</param>
            <param name="lastFocusedElement">Last focused elment.</param>
            <returns>Last focusable element.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.CanProcessTabStop(System.Boolean)">
            <summary>
            Returns true if TabStop can be processed by us.
            </summary>
            <param name="isReverse">Use reverse direction?</param>
            <returns></returns>
            <remarks>
            Checks whether FocusManager can process tab stop in a given direction.
            First checks for popup, then if it is already on a boundary,
            then includes special handling for once and cycle.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetTabStopCandidateElement(System.Boolean,System.Boolean)">
            <summary>
            Returns the candidate next or previous tab stop element.		
            </summary>
            <param name="isReverse">Is shift pressed?</param>
            <param name="queryOnly">Query only?</param>
            <returns>Flag whether the search cycled at root visual scope and the candidate.</returns>
            <remarks>
            Retrieves the candidate for next tab stop depending on the direction
            always taking two routes - next/prev.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.ProcessTabStopInternal(System.Boolean,System.Boolean)">
            <summary>
            Process TabStop to retrieve the next or previous tab stop element.
            </summary>
            <param name="isReverse">Is reverse direction?</param>
            <param name="queryOnly">Query only.</param>
            <returns>Next or previous tab stop element or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.ProcessTabStop(System.Boolean)">
            <summary>
            Processes the TabStop navigation.
            </summary>
            <param name="isReverseDirection">Is shift pressed?</param>
            <returns>Value indicating whether the request was handled.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFirstFocusableElement">
            <summary>
            Returns the first focusable uielement from the root.
            </summary>
            <returns>First focusable element.</returns>
            <remarks>
            Special handling for popup, otherwise uses other method to do the work.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetNextFocusableElement">
            <summary>
            Returns the next focusable element if it is available.
            </summary>
            <returns>Focusable element or null.</returns>
            <remarks>
            Includes special handling for Hyperlink.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetNextTabStop(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Returns the next TabStop control if it is available. Otherwise, return null.
            </summary>
            <param name="pCurrentTabStop">Current tab stop.</param>
            <param name="bIgnoreCurrentTabStopScope">Should the current tab scope be ignored?</param>
            <returns>Next tab stop or null.</returns>
            <remarks>
            Gets next tab stop, includes the full logic with special case handling
            Calls internal version of the method which contains further logic
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetNextTabStopInternal(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject,System.Boolean@,Windows.UI.Xaml.DependencyObject@)">
            <summary>
            Return the next TabStop control if it is available.
            Otherwise, return null.
            </summary>
            <param name="pParent">Parent element.</param>
            <param name="pCurrent">Current element.</param>
            <param name="pCandidate">Candidate.</param>
            <param name="bCurrentPassed">Was current passed?</param>
            <returns>Next tab stop.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetPreviousTabStop(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Return the previous TabStop control if it is available. Otherwise, return null.
            </summary>
            <param name="pCurrentTabStop">Current tab stop</param>
            <returns>Previous tab stop.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetPreviousTabStopInternal(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject,System.Boolean@,Windows.UI.Xaml.DependencyObject@)">
            <summary>
            Return the previous tab stop control if it is available.
            Otherwise, return null.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.CompareTabIndex(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Compare TabIndex value between focusable(TabStop) controls.
            </summary>
            <param name="firstObject"></param>
            <param name="secondObject"></param>
            <returns></returns>
            <remarks>
            Return +1 if control1 &gt; control2
            Return = if control1 = control2
            Return -1 if control1 &lt; control2
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.IsFocusOnFirstTabStop">
            <summary>
            Checks whether focus is currently on the first tab stop.
            </summary>
            <returns>True if focus is in the first tab stop.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.IsFocusOnLastTabStop">
            <summary>
            Checks whether focus is currently on the first tab stop.
            </summary>
            <returns>True if focus is in the first tab stop.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.CanHaveFocusableChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Checks if there is a focusable child.
            </summary>
            <param name="pParent">Parent.</param>
            <returns>True if a focusable child exists.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetParentElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the control of parent (ancestor) from the current control
            </summary>
            <param name="pCurrent">Current control.</param>
            <returns>Parent UIElement or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.NotifyFocusChanged(System.Boolean,System.Boolean)">
            <summary>
            Notify the focus changing that ensure the focused element visible with input host manager.
            </summary>
            <param name="bringIntoView">Bring into view?</param>
            <param name="animateIfBringIntoView">Animate?</param>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.IsFocusable(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Determine if a particular DependencyObject cares to take focus.
            </summary>
            <param name="dependencyObject">Dependency object.</param>
            <returns>True if focusable.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFocusParent(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Return the object that should be considered the parent for the purposes
            of tab focus.  This is not necessarily the same as the standard
            DependencyObject.GetParent() object.
            </summary>
            <param name="dependencyObject">Dependency object.</param>
            <returns>Parent or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.IsVisible(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Determines if the object is visible.
            </summary>
            <param name="pObject"></param>
            <returns>True if visible.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetTabIndex(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value set by application developer to determine the tab
            order. Default value is int.MaxValue which means to evaluate them in
            their ordering of the focus children collection.
            </summary>
            <param name="dependencyObject">Dependency object.</param>
            <returns>Tab index or int max value.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.CanHaveChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Determines if this object type can have children that should be considered
            for tab ordering.  Note that this doesn't necessarily mean if the object
            instance has focusable children right now.  CanHaveChildren() may be true
            even though the focus children collection is empty.
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetRootOfPopupSubTree(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns non-null if the given object is within a popup.
            </summary>
            <param name="dependencyObject">Dependency object.</param>
            <returns>Root of popup tree or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetTabNavigation(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the value of the TabNavigation property.
            </summary>
            <param name="pObject">Dependency object.</param>
            <returns>Keyboard navigation mode.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.IsPotentialTabStop(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Tests to see if the parameter object's type supports being a tab stop.
            Though the specific instance might not be a valid tab stop at the moment.
            (Example: Disabled state)
            </summary>
            <param name="dependencyObject">Dependency object.</param>
            <returns>True if input object is potential tab stop.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.CanRaiseFocusEventChange">
            <summary>
            Allow the focus change event with the below condition
            1. Plugin has a focus
            2. FullScreen window mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.UpdateFocus(Uno.UI.Xaml.Input.FocusMovement)">
             <summary>
            	Changes our currently focused element.  FocusMovementResult.WasMoved indicates
             whether the update is successful.  We will also be responsible for raising focus related
             events (GettingFocus/LosingFocus and GotFocus/LostFocus).
            
             FocusMovementResult.WasMoved indicates that the process has executed successfully.
             </summary>
             <param name="movement"></param>
             <returns></returns>
             <remarks>
             We have two ways (FocusMovementResult.GetHResult() and FocusMovementResult.WasMoved) to report success and failure.
             This is because it is possible that the given pNewFocus could not actually take focus for
             innocent reasons. (Currently in disabled state, etc.) This is not an important failure and GetHResult()
             return S_OK even though WasMoved() is false.
             
             A failing HRESULT is reserved for important failures like OOM conditions or
             reentrancy prevention. This distinction is made in the interest of reducing noise 
             in tools like XcpMon.
            
              Boundary cases:
             - If pNewFocus is the object that already has current focus,
               it is counted as success even though nothing was technically "updated".
            
             - If a focus change is cancelled in a Getting/Losing Focus handler, it
               is counted as success even though focus was technically not "updated".
             </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.RaiseLostFocusEvent(Windows.UI.Xaml.DependencyObject,System.Guid)">
            <summary>
            Raises the lost focus event asynchronously.
            </summary>
            <param name="pLostFocusElement">Element which lost focus.</param>
            <param name="correlationId">Correlation ID.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.NavigatedToByEngagingControl(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns true if pFocused was navigated to by engaging a control.
            </summary>
            <param name="pFocused">Focused element.</param>
            <returns>True if focused was navigated to by engaging a control.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.RaiseGotFocusEvent(Windows.UI.Xaml.DependencyObject,System.Guid)">
            <summary>
            Raises the got focus event asynchronously.
            </summary>
            <param name="pGotFocusElement">Element that got focus.</param>
            <param name="correlationId">Correlation Id</param>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.RaiseFocusElementRemovedEvent(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Raises focus element removed event.
            </summary>
            <param name="currentNextFocusableElement">Current next focusable element.</param>
            <returns>New focused element.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.SetFocusOnNextFocusableElement(Windows.UI.Xaml.FocusState,System.Boolean)">
            <summary>
            Set the focus on the next focusable control. This method will look
            up both the children and ancestor to find the next focusable control 
            </summary>
            <param name="focusState">Focus state.</param>
            <param name="shouldFireFocusedRemoved">Should fire focused removed event?</param>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.TryMoveFocusInstance(Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Move the focus to the specified navigation direction(Next/Previous).
            </summary>
            <param name="focusNavigationDirection">Focus navigation direction.</param>
            <returns>Was the move successful?</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFocusTargetDescendant(Windows.UI.Xaml.UIElement)">
            <summary>
            Get the focus target for this element if one exists (may return null, or a child element of given element).
            </summary>
            <param name="element">UI element.</param>
            <returns>UI element.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetFocusTarget">
            <summary>
            Get the element we need to draw the focus rect on.  Returning null will cause the focus rectangle
            to not be drawn.
            </summary>
            <returns>Focus target.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.SetFocusVisualDirty">
            <summary>
            Call when properties of focus visual change. Specifically called when Application.FocusVisualKind
            changes.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.RaiseAndProcessGettingAndLosingFocusEvents(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FocusState,Windows.UI.Xaml.Input.FocusNavigationDirection,System.Boolean,System.Guid)">
            <summary>
            Returns true if the focus change is cancelled.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.IsFocusedElementInPopup">
            <summary>
            Checks whether the focused element is in a popup.
            </summary>
            <returns>True if in popup.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.IsPluginFocused">
            <summary>
            Checks whether plugin is focused.
            </summary>
            <returns>True if focused.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.GetAppVisibleXamlRootContent(Uno.UI.Xaml.Core.ContentRoot)">
            <summary>
            Gets the XamlRoot.Content object as seen by the app, so we can use it to compare against a parameter.
            This is because some of our APIs (FocusManager TryNextFocus/FindNextElement) specifically allow an app
            to scope a search to the XamlRoot level (by passing in XamlRoot.Content) but not for arbitrary elements.
            This function calls XamlRoot.Content the way the app would.
            </summary>
            <param name="contentRoot"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.SetFocusedElement(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FocusState,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets focused element.
            </summary>
            <param name="pElement">Element to focus.</param>
            <param name="focusState">Requested focus state.</param>
            <param name="animateIfBringIntoView">Animate bring into view.</param>
            <param name="forceBringIntoView">Force bring into view.</param>
            <param name="isProcessingTab">Is tab being processed?</param>
            <param name="isShiftPressed">Is shift pressed?</param>
            <returns>True if focus successfully transitioned.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.SetFocusedElementWithDirection(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.FocusState,System.Boolean,System.Boolean,Windows.UI.Xaml.Input.FocusNavigationDirection)">
            <summary>
            Sets focused element in given direction.
            </summary>
            <param name="pElement">Element to set focus on.</param>
            <param name="focusState">Focus state.</param>
            <param name="animateIfBringIntoView">Animate bring into view.</param>
            <param name="forceBringIntoView">Force bring into view.</param>
            <param name="focusNavigationDirection">Focus direction.</param>
            <returns>True if focus was set.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FindFirstFocusableElementImpl(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Validation and forward to instance, same as next one, just different bReverse.
            </summary>
            <param name="pSearchScope">Search scope.</param>
            <returns>Focusable element or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.FocusManager.FindLastFocusableElementImpl(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Validation and forward to instance, same as previous one, just reverese.
            </summary>
            <param name="pSearchScope">Search scope.</param>
            <returns>Focusable element or null.</returns>
        </member>
        <member name="T:Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs">
            <summary>
            Provides data for the GotFocus event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs.NewFocusedElement">
            <summary>
            Gets the most recent focused element.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManagerGotFocusEventArgs.CorrelationId">
            <summary>
            Gets the unique ID generated when a focus movement event is initiated.
            </summary>
            <remarks>
            Each time a focus event is initiated, a unique CorrelationId is generated
            to help you track a focus event throughout these focus actions.
            A new CorrelationId is generated when:
            - The user moves focus.
            - The app moves focus using methods such as Control.Focus or FocusManager.TryFocusAsync.
            - The app gets/loses focus due to window activation(see CoreWindow.Activated ).
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs">
            <summary>
            Provides data for the LostFocus event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs.OldFocusedElement">
            <summary>
            Gets the last focused element.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusManagerLostFocusEventArgs.CorrelationId">
            <summary>
            Gets the unique ID generated when a focus movement event is initiated.
            </summary>
            <remarks>
            Each time a focus event is initiated, a unique CorrelationId is generated
            to help you track a focus event throughout these focus actions.
            A new CorrelationId is generated when:
            - The user moves focus.
            - The app moves focus using methods such as Control.Focus or FocusManager.TryFocusAsync.
            - The app gets/loses focus due to window activation(see CoreWindow.Activated ).
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.Input.FocusMovementResult">
            <summary>
            Represents the status of a focus operation.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.FocusMovementResult.Succeeded">
            <summary>
            Gets a boolean value that indicates whether
            focus can be assigned to an object.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.GettingFocusEventArgs">
            <summary>
            Provides data for the FocusManager.GettingFocus and UIElement.GettingFocus events.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.GettingFocusEventArgs.Direction">
            <summary>
            Gets the direction that focus moved from element to element within the app UI.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.GettingFocusEventArgs.FocusState">
            <summary>
            Gets the input mode through which an element obtained focus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.GettingFocusEventArgs.InputDevice">
            <summary>
            Gets the input device type from which input events are received.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.GettingFocusEventArgs.OldFocusedElement">
            <summary>
            Gets the last focused object.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.GettingFocusEventArgs.CorrelationId">
            <summary>
            Gets the unique ID generated when a focus movement event is initiated.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.GettingFocusEventArgs.NewFocusedElement">
            <summary>
            Gets the most recent focused object.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.GettingFocusEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled.
            A true value for Handled prevents most handlers along the event
            route from handling the same event again.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.GettingFocusEventArgs.Cancel">
            <summary>
            Gets or sets whether focus navigation should be canceled.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.GettingFocusEventArgs.TryCancel">
            <summary>
            Attempts to cancel the ongoing focus action.
            </summary>
            <returns>True, if the focus action is canceled; otherwise, false.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.GettingFocusEventArgs.TrySetNewFocusedElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attempts to redirect focus from the targeted element to the specified element.
            </summary>
            <param name="element">The object on which to set focus.</param>
            <returns>True, if the focus action is redirected; otherwise, false.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Input.HoldingRoutedEventArgs.PointerId">
            <summary>
            Used internally to prevent multiple holding events due to routed event bubbling for the same pointer
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.InputScope.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.InputScope.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.InputScope.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.InputScopeName.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.InputScopeName.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.InputScopeName.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.KeyboardAccelerator.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.KeyboardAccelerator.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.KeyboardAccelerator.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.LosingFocusEventArgs">
            <summary>
            Provides data for the FocusManager.LosingFocus and UIElement.LosingFocus events.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.LosingFocusEventArgs.Direction">
            <summary>
            Gets the direction that focus moved from element to element within the app UI.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.LosingFocusEventArgs.FocusState">
            <summary>
            Gets the input mode through which an element obtained focus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.LosingFocusEventArgs.InputDevice">
            <summary>
            Gets the input device type from which input events are received.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.LosingFocusEventArgs.OldFocusedElement">
            <summary>
            Gets the last focused object.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.LosingFocusEventArgs.CorrelationId">
            <summary>
            Gets the unique ID generated when a focus movement event is initiated.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.LosingFocusEventArgs.NewFocusedElement">
            <summary>
            Gets the most recent focused object.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.LosingFocusEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled.
            A true value for Handled prevents most handlers along the event
            route from handling the same event again.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.LosingFocusEventArgs.Cancel">
            <summary>
            Gets or sets whether focus navigation should be canceled.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.LosingFocusEventArgs.TryCancel">
            <summary>
            Attempts to cancel the ongoing focus action.
            </summary>
            <returns>True, if the focus action is canceled; otherwise, false.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.LosingFocusEventArgs.TrySetNewFocusedElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attempts to redirect focus from the targeted element to the specified element.
            </summary>
            <param name="element">The object on which to set focus.</param>
            <returns>True, if the focus action is redirected; otherwise, false.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs.Pointers">
            <summary>
            Gets identifiers of all pointer that has been involved in that manipulation (cf. Remarks).
            </summary>
            <remarks>This collection might contains pointers that has been released.</remarks>
            <remarks>All pointers are expected to have the same <see cref="P:Windows.Devices.Input.PointerIdentifier.Type"/>.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs.Pointers">
            <summary>
            Gets identifiers of all pointer that has been involved in that manipulation (cf. Remarks).
            </summary>
            <remarks>This collection might contains pointers that has been released.</remarks>
            <remarks>All pointers are expected to have the same <see cref="P:Windows.Devices.Input.PointerIdentifier.Type"/>.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs.Pointers">
            <summary>
            Gets identifiers of all pointer that has been involved in that manipulation (cf. Remarks).
            </summary>
            <remarks>This collection might contains pointers that has been released.</remarks>
            <remarks>All pointers are expected to have the same <see cref="P:Windows.Devices.Input.PointerIdentifier.Type"/>.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs.Pointers">
            <summary>
            Gets identifiers of all pointer that has been involved in that manipulation.
            </summary>
            <remarks>All pointers are expected to have the same <see cref="P:Windows.Devices.Input.PointerIdentifier.Type"/>.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs.Pointer">
            <summary>
            Gets identifier of the first pointer for which a manipulation is considered
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs">
            <summary>
            Provides data for the NoFocusCandidateFound event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs.Direction">
            <summary>
            Gets the direction that focus moved from element to element within the app UI.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs.InputDevice">
            <summary>
            Gets the input device type from which input events are received.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.NoFocusCandidateFoundEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled.
            A true value for Handled prevents most handlers along the event
            route from handling the same event again.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.Pointer.UniqueId">
            <summary>
            A unique identifier which contains <see cref="P:Windows.UI.Xaml.Input.Pointer.PointerDeviceType"/> and <see cref="P:Windows.UI.Xaml.Input.Pointer.PointerId"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.PointerRoutedEventArgs.Windows#UI#Core#CoreWindow#IPointerEventArgs#GetLocation(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Input.PointerRoutedEventArgs.Reset(System.Boolean)">
            <summary>
            Reset the internal state in order to re-use that event args to raise another event
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.PointerRoutedEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="F:Windows.UI.Xaml.Input.PointerRoutedEventArgs.StylusWithBarrelDown">
            <summary>
            The stylus is pressed while holding the barrel button
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.PointerRoutedEventArgs.StylusWithBarrelMove">
            <summary>
            The stylus is moved after having been pressed while holding the barrel button
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.PointerRoutedEventArgs.StylusWithBarrelUp">
            <summary>
            The stylus is released after having been pressed while holding the barrel button
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.StandardUICommand">
            <summary>
            Derives from XamlUICommand, adding a set of standard platform commands with pre-defined properties.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.StandardUICommand.#ctor">
            <summary>
            Initializes a new instance of the StandardUICommand class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.StandardUICommand.#ctor(Windows.UI.Xaml.Input.StandardUICommandKind)">
            <summary>
            Initializes a new instance of the StandardUICommand class of the specified kind.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="P:Windows.UI.Xaml.Input.StandardUICommand.Kind">
            <summary>
            Gets the platform command (with pre-defined properties such as
            icon, keyboard accelerator, and description) that can be used
            with a StandardUICommand.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.StandardUICommand.KindProperty">
            <summary>
            Identifies the Kind dependency property.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.XamlUICommand">
            <summary>
            Provides a base class for defining the command behavior of an interactive
            UI element that performs an action when invoked (such as sending an email,
            deleting an item, or submitting a form).
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Input.XamlUICommand.CanExecuteChanged">
            <summary>
            Occurs whenever something happens that affects whether the command can execute.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Input.XamlUICommand.CanExecuteRequested">
            <summary>
            Occurs when a CanExecute call is made.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Input.XamlUICommand.ExecuteRequested">
            <summary>
            Occurs when an Execute call is made.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.Label">
            <summary>
            Gets or sets the label for this element.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.IconSource">
            <summary>
            Gets or sets a glyph from the Segoe MDL2 Assets font for this element.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.Description">
            <summary>
            Gets or sets a description for this element.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.Command">
            <summary>
            Gets or sets the command behavior of an interactive UI element
            that performs an action when invoked, such as sending an email,
            deleting an item, or submitting a form.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.AccessKey">
            <summary>
            Gets or sets the access key (mnemonic) for this element.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.KeyboardAccelerators">
            <summary>
            Gets or sets the collection of key combinations for this element that invoke an action using the keyboard.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.AccessKeyProperty">
            <summary>
            Identifies the AccessKey dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.CommandProperty">
            <summary>
            Identifies the Command dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.DescriptionProperty">
            <summary>
            Identifies the Description dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.IconSourceProperty">
            <summary>
            Identifies the IconSource dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.KeyboardAcceleratorsProperty">
            <summary>
            Identifies the KeyboardAccelerators dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Input.XamlUICommand.LabelProperty">
            <summary>
            Identifies the Label dependency property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.XamlUICommand.NotifyCanExecuteChanged">
            <summary>
            Notifies the system that the command state has changed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.XamlUICommand.CanExecute(System.Object)">
            <summary>
            Retrieves whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command
            does not require data, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Input.XamlUICommand.Execute(System.Object)">
            <summary>
            Invokes the command.
            </summary>
            <param name="parameter">Data used by the command. If the command does not
            require data, this object can be set to null.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Input.XamlUICommand.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.XamlUICommand.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.XamlUICommand.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.FocusInputDeviceKind">
            <summary>
            Specifies the input device types from which input events are received.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusInputDeviceKind.None">
            <summary>
            No input. Used only when the focus is moved programmatically.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusInputDeviceKind.Mouse">
            <summary>
            Mouse input device.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusInputDeviceKind.Touch">
            <summary>
            Touch input device.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusInputDeviceKind.Pen">
            <summary>
            Pen input device.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusInputDeviceKind.Keyboard">
            <summary>
            Keyboard input device.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusInputDeviceKind.GameController">
            <summary>
            Game controller/remote control input device.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.FocusNavigationDirection">
            <summary>
            Specifies the direction that focus moves from element to element within the app UI.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusNavigationDirection.Next">
            <summary>
            The next element in the tab order.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusNavigationDirection.Previous">
            <summary>
            The previous element in the tab order.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusNavigationDirection.Up">
            <summary>
            An element above the element with focus.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusNavigationDirection.Down">
            <summary>
            An element below the element with focus.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusNavigationDirection.Left">
            <summary>
            An element to the left of the element with focus.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusNavigationDirection.Right">
            <summary>
            An element to the right of the element with focus.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.FocusNavigationDirection.None">
            <summary>
            No change in focus.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.InputScopeNameValue">
            <summary>
            Specifies a particular named input mode (<see cref="T:Windows.UI.Xaml.Input.InputScopeName"/>) used to populate an <see cref="T:Windows.UI.Xaml.Input.InputScope"/>.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Default">
            <summary>
            No input scope is applied.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Url">
            <summary>
            Indicates a Uniform Resource Identifier (URI). This can include URL, File, or File Transfer Protocol (FTP) formats.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.EmailSmtpAddress">
            <summary>
            Input scope is intended for working with a Simple Mail Transport Protocol (SMTP) form e-mail address (accountnamehost).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.PersonalFullName">
            <summary>
            Input scope is intended for working with a complete personal name.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.CurrencyAmountAndSymbol">
            <summary>
            Input scope is intended for working with amount and symbol of currency.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.CurrencyAmount">
            <summary>
            Input scope is intended for working with a currency amount (no currency symbol).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.DateMonthNumber">
            <summary>
            Input scope is intended for working with a numeric month of the year.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.DateDayNumber">
            <summary>
            Input scope is intended for working with a numeric day of the month.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.DateYear">
            <summary>
            Input scope is intended for working with a numeric year.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Digits">
            <summary>
            Input scope is intended for working with a collection of numbers.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Number">
            <summary>
            Input scope is intended for working with digits 0-9.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Password">
            <summary>
            Input scope is intended for working with an alphanumeric password, including other symbols, such as punctuation and mathematical symbols.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.TelephoneNumber">
            <summary>
            Input scope is intended for working with telephone numbers.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.TelephoneCountryCode">
            <summary>
            Input scope is intended for working with a numeric telephone country code.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.TelephoneAreaCode">
            <summary>
            Input scope is intended for working with a numeric telephone area code.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.TelephoneLocalNumber">
            <summary>
            Input scope is intended for working with a local telephone number.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.TimeHour">
            <summary>
            Input scope is intended for working with a numeric hour of the day.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.TimeMinutesOrSeconds">
            <summary>
            Input scope is intended for working with a numeric minute of the hour, or second of the minute.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.NumberFullWidth">
            <summary>
            Input scope is intended for full-width number characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.AlphanumericHalfWidth">
            <summary>
            Input scope is intended for alphanumeric half-width characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.AlphanumericFullWidth">
            <summary>
            Input scope is intended for alphanumeric full-width characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Hiragana">
            <summary>
            Input scope is intended for Hiragana characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.KatakanaHalfWidth">
            <summary>
            Input scope is intended for Katakana half-width characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.KatakanaFullWidth">
            <summary>
            Input scope is intended for Katakana full-width characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Hanja">
            <summary>
            Input scope is intended for Hanja characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.HangulHalfWidth">
            <summary>
            Input scope is intended for Hangul half-width characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.HangulFullWidth">
            <summary>
            Input scope is intended for Hangul full-width characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Search">
            <summary>
            Input scope is intended for search strings.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Formula">
            <summary>
            Input scope is intended for spreadsheet formula strings.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.SearchIncremental">
            <summary>
            Input scope is intended for search boxes where incremental results are displayed as the user types.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.ChineseHalfWidth">
            <summary>
            Input scope is intended for Chinese half-width characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.ChineseFullWidth">
            <summary>
            Input scope is intended for Chinese full-width characters.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.NativeScript">
            <summary>
            Input scope is intended for native script.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Text">
            <summary>
            Input scope is intended for working with text.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Chat">
            <summary>
            Input scope is intended for chat strings.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.NameOrPhoneNumber">
            <summary>
            Input scope is intended for working with a name or telephone number.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.EmailNameOrAddress">
            <summary>
            Input scope is intended for working with an email name or full email address.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.Maps">
            <summary>
            Input scope is intended for working with a map location.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.NumericPassword">
            <summary>
            Expected input is a numeric password, or PIN.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.NumericPin">
            <summary>
            Expected input is a numeric PIN.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.AlphanumericPin">
            <summary>
            Expected input is an alphanumeric PIN.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.FormulaNumber">
            <summary>
            Expected input is a mathematical formula. Advises input processors to show the number page.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.InputScopeNameValue.ChatWithoutEmoji">
            <summary>
            Expected input does not include emoji. Advises input processors to not show the emoji key.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.KeyboardNavigationMode">
            <summary>
            Specifies the tabbing behavior across tab stops for a tabbing sequence within a container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyboardNavigationMode.Local">
            <summary>
            Tab indexes are considered on the local subtree only inside this container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyboardNavigationMode.Cycle">
            <summary>
            Focus returns to the first or the last keyboard navigation stop inside
            of a container when the first or last keyboard navigation stop is reached.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyboardNavigationMode.Once">
            <summary>
            The container and all of its child elements as a whole receive focus only once.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.KeyTipPlacementMode">
            <summary>
            Defines constants that specify where a Key Tip is placed in relation to a UIElement.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyTipPlacementMode.Auto">
            <summary>
            The placement of the Key Tip is determined by the system.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyTipPlacementMode.Bottom">
            <summary>
            The Key Tip is placed below the element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyTipPlacementMode.Top">
            <summary>
            he Key Tip is placed above the element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyTipPlacementMode.Left">
            <summary>
            The Key Tip is placed left of the element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyTipPlacementMode.Right">
            <summary>
            The Key Tip is placed right of the element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyTipPlacementMode.Center">
            <summary>
            The Key Tip is centered on the element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.KeyTipPlacementMode.Hidden">
            <summary>
            The Key Tip is not shown.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.None">
            <summary>Do not present graphic interaction with manipulation events.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.TranslateX">
            <summary>Permit manipulation actions that translate the target on the X axis.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.TranslateY">
            <summary>Permit manipulation actions that translate the target on the Y axis.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.TranslateRailsX">
            <summary>Permit manipulation actions that translate the target on the X axis but using a rails mode.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.TranslateRailsY">
            <summary>Permit manipulation actions that translate the target on the Y axis but using a rails mode.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.Rotate">
            <summary>Permit manipulation actions that rotate the target.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.Scale">
            <summary>Permit manipulation actions that scale the target.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.TranslateInertia">
            <summary>Apply inertia to translate actions.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.RotateInertia">
            <summary>Apply inertia to rotate actions.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.ScaleInertia">
            <summary>Apply inertia to scale actions.</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.All">
            <summary>Enable all manipulation interaction modes except those supported through Direct Manipulation</summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.ManipulationModes.System">
            <summary>Enable system-driven touch interactions supported through Direct Manipulation.</summary>
        </member>
        <member name="M:Windows.UI.Xaml.Input.ManipulationModesExtensions.ToGestureSettings(Windows.UI.Xaml.Input.ManipulationModes)">
            <summary>
            Converts the given <see cref="T:Windows.UI.Xaml.Input.ManipulationModes"/> to a <see cref="T:Windows.UI.Input.GestureSettings"/>. cf. remarks.
            </summary>
            <remarks>
            The returned <see cref="T:Windows.UI.Input.GestureSettings"/> will contains only manipulation related flags
            as defined in <see cref="F:Windows.UI.Input.GestureSettingsHelper.Manipulations"/>
            </remarks>
            <param name="mode">The manipulation mode to convert</param>
            <returns>The gesture settings with the corresponding manipulation flags set.</returns>
        </member>
        <member name="T:Windows.UI.Xaml.Input.StandardUICommandKind">
            <summary>
            Specifies the set of platform commands (with pre-defined properties such as icon,
            keyboard accelerator, and description) that can be used with a StandardUICommand.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.None">
            <summary>
            No command. Default.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Cut">
            <summary>
            Specifies the cut command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Copy">
            <summary>
            Specifies the copy command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Paste">
            <summary>
            Specifies the paste command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.SelectAll">
            <summary>
            Specifies the select all command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Delete">
            <summary>
            Specifies the delete command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Share">
            <summary>
            Specifies the share command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Save">
            <summary>
            Specifies the save command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Open">
            <summary>
            Specifies the open command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Close">
            <summary>
            Specifies the close command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Pause">
            <summary>
            Specifies the pause command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Play">
            <summary>
            Specifies the play command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Stop">
            <summary>
            Specifies the stop command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Forward">
            <summary>
            Specifies the forward command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Backward">
            <summary>
            Specifies the backward command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Undo">
            <summary>
            Specifies the undo command.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.StandardUICommandKind.Redo">
            <summary>
            Specifies the redo command.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.XYFocusKeyboardNavigationMode">
            <summary>
            Specifies the 2D directional navigation behavior when using the keyboard arrow keys.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusKeyboardNavigationMode.Auto">
            <summary>
            Behavior is inherited from the elements ancestors.
            If all ancestors have a value of Auto, the fallback behavior is Disabled.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusKeyboardNavigationMode.Enabled">
            <summary>
            Arrow keys can be used for 2D directional navigation.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusKeyboardNavigationMode.Disabled">
            <summary>
            Arrow keys cannot be used for 2D directional navigation.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.XYFocusNavigationStrategy">
            <summary>
            Specifies the disambiguation strategy used for navigating between multiple candidate targets.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategy.Auto">
            <summary>
            Indicates that navigation strategy is inherited from the element's ancestors.
            If all ancestors have a value of Auto, the fallback strategy is Projection.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategy.Projection">
            <summary>
            Indicates that focus moves to the first element encountered when projecting the edge
            of the currently focused element in the direction of navigation.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategy.NavigationDirectionDistance">
            <summary>
            Indicates that focus moves to the element closest to the axis of the navigation direction.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategy.RectilinearDistance">
            <summary>
            Indicates that focus moves to the closest element based on the shortest 2D distance (Manhattan metric).
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride">
            <summary>
            Specifies how the XAML framework determines the target of an XY navigation.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride.None">
            <summary>
            No navigation override is applied.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride.Auto">
            <summary>
            Indicates that navigation strategy is inherited from the element's ancestors.
            If all ancestors have a value of Auto, the fallback strategy is Projection.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride.Projection">
            <summary>
            Indicates that focus moves to the first element encountered when projecting
            the edge of the currently focused element in the direction of navigation.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride.NavigationDirectionDistance">
            <summary>
            Indicates that focus moves to the element closest to the axis of the navigation direction.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Input.XYFocusNavigationStrategyOverride.RectilinearDistance">
            <summary>
            Indicates that focus moves to the closest element based on the shortest 2D distance (Manhattan metric).
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Markup.ContentPropertyAttribute">
            <summary>
            Defines the property that will be used in Xaml when using implicit content.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Markup.XamlBindingHelper">
            <summary>
            Provides helper methods for data binding.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(System.Type,System.Object)">
            <summary>
            Converts a value from a source type to a target type.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(Windows.UI.Xaml.UIElement)">
            <summary>
            Resumes rendering of the specified element.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(Windows.UI.Xaml.UIElement)">
            <summary>
            Suspends rendering of the specified element.
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Windows.UI.Xaml.Markup.ComponentHolder">
            <summary>
            Reference holder for XAML generated x:Name and other markup elements.
            </summary>
            <remarks>
            Storing an instance in a holder is weak as it assumes that the
            visual tree holds strong references to the target.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.ComponentHolder.#ctor">
            <summary>
            Creates an instance of ComponentHolder
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.ComponentHolder.#ctor(System.Boolean)">
            <summary>
            Creates an instance of ComponentHolder
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Markup.ComponentHolder.Instance">
            <summary>
            The component instance
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Markup.ComponentHolder.IsWeak">
            <summary>
            Indicates if the reference stored in <see cref="P:Windows.UI.Xaml.Markup.ComponentHolder.Instance"/> is a weak reference.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Markup.INameScope">
            <summary>
            Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Markup.INameScope.Owner">
            <summary>
            Returns the top-level <see cref="T:Windows.UI.Xaml.DependencyObject"/> that defined this namescope
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.INameScope.FindName(System.String)">
            <summary>
            Returns an object that has the provided identifying name.
            </summary>
            <param name="name">The name identifier for the object being requested.</param>
            <returns>The object, if found. Returns null if no object of that name was found.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.INameScope.RegisterName(System.String,System.Object)">
            <summary>
            Registers the provided name into the current XAML namescope.
            </summary>
            <param name="name">The name to register.</param>
            <param name="scopedElement">The specific element that the provided name refers to.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.INameScope.UnregisterName(System.String)">
            <summary>
            Unregisters the provided name from the current XAML namescope.
            </summary>
            <param name="name">The name to unregister.</param>
        </member>
        <member name="M:Windows.UI.Xaml.Markup.Reader.XamlTypeResolver.IsInitializedCollection(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the provided member is an C# initializable list (where the collection already exists, and no set property is present)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Navigation.PageStackEntry.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Navigation.PageStackEntry.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Navigation.PageStackEntry.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Printing.PrintDocument.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Printing.PrintDocument.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Printing.PrintDocument.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Ellipse.MeasureOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Ellipse.ArrangeOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Ellipse.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Line.MeasureOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Line.ArrangeOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Line.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Path.ArrangeOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Path.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Path.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Polygon.MeasureOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Polygon.ArrangeOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Polygon.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Polyline.MeasureOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Polyline.ArrangeOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Polyline.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Rectangle.MeasureOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Rectangle.ArrangeOverride(Windows.Foundation.Size)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Rectangle.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Shapes.Shape.ActualStrokeThickness">
             <summary>
             Returns 0.0 if Stroke is <c>null</c>, otherwise, StrokeThickness
             </summary>
             <remarks>Path does not need to define a stroke, in that case StrokeThickness should just return 0.
             Other shapes like Ellipse and Polygon will not draw if Stroke is null so returning 0 will have no effect
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Shape.GetAlignedHalfStrokeThickness">
            <summary>
            Gets the rounded/adjusted half stroke thickness that should be used for measuring absolute shapes (Path, Line, Polyline and Polygon)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Shapes.Shape.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Application.FocusVisualKind">
            <summary>
            Specifies the visual feedback used to indicate the UI element
            with focus when navigating with a keyboard or gamepad.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Application.Resuming">
            <summary>
            Occurs when the application transitions from Suspended state to Running state.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Application.Suspending">
            <summary>
            Occurs when the application transitions to Suspended state from some other state.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Application.EnteredBackground">
            <summary>
            Occurs when the app moves from the foreground to the background.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Application.LeavingBackground">
            <summary>
            Occurs when the app moves from the background to the foreground.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Application.UnhandledException">
            <summary>
            Occurs when an exception can be handled by app code, as forwarded from a native-level Windows Runtime error.
            Apps can mark the occurrence as handled in event data.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Application.PropagateResourcesChanged(System.Object,Windows.UI.Xaml.Data.ResourceUpdateReason)">
            <summary>
            Propagate theme changed to <paramref name="instance"/> and its descendants, to have them update any theme bindings.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Application.CreateSuspendingOperation">
            <remarks>
            The 5 second timeout seems to be the safest timeout for suspension activities.
            See - https://stackoverflow.com/a/3987733/732221
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.BringIntoViewOptions">
            <summary>
            Represents the options that can be applied when an element is brought into view.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.BringIntoViewOptions.#ctor">
            <summary>
            Initializes a new instance of the BringIntoViewOptions class.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewOptions.AnimationDesired">
            <summary>
            Gets or sets a value that indicates whether to use animation when the element is brought into view.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewOptions.HorizontalAlignmentRatio">
            <summary>
            Controls the positioning of the vertical axis of the TargetRect with respect
            to the vertical axis of the viewport. The value is clamped from 0.0f to 1.0f
            with 0.0f representing the left vertical edge and 1.0f representing the right
            vertical edge. By default this is set to 0.0f.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewOptions.HorizontalOffset">
            <summary>
            Gets or sets the horizontal distance to add to the viewport-relative
            position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewOptions.TargetRect">
            <summary>
            Gets or sets the area of an element to bring into view.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewOptions.VerticalAlignmentRatio">
            <summary>
            Controls the positioning of the horizontal axis of the TargetRect with respect
            to the horizontal axis of the viewport. The value is clamped from 0.0f to 1.0f
            with 0.0f representing the top horizontal edge and 1.0f representing the bottom
            horizontal edge. By default this is set to 0.0f.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewOptions.VerticalOffset">
            <summary>
            Gets or sets the vertical distance to add to the viewport-relative
            position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.BringIntoViewRequestedEventArgs">
            <summary>
            Provides data for the UIElement.BringIntoViewRequested event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewRequestedEventArgs.AnimationDesired">
            <summary>
            Gets or sets a value that specifies whether the scrolling should be animated.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewRequestedEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled.
            A true value prevents most handlers along the event route
            from handling the same event again.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewRequestedEventArgs.HorizontalAlignmentRatio">
            <summary>
            Gets the requested horizontal alignment ratio which controls the alignment
            of the vertical axis of the TargetRect with respect to the vertical axis of the viewport.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewRequestedEventArgs.HorizontalOffset">
            <summary>
            Gets or sets the horizontal distance to add to the viewport-relative
            position of the TargetRect after satisfying the requested HorizontalAlignmentRatio.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewRequestedEventArgs.TargetElement">
            <summary>
            Gets or sets the element that should be made visible in response to the event.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewRequestedEventArgs.TargetRect">
            <summary>
            Gets or sets the Rect in the TargetElement’s coordinate space to bring into view.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewRequestedEventArgs.VerticalAlignmentRatio">
            <summary>
            Gets the requested vertical alignment ratio which controls the alignment
            of the horizontal axis of the TargetRect with respect to the horizontal axis of the viewport.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.BringIntoViewRequestedEventArgs.VerticalOffset">
            <summary>
            Gets or sets the vertical distance to add to the viewport-relative
            position of the TargetRect after satisfying the requested VerticalAlignmentRatio.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DataTemplate.#ctor(System.Object,Windows.UI.Xaml.FrameworkTemplateBuilder)">
            <summary>
            Build a DataTemplate with an optional <paramref name="owner"/> to be provided during the call of <paramref name="factory"/>
            </summary>
            <param name="owner">The owner of the DataTemplate</param>
            <param name="factory">The factory to be called to build the template content</param>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObject">
            <summary>
            The dependency object interface.
            </summary>
            <remarks>This diverges from UWP's DependencyObject to be able to make any object a dependency object. The interface will be automatically implemented by Uno as a mix-in at compile-time.</remarks>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectCollection">
            <summary>
            Implements a practical collection class that can contain DependencyObject items.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyProperty">
            <summary>
            Defines a dependency property for a <see cref="T:Windows.UI.Xaml.DependencyObject"/>.
            </summary>
            <remarks>The properties are attached to the <see cref="!:IDependencyObject"/> marker interface.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyProperty.UniqueId">
            <summary>
            Provides a unique identifier for the dependency property lookup
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyProperty.HasWeakStorage">
            <summary>
            Determines if the property storage should be backed by a <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyProperty.IsDependencyObjectCollection">
            <summary>
            Determines if the property type inherits from <see cref="T:Windows.UI.Xaml.DependencyObjectCollection"/>
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.Register(System.String,System.Type,System.Type,Windows.UI.Xaml.PropertyMetadata)">
            <summary>
            Registers a dependency property on the specified <paramref name="ownerType"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="propertyType">The type of the property</param>
            <param name="ownerType">The owner type of the property</param>
            <param name="typeMetadata">The metadata to use when creating the property</param>
            <returns>A dependency property instance</returns>
            <exception cref="T:System.InvalidOperationException">A property with the same name has already been declared for the ownerType</exception>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.Register(System.String,System.Type,System.Type,Windows.UI.Xaml.FrameworkPropertyMetadata)">
            <summary>
            Registers a dependency property on the specified <paramref name="ownerType"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="propertyType">The type of the property</param>
            <param name="ownerType">The owner type of the property</param>
            <param name="typeMetadata">The metadata to use when creating the property</param>
            <returns>A dependency property instance</returns>
            <exception cref="T:System.InvalidOperationException">A property with the same name has already been declared for the ownerType</exception>
            <remarks>
            This method is to ensure that all uno controls defined dependency properties are using <see cref="T:Windows.UI.Xaml.FrameworkPropertyMetadata"/>.
            This is achieved by banning the other public overload in Uno.UI directory.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,Windows.UI.Xaml.PropertyMetadata)">
            <summary>
            Registers a attachable dependency property on the specified <paramref name="ownerType"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="propertyType">The type of the property</param>
            <param name="ownerType">The owner type of the property</param>
            <param name="typeMetadata">The metadata to use when creating the property</param>
            <returns>A dependency property instance</returns>
            <exception cref="T:System.InvalidOperationException">A property with the same name has already been declared for the ownerType</exception>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,Windows.UI.Xaml.FrameworkPropertyMetadata)">
            <summary>
            Registers a attachable dependency property on the specified <paramref name="ownerType"/>.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="propertyType">The type of the property</param>
            <param name="ownerType">The owner type of the property</param>
            <param name="typeMetadata">The metadata to use when creating the property</param>
            <returns>A dependency property instance</returns>
            <exception cref="T:System.InvalidOperationException">A property with the same name has already been declared for the ownerType</exception>
            <remarks>
            This method is to ensure that all uno controls defined dependency properties are using <see cref="T:Windows.UI.Xaml.FrameworkPropertyMetadata"/>.
            This is achieved by banning the other public overload in Uno.UI directory.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyProperty.CachedHashCode">
            <summary>
            A cached value of the hash code, which can only be defined once
            in the entire lifetime of the application.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyProperty.UnsetValue">
            <summary>
            Specifies a static value that is used by the dependency property system rather than null to indicate that
            the property exists, but does not have its value set by the dependency property system.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.GetMetadata(System.Type)">
            <summary>
            Retrieves the property metadata value for the dependency property as registered to a type. You specify the type you want info from as a type reference.
            </summary>
            <param name="forType">The name of the specific type from which to retrieve the dependency property metadata, as a type reference</param>
            <returns>A property metadata object.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyProperty.IsTypeNullable">
            <summary>
            Determines if the Type of the property is a ValueType
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.GetProperty(System.Type,System.String)">
            <summary>
            Get the specified dependency property on the specified owner type.
            </summary>
            <param name="type">The type that owns the dependency property</param>
            <param name="name">The name of the dependency property</param>
            <returns>A <see cref="T:Windows.UI.Xaml.DependencyProperty"/> instance, otherwise null it not found.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.GetPropertiesForType(System.Type)">
            <summary>
            Gets the dependencies properties for the specified type
            </summary>
            <param name="type">A dependency object</param>
            <returns>An array of Dependency Properties.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.GetFrameworkPropertiesForType(System.Type,Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Gets the dependencies properties for the specified type with specific Framework metadata options
            </summary>
            <param name="type">A dependency object</param>
            <param name="options">A set of flags that must be set</param>
            <returns>An array of Dependency Properties.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.ClearRegistry">
            <summary>
            Clears all the property registrations, when used in unit tests.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyProperty.ForceInitializeTypeConstructor(System.Type)">
             <summary>
             Forces the invocation of the cctor of a type and its base types that may contain DependencyProperty registrations.
             </summary>
             <remarks>
             This is required because of the lazy initialization nature of the classes that do not contain
             an explicit type ctor, but contain statically initialized fields. DependencyProperty.Register may not be called as a
             result, if none of the DependencyProperty fields are accessed prior to the enumeration of the fields via reflection.
            
             This method avoids requiring controls to include an explicit type constructor to function properly.
            
             See: http://stackoverflow.com/questions/6729841/why-did-the-beforefieldinit-behavior-change-in-net-4
             </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyPropertyChangedEventArgs">
            <summary>
            Describes the changes made to a dependency property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyPropertyChangedEventArgs.NewValue">
            <summary>
            Gets the new value of the dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyPropertyChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyPropertyChangedEventArgs.NewPrecedence">
            <summary>
            Gets the dependency property value precedence of the new value
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyPropertyChangedEventArgs.OldPrecedence">
            <summary>
            Gets the dependency property value precedence of the old value
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyPropertyChangedEventArgs.BypassesPropagation">
            <summary>
            Is true if an animated value should be ignored when setting the native
            value associated to it.  Happens in the scenario of GPU bound animations
            in iOS.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DispatcherTimer">
            <summary>
            Provides a timer that is integrated into the Dispatcher queue, which is processed at a specified interval of time and at a specified priority.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.DispatcherTimer.Tick">
            <summary>
            Occurs when the timer interval has elapsed.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DispatcherTimer.Interval">
            <summary>
            Gets or sets the amount of time between timer ticks.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DispatcherTimer.IsEnabled">
            <summary>
            Gets a value that indicates whether the timer is running.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DispatcherTimer.#ctor">
            <summary>
            Initializes a new instance of the DispatcherTimer class. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DispatcherTimer.Start">
            <summary>
            Starts the DispatcherTimer.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DispatcherTimer.Stop">
            <summary>
            Stops the DispatcherTimer.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DropCompletedEventArgs.Info">
            <summary>
            Get access to the shared data, for internal usage only.
            This has to be treated as readonly for drop completed.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ElementSoundPlayer">
            <summary>
            Represents a player for XAML control sounds.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ElementSoundPlayer.Volume">
            <summary>
            Gets or sets the volume of the sounds played by the Play method.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ElementSoundPlayer.State">
            <summary>
            Gets or sets a value that specifies whether the system plays control sounds.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ElementSoundPlayer.SpatialAudioMode">
            <summary>
            Gets or sets a value that indicates whether spatial audio is on, off, or handled automatically.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkElement._activeStyle">
            <summary>
            The current user-determined 'active Style'. This will either be the explicitly-set Style, if there is one, or otherwise the resolved implicit Style (either in the view hierarchy or in Application.Resources).
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkElement._thisTypeResourceKey">
            <summary>
            Cache for the current type key for faster implicit style lookup
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.UseConstraintOptimizations">
            <summary>
            Sets whether constraint-based optimizations are used to limit redrawing of the entire visual tree on Android. This can be
            globally set to false if it is causing visual errors (eg views not updating properly). Note: this can still be overridden by
            the <see cref="P:Windows.UI.Xaml.FrameworkElement.AreDimensionsConstrained"/> flag set on individual elements.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.AreDimensionsConstrained">
            <summary>
            If manually set, this flag overrides the constraint-based reasoning for optimizing layout calls. This may be useful for
            example if there are custom views in the visual hierarchy that do not implement <see cref="T:Windows.UI.Xaml.ILayoutConstraints"/>.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.IsSimpleLayout">
            <summary>
            Indicates that this view can participate in layout optimizations using the simplest logic.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.IsStyleSetFromItemsControl">
            <summary>
            Flag for whether this FrameworkElement has a Style set by an ItemsControl. This typically happens when the user provides an explicit container
            in XAML, but does not set a local style for the container.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.Parent">
            <summary>
            Gets the parent of this FrameworkElement in the object tree.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.VisualParent">
            <summary>
            Provides the managed visual parent of the element. This property can be overriden for specific
            scenarios, for example in case of SelectorItem, where actual parent is null, but visual parent
            is the list.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.IsParsing">
            <summary>
            True if the element is in the process of being parsed from Xaml.
            </summary>
            <remarks>This property shouldn't be set from user code. It's public to allow being set from generated code.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of the layout cycle. Classes can override this method to define their own "Measure" pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects or based on other considerations such as a fixed container size.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout. Classes can override this method to define their own "Arrange" pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children. </param>
            <returns>The actual size that is used after the element is arranged in layout.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.Measure(Windows.Foundation.Size)">
            <summary>
            Updates the DesiredSize of a UIElement. Typically, objects that implement custom layout for their
            layout children call this method from their own MeasureOverride implementations to form a recursive layout update.
            </summary>
            <param name="availableSize">
            The available space that a parent can allocate to a child object. A child object can request a larger
            space than what is available; the provided size might be accommodated if scrolling or other resize behavior is
            possible in that particular container.
            </param>
            <returns>The measured size.</returns>
            <remarks>
            Under Uno.UI, this method should not be called during the normal layouting phase. Instead, use the
            <see cref="M:Windows.UI.Xaml.FrameworkElement.MeasureElement(Android.Views.View,Windows.Foundation.Size)"/> methods, which handles native view properly.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.Arrange(Windows.Foundation.Rect)">
            <summary>
            Positions child objects and determines a size for a UIElement. Parent objects that implement custom layout
            for their child elements should call this method from their layout override implementations to form a recursive layout update.
            </summary>
            <param name="finalRect">The final size that the parent computes for the child in layout, provided as a <see cref="T:Windows.Foundation.Rect"/> value.</param>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.MeasureElement(Android.Views.View,Windows.Foundation.Size)">
            <summary>
            Measures an native element, in the same way <see cref="M:Windows.UI.Xaml.FrameworkElement.Measure(Windows.Foundation.Size)"/> would do.
            </summary>
            <param name="view">The view to be measured.</param>
            <param name="availableSize">
            The available space that a parent can allocate to a child object. A child object can request a larger
            space than what is available; the provided size might be accommodated if scrolling or other resize behavior is
            possible in that particular container.
            </param>
            <returns>The measured size - INCLUDES THE MARGIN</returns>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.ArrangeElement(Android.Views.View,Windows.Foundation.Rect)">
            <summary>
            Positions an object inside the current element and determines a size for a UIElement. Parent objects that implement custom layout
            for their child elements should call this method from their layout override implementations to form a recursive layout update.
            </summary>
            <param name="finalRect">The final size that the parent computes for the child in layout, provided as a <see cref="T:Windows.Foundation.Rect"/> value.</param>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.GetElementDesiredSize(Android.Views.View)">
            <summary>
            Provides the desired size, computed during a previous call to <see cref="M:Windows.UI.Xaml.FrameworkElement.Measure(Windows.Foundation.Size)"/> or <see cref="M:Windows.UI.Xaml.FrameworkElement.MeasureElement(Android.Views.View,Windows.Foundation.Size)"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreationComplete">
            <summary>
            Called when the element has completed being parsed from Xaml.
            </summary>
            <remarks>This method shouldn't be called from user code. It's public to allow being called from generated code.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.ApplyStyle">
            <summary>
            Update and apply the current 'active Style'.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.UpdateActiveStyle">
            <summary>
            Update the current 'active Style'. This will be the <see cref="P:Windows.UI.Xaml.FrameworkElement.Style"/> if it's set, or the implicit Style otherwise.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.ActualTheme">
            <summary>
            Gets or sets a value that determines the light-dark
            preference for the overall theme of an app.
            </summary>
            <remarks>
            This is always either Dark or Light. By default the color matches Application.Current.RequestedTheme.
            When the FrameworkElement.RequestedTheme has non-default value, it has precedence.
            When the value changes ActualThemeChanged event is triggered.
            </remarks>
        </member>
        <member name="E:Windows.UI.Xaml.FrameworkElement.ActualThemeChanged">
            <summary>
            Occurs when the ActualTheme property value has changed.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.AllowFocusWhenDisabled">
            <summary>
            Gets or sets whether a disabled control can receive focus.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.AllowFocusWhenDisabledProperty">
            <summary>
            Identifies the AllowFocusWhenDisabled  dependency property.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.AllowFocusOnInteraction">
            <summary>
            Gets or sets a value that indicates whether the element automatically gets focus when the user interacts with it.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.AllowFocusOnInteractionProperty">
            <summary>
            Identifies for the AllowFocusOnInteraction dependency property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.OnStyleChanged(Windows.UI.Xaml.Style,Windows.UI.Xaml.Style,Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Replace previous style with new style, at nominated precedence. This method is called separately for the user-determined
            'active style' and for the baked-in 'default style'.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.ApplyDefaultStyle">
            <summary>
            Apply the default style for this element, if one is defined.
            </summary>
            <remarks>
            The default app-wide style is always applied (using the lower priority ImplicitStyle) so that setters that are not
            set by a tree-provided style are still applied. (e.g. a tree-provided implicit style may only change the Foreground of a Button,
            and the Template property still needs to be applied for the template to work).
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.GetDefaultStyleKey">
            <summary>
            This returns <see cref="P:Windows.UI.Xaml.Controls.Control.DefaultStyleKey"/> for Control subclasses, and null for all other types.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.SuppressIsEnabled(System.Boolean)">
            <summary>
            Provides the ability to disable <see cref="P:Windows.UI.Xaml.FrameworkElement.IsEnabled"/> value changes, e.g. in the context of ICommand CanExecute.
            </summary>
            <param name="suppress">If true, <see cref="P:Windows.UI.Xaml.FrameworkElement.IsEnabled"/> will always be false</param>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.ShouldPropagateLayoutRequest">
            <summary>
            Determines whether a measure/arrange invalidation on this element requires elements higher in the tree to be invalidated,
            by determining recursively whether this element's dimensions are already constrained.
            </summary>
            <returns>True if a request should be elevated, false if only this view needs to be rearranged.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.DataTemplateRenderPhases">
            <summary>
            The list of available children render phases, if this
            control is the root element of a DataTemplate.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.InitializePhaseBinding(Windows.UI.Xaml.Controls.ContentControl)">
            <summary>
            Initializes the provided control for phased binding, if supported.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.RegisterPhaseBinding(Windows.UI.Xaml.Controls.ContentControl,System.Action{System.Action})">
            <summary>
            Registers the provided item template instance for phase binding
            </summary>
            <param name="content">The content control the phase-render</param>
            <param name="registerForRecycled">An action that will be executed when the provided view will be recycled.</param>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.UpdateThemeBindings(Windows.UI.Xaml.Data.ResourceUpdateReason)">
            <summary>
            Update ThemeResource references. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.SetDefaultForeground(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Set correct default foreground for the current theme.
            </summary>
            <param name="foregroundProperty">The appropriate property for the calling instance.</param>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.IsEffectiveViewportEnabled">
            <summary>
            Indicates if the effective viewport should/will be propagated to/by this element
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.ReconfigureViewportPropagation(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Make sure to request or disable effective viewport changes from the parent
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#RequestViewportUpdates(System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport)">
            <summary>
            Used by a child of this element, in order to subscribe to viewport updates
            (so the OnParentViewportChanged will be invoked on this given child)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.Windows#UI#Xaml#IFrameworkElement_EffectiveViewport#OnParentViewportChanged(System.Boolean,System.Boolean,Windows.UI.Xaml.IFrameworkElement_EffectiveViewport,Windows.UI.Xaml.ViewportInfo)">
            <summary>
            Used by a parent element to propagate down the viewport change
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.NativeVisualParent">
            <summary>
            The parent of the <see cref="T:Windows.UI.Xaml.FrameworkElement"/> in the visual tree, which may differ from its <see cref="P:Windows.UI.Xaml.FrameworkElement.Parent"/> (ie if it's a child of a native view).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.OnRemovedFromParent">
            <summary>
            Notifies that this view has been removed from its parent. This method is only 
            called when the parent is an UnoViewGroup.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.StretchAffectsMeasure">
            <summary>
            Indicates whether stretching (HorizontalAlignment.Stretch and VerticalAlignment.Stretch) should affect the measured size of the FrameworkElement.
            Only set on a FrameworkElement if the parent is a native view whose layouting relies on the values of MeasuredWidth and MeasuredHeight to account for stretching.
            Note that this doesn't take Margins into account.
            </summary>
            <remarks>
            The <see cref="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.DefaultValue"/> is updated at each <see cref="M:Windows.UI.Xaml.FrameworkElement.OnLoadedPartial"/> call, but may
            be overridden by an external called as <see cref="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Local"/>.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.FastLayout(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides an implementation <see cref="M:Android.Views.ViewGroup.Layout(System.Int32,System.Int32,System.Int32,System.Int32)"/> in order 
            to avoid the back and forth between Java and C#.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.OnBeforeArrange">
            <summary>
            Called before Arrange is called, this method will be deprecated
            once OnMeasure/OnArrange will be implemented completely
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.OnAfterArrange">
            <summary>
            Called after Arrange is called, this method will be deprecated
            once OnMeasure/OnArrange will be implemented completely
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.RenderPhase">
            <summary>
            An optional render phase, see x:Bind.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.TryCreateKeyRegistration">
            <summary>
            Lazily creates an event registration to the native KeyPress event, so that
            the cost of observing a key is only paid when there is a registation to
            either KeyUp or KeyDown events.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.FrameworkElement.KeyUp">
            <summary>
            An event raised when a keyboard key has gone up.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.FrameworkElement.KeyDown">
            <summary>
            An event raised when a keyboard key has gone down.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkElement.IsLoaded">
            <summary>
            Determines if the view is currently loaded (attached to the a window)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateTagProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.TagProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateFocusVisualSecondaryThicknessProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.FocusVisualSecondaryThicknessProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateFocusVisualSecondaryBrushProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.FocusVisualSecondaryBrushProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateFocusVisualPrimaryThicknessProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.FocusVisualPrimaryThicknessProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateFocusVisualPrimaryBrushProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.FocusVisualPrimaryBrushProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateFocusVisualMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.FocusVisualMarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateAllowFocusWhenDisabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.AllowFocusWhenDisabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateAllowFocusOnInteractionProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.AllowFocusOnInteractionProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateBackgroundProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.BackgroundProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateIsEnabledProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.IsEnabledProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateNameProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.NameProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateMarginProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.MarginProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateHorizontalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.HorizontalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateVerticalAlignmentProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.VerticalAlignmentProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.WidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.HeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateMinWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.MinWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateMinHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.MinHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateMaxWidthProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.MaxWidthProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.CreateMaxHeightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.FrameworkElement.MaxHeightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElement.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkTemplate._xamlScope">
            <summary>
            The scope at the time of the template's creation, which will be used when its contents are materialized.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplate.LoadContentCached">
            <summary>
            Loads a potentially cached template from the current template, see remarks for more details.
            </summary>
            <returns>A potentially cached instance of the template</returns>
            <remarks>
            The owner of the template is the system, which means that an 
            instance that has been detached from its parent may be reused at any time.
            If a control needs to be the owner of a created instance, it needs to use <see cref="M:Windows.UI.Xaml.FrameworkTemplate.LoadContent"/>.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplate.ReleaseTemplateRoot(Android.Views.View)">
            <summary>
            Manually return an unused template root created by <see cref="M:Windows.UI.Xaml.FrameworkTemplate.LoadContentCached"/> to the pool.
            </summary>
            <remarks>
            This is only used in specialized contexts. Normally the template reuse will be automatically handled by the pool.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplate.LoadContent">
            <summary>
            Creates a new instance of the current template.
            </summary>
            <returns>A new instance of the template</returns>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplate.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplate.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplate.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.PropertyMetadata">
            <summary>
            Defines the metadata to use for a dependency property/
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.PropertyMetadata.CoerceWhenUnchanged">
            <summary>
            Should <see cref="P:Windows.UI.Xaml.PropertyMetadata.CoerceValueCallback"/> be raised even if value has not changed?
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.PropertyPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PropertyPath class based on a path string.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="P:Windows.UI.Xaml.PropertyPath.Path">
            <summary>
            Gets the path value held by this PropertyPath.
            </summary>
            <value>The path.</value>
        </member>
        <member name="M:Windows.UI.Xaml.PropertyPath.ToString">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.PropertyPath.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.PropertyPath.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.PropertyPath.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.RectHelper">
            <summary>
            Provides helper methods to evaluate or set Rect values.
            </summary>
            <remarks>
            Most of the methods on this class are present directly as methods on the Rect class.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.RectHelper.Contains(Windows.Foundation.Rect,Windows.Foundation.Point)">
            <summary>
            Returns whether a given Point is within the bounds of a given Rect, for a shared coordinate reference.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.RectHelper.Equals(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Provides comparison of the values of two Rect values.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.RectHelper.Intersect(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Returns the areas of two specified Rect values that intersect, as a new Rect.
            </summary>
            <remarks>
            Contrary to Rect.Intersect(), original target won't be modified.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.RectHelper.Union(Windows.Foundation.Rect,Windows.Foundation.Point)">
            <summary>
            Creates a rectangle that is exactly large enough to contain the a specified rectangle and a specified point.
            </summary>
            <remarks>
            Contrary to Rect.Union(), original target won't be modified.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.RectHelper.Union(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Creates a rectangle that is exactly large enough to contain the two specified rectangles.
            </summary>
            <remarks>
            Contrary to Rect.Union(), original target won't be modified.
            </remarks>
        </member>
        <member name="E:Windows.UI.Xaml.ResourceDictionary.ResourceDictionaryValueChange">
            <summary>
            This event is fired when a key that has value of type <see cref="T:Windows.UI.Xaml.ResourceDictionary"/> is added or changed in the current <see cref="T:Windows.UI.Xaml.ResourceDictionary" />
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ResourceDictionary._hasUnmaterializedItems">
            <summary>
            If true, there may be lazily-set values in the dictionary that need to be initialized.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ResourceDictionary.IsSystemDictionary">
            <summary>
            Is this a ResourceDictionary created from system resources, ie within the Uno.UI assembly?
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.HasKey(System.Object)">
            <remarks>This method does not exist in C# UWP API
            and can be removed as breaking change later.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.Insert(System.Object,System.Object)">
            <remarks>This method does not exist in C# UWP API
            and can be removed as breaking change later.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.TryMaterializeLazy(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey@,System.Object@)">
            <summary>
            If retrieved element is a <see cref="T:Windows.UI.Xaml.ResourceDictionary.LazyInitializer"/> stub, materialize the actual object and replace the stub.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.TryResolveAlias(System.Object@)">
            <summary>
            If <paramref name="value"/> is a <see cref="T:Windows.UI.Xaml.ResourceDictionary.StaticResourceAliasRedirect"/>, replace it with the target of ResourceKey, or null if no matching resource is found.
            </summary>
            <returns>True if <paramref name="value"/> is a <see cref="T:Windows.UI.Xaml.ResourceDictionary.StaticResourceAliasRedirect"/>, false otherwise</returns>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.CopyFrom(Windows.UI.Xaml.ResourceDictionary)">
            <summary>
            Copy another dictionary's contents, this is used when setting the <see cref="P:Windows.UI.Xaml.ResourceDictionary.Source"/> property
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ResourceDictionary.IsParsing">
            <summary>
            True if the element is in the process of being parsed from Xaml.
            </summary>
            <remarks>This property shouldn't be set from user code. It's public to allow being set from generated code.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.TryMaterializeAll">
            <summary>
            Ensure all lazily-set values are materialized, prior to enumeration.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.UpdateThemeBindings(Windows.UI.Xaml.Data.ResourceUpdateReason)">
            <summary>
            Update theme bindings on DependencyObjects in the dictionary.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ResourceDictionary.LazyInitializer">
            <summary>
            Allows resources to be initialized on-demand using correct scope.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ResourceDictionary.StaticResourceAliasRedirect">
            <summary>
            Allows resources set by a StaticResource alias to be resolved with the correct theme at time of resolution (eg in response to the
            app theme changing).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceDictionary.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.RoutedEvent.IsAlwaysBubbled">
            <summary>
            Determines if this event is bubbled to the parent, not matter is a parent is subscribed
            to the handler with the flag handledEventToo or not.
            </summary>
            <remarks>
            For some events like PointerEvent, we always needs to get the full events sequence to maintain the
            internal state, so we always needs the handled events too.
            
            This flag avoids the complex update of the SubscribedToHandledEventsToo property coercing and inheritance
            for those kind of well-known events.
            
            Basically all routed events that are implementing the 'PrepareManaged***EventBubbling' to maintain local
            state should opt-in for that.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.RoutedEventArgs.CanBubbleNatively">
            <summary>
            If this event is currently coming from platform (native)
            and CAN bubble natively.
            </summary>
            <remarks>
            See Uno documentation to understand the difference
            between _native_ and _managed_ bubbling.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Setter.Property">
            <summary>
            The property being set by this setter
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Setter.ThemeResourceKey">
            <summary>
            The name of the ThemeResource applied to the value, if any, as an optimized key.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SetterBase.set_Property(System.String)">
            <summary>
            This method is present for binary backward compatibility with <see cref="T:Windows.UI.Xaml.Setter`1"/>.
            Use <see cref="P:Windows.UI.Xaml.Setter.Property"/> or <see cref="P:Windows.UI.Xaml.Setter`1.Property"/> instead.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SetterBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SetterBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SetterBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.StateTriggerBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.StateTriggerBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.StateTriggerBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Style._xamlScope">
            <summary>
            The xaml scope in force at the time the Style was created.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Style.ClearInvalidProperties(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.Style,Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Clear properties from the current Style that are not set by the incoming Style. (The remaining properties will be overwritten
            when the incoming Style is applied.)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Style.EnsureSetterMap">
            <summary>
            Creates a flattened list of setter methods for the whole hierarchy of
            styles.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Style.EnumerateSetters(Windows.UI.Xaml.Style,System.Collections.Generic.Dictionary{System.Object,Windows.UI.Xaml.SetterBase})">
            <summary>
            Enumerates all the styles for the complete hierarchy.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Style.RegisterDefaultStyleForType(System.Type,Windows.UI.Xaml.Style.StyleProviderHandler,System.Boolean)">
            <summary>
            Register lazy default style provider for the nominated type.
            </summary>
            <param name="type">The type to which the style applies</param>
            <param name="styleProvider">Function which generates the style. This will be called once when first used, then cached.</param>
            <param name="isNative">True if it is the native default style, false if it is the UWP default style.</param>
            <remarks>
            This is public for backward compatibility, but isn't called from Xaml-generated code any longer. 
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Style.RegisterDefaultStyleForType(System.Type,Uno.UI.IXamlResourceDictionaryProvider,System.Boolean)">
            <summary>
             Register lazy default style provider for the nominated type.
            </summary>
            <param name="type">The type to which the style applies</param>
            <param name="dictionaryProvider">Provides the dictionary in which the style is defined.</param>
            <param name="isNative">True if it is the native default style, false if it is the UWP default style.</param>
            <remarks>This is an Uno-specific method, normally only called from Xaml-generated code.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.Style.GetDefaultStyleForType(System.Type)">
            <summary>
            Returns the default Style for given type. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Style.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Style.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Style.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.TargetPropertyPath.#ctor(System.String,Windows.UI.Xaml.PropertyPath)">
            <summary>
            Constructor used by the XamlReader, for target late-binding
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.TriggerAction.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.TriggerAction.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.TriggerAction.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.TriggerBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.TriggerBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.TriggerBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.UIElement">
            <summary>
            This contains focus-related mixins that belong either in UIElement or in Control depending whether
            targeting UWP or WinUI. When WinUI becomes the "standard", we can move this in UIElement directly.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.OnBringIntoViewRequested(Windows.UI.Xaml.BringIntoViewRequestedEventArgs)">
            <summary>
            Called before the BringIntoViewRequested event occurs.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.StartBringIntoView">
            <summary>
            Initiates a request to the XAML framework to bring the element into view within any scrollable regions it is contained within.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.StartBringIntoView(Windows.UI.Xaml.BringIntoViewOptions)">
            <summary>
            Initiates a request to the XAML framework to bring the element into view using the specified options.
            </summary>
            <param name="options">Options.</param>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsWindowRoot">
            <summary>
            Is this view set to Window.Current.Content?
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsVisualTreeRoot">
            <summary>
            Is this view the top of the managed visual tree
            </summary>
            <remarks>This differs from the XamlRoot be being true for the root element of a native Popup.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.GetDefaultValue2(Windows.UI.Xaml.DependencyProperty,System.Object@)">
            <summary>
            Provide an instance-specific default value for the specified property
            </summary>
            <remarks>
            In general, it is best do define the property default value using <see cref="T:Windows.UI.Xaml.PropertyMetadata"/>.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsGeneratedContainer">
            <summary>
            Marks this control as a container generated by, eg, a <see cref="!:Primitives.Selector"/>, rather than an element explicitly 
            defined in xaml.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsContainerFromTemplateRoot">
            <summary>
            Marks this as a container defined in the root of an ItemTemplate, so that it can be handled appropriately when recycled.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.RenderTransform">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.RenderTransformProperty">
            <summary>
            Backing dependency property for <see cref="P:Windows.UI.Xaml.UIElement.RenderTransform"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.RenderTransformOrigin">
            <summary>
            This is a Transformation for a UIElement.  It binds the Render Transform to the View
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.Focus(Windows.UI.Xaml.FocusState)">
            <summary>
            Attempts to set the focus on the UIElement.
            </summary>
            <param name="value">Specifies how focus was set, as a value of the enumeration.</param>
            <returns>True if focus was set to the UIElement, or focus was already on the UIElement. False if the UIElement is not focusable.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.InnerUpdateLayout(Windows.UI.Xaml.UIElement)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.SetDependencyPropertyValueInternal(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the specified dependency property value using the format "name|value"
            </summary>
            <param name="dependencyPropertyNameAndValue">The name and value of the property</param>
            <returns>The currenty set value at the Local precedence</returns>
            <remarks>
            The signature of this method was chosen to work around a limitation of Xamarin.UITest with regards to
            parameters passing on iOS, where the number of parameters follows a unconventional set of rules. Using
            a single parameter with a simple delimitation format fits all platforms with little overhead.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.Windows#UI#Xaml#IUIElement#LastAvailableSize">
            <summary>
            Backing property for <see cref="M:Windows.UI.Xaml.Controls.Primitives.LayoutInformation.GetAvailableSize(Windows.UI.Xaml.UIElement)"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.LastAvailableSize">
            <summary>
            Gets the 'availableSize' of the last Measure
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.Windows#UI#Xaml#IUIElement#LayoutSlot">
            <summary>
            Backing property for <see cref="M:Windows.UI.Xaml.Controls.Primitives.LayoutInformation.GetLayoutSlot(Windows.UI.Xaml.FrameworkElement)"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.LayoutSlot">
            <summary>
            Gets the 'finalSize' of the last Arrange.
            Be aware that it's the rect provided by the parent, **before** margins and alignment are being applied,
            so the size of that rect can be different to the size get in the `ArrangeOverride`.
            </summary>
            <remarks>This is expressed in parent's coordinate space.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.LayoutSlotWithMarginsAndAlignments">
            <summary>
            This is the <see cref="P:Windows.UI.Xaml.UIElement.LayoutSlot"/> **after** margins and alignments has been applied.
            It's somehow the region into which an element renders itself in its parent (before any RenderTransform).
            This is the 'finalRect' of the last Arrange.
            </summary>
            <remarks>This is expressed in parent's coordinate space.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.Windows#UI#Xaml#IUIElement#DesiredSize">
            <summary>
            Backing property for <see cref="M:Windows.UI.Xaml.Controls.Primitives.LayoutInformation.GetDesiredSize(Windows.UI.Xaml.UIElement)"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.DesiredSize">
            <summary>
            Provides the size reported during the last call to Measure.
            </summary>
            <remarks>
            DesiredSize INCLUDES MARGINS.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.RenderSize">
            <summary>
            Provides the size reported during the last call to Arrange (i.e. the ActualSize)
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.ClippedFrame">
            <summary>
            This is the Frame that should be used as "available Size" for the Arrange phase.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsMeasureDirty">
            <summary>
            Determines if InvalidateMeasure has been called
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsMeasureDirtyOrMeasureDirtyPath">
            <summary>
            This is for compatibility - not implemented yet on this platform
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsFirstMeasureDone">
            <summary>
            If the first measure has been done since the control
            is connected to its parent
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsArrangeDirtyOrArrangeDirtyPath">
            <summary>
            This is for compatibility - not implemented yet on this platform
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.LayoutFlag.MeasureDirty">
            <summary>
            Means the Measure is dirty for the current element
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.LayoutFlag.FirstMeasureDone">
            <summary>
            Indicates that first measure has been done on the element after been connected to parent
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.LayoutFlag.MeasureDirtyPathDisabled">
            <summary>
            Means the MeasureDirtyPath is disabled on this element.
            </summary>
            <remarks>
            This flag is copied to children when they are attached, but can be re-enabled afterwards.
            This flag is used during invalidation
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.LayoutFlag.ArrangeDirtyPathDisabled">
            <summary>
            Means the MeasureDirtyPath is disabled on this element.
            </summary>
            <remarks>
            This flag is copied to children when they are attached, but can be re-enabled afterwards.
            This flag is used during invalidation
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.IsLayoutFlagSet(Windows.UI.Xaml.UIElement.LayoutFlag)">
            <summary>
            Check for one specific layout flag
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.IsAnyLayoutFlagsSet(Windows.UI.Xaml.UIElement.LayoutFlag)">
            <summary>
            Check that at least one of the specified flags is set
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.SetLayoutFlags(Windows.UI.Xaml.UIElement.LayoutFlag)">
            <summary>
            Set one or many flags (set to 1)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.ClearLayoutFlags(Windows.UI.Xaml.UIElement.LayoutFlag)">
            <summary>
            Reset one or many flags (set flag to zero)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.ResetLayoutFlags">
            <summary>
            Reset flags to original state
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement._animateIfBringIntoView">
            <summary>
            Set to True when the imminent Focus(FocusState) call needs to use an animation if bringing the focused
            element into view.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.SkipFocusSubtree">
            <summary>
            If true focusmgr does not set the focus on children or the element. Notice that this flag only and only
            regulates the focusmanager tab behavior.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsTabNavigationSet">
            <summary>
            Checks if the tab navigation value was ever set to a value.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.ProcessTabStopInternal(Windows.UI.Xaml.DependencyObject,System.Boolean,System.Boolean)">
            <summary>
            Called when ProcessTabStopInternal  interact with the tab stop element.
            </summary>
            <param name="pCandidateTabStop">Candidate tab stop.</param>
            <param name="isBackward">True if we are navigating backward.</param>
            <param name="didCycleFocusAtRootVisualScope">True if the focus cycled at root visual scope.</param>
            <returns>Tab processing result.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.ProcessCandidateTabStopInternal(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Called when ProcessCandidateTabStop  interact with the candidate tab stop element.
            </summary>
            <param name="pCurrentTabStop">Current tab stop.</param>
            <param name="pOverriddenCandidateTabStop">Overriden candidate tab stop.</param>
            <param name="isBackward">True if backward navigation.</param>
            <returns>Candidate tab stop processing result.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.GetNextTabStopOverride">
            <summary>
            Called when FocusManager get the next TabStop to interact with the focused control.
            </summary>
            <param name="focusedElement">Currently focused element.</param>
            <returns>Next tab stop.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.GetPreviousTabStopOverride">
            <summary>
            Called when FocusManager get the previous TabStop to interact with the focused control.
            </summary>
            <param name="focusedElement">Currently focused element.</param>
            <returns>Previous tab stop.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.GetFirstFocusableElementOverride">
            <summary>
            Called when FocusManager is looking for the first focusable element from the specified search scope.
            </summary>
            <returns>First focusable element or <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.GetLastFocusableElementOverride">
            <summary>
            Called when FocusManager is looking for the last focusable element from the specified search scope.
            </summary>
            <returns>Last focusable element or <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.GetUIElementAdjustedParentInternal(System.Boolean,System.Boolean)">
            <summary>
            Gets the parent of element and adjust it to popup if parent is PopupRoot.
            </summary>
            <param name="publicParentsOnly">Search public parents only.</param>
            <param name="useRealParentForClosedParentedPopups">Use real parent for closed parented popups.</param>
            <returns>UIElement or null.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CanHaveChildren">
            <summary>
            Default to FALSE and expose as needed.  Elements that don't support having children will never
            allocate children collections.  Elements that do support children may do so as an implementation
            detail (e.g. selection grippers for TextBlock), or to support public API exposure (e.g. Panel.Children).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.IsScroller">
            <summary>
            Based on UIElement.IsScroller in MUX. In MUX a private field is used,
            this is a simplification.
            </summary>
            <param name="uiElement">UIElement.</param>
            <returns>True if the element is a ScrollViewer.</returns>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.PointerCaptureResult.Added">
            <summary>
            The capture has been added for the given element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.PointerCaptureResult.AlreadyCaptured">
            <summary>
            The pointer has already been captured with the same kind by the given element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.PointerCaptureResult.Failed">
            <summary>
            The pointer has already been captured by another element,
            or it cannot be captured at this time (pointer not pressed).
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.PointerCapture.GetOrCreate(Windows.UI.Xaml.Input.Pointer)">
            <summary>
            Current currently active pointer capture for the given pointer, or creates a new one.
            </summary>
            <param name="pointer">The pointer to capture</param>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.PointerCapture.Pointer">
            <summary>
            The captured pointer
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.PointerCapture.MostRecentDispatchedEventFrameId">
            <summary>
            Gets the <see cref="P:Windows.UI.Xaml.Input.PointerRoutedEventArgs.FrameId"/> of the last args that has been handled by this capture
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.PointerCapture.IsImplicitOnly">
            <summary>
            Determines if this capture was made only for implicit kind
            (So we should not use it to filter out some event on other controls)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.PointerCapture.RemoveTarget(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement.PointerCaptureKind,Windows.UI.Xaml.Input.PointerRoutedEventArgs@)">
            <summary>
            Removes a UIElement from the targets of this capture.
            DO NOT USE directly, use instead the Release method on the UIElement in order to properly raise the PointerCaptureLost event.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.PointerCapture.ValidateAndUpdate(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.Input.PointerRoutedEventArgs,System.Boolean)">
            <summary>
            Validate if the provided routed event args are relevant for the given element according to the active captures
            </summary>
            <param name="element">The target element for which the args are validated</param>
            <param name="args">The pending pointer event args that is under test</param>
            <param name="autoRelease">A flag that allows to automatically release any pending out-dated capture (for PointerDown only)</param>
            <returns>A boolean which indicates if the args are valid or not for the given element</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.PointerCapture.ReleasePointerNative">
            <remarks>
            This method contains or is called by a try/catch containing method and can
            be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.PointerCapture.CapturePointerNative">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.Element">
            <summary>
            The target element to which event args should be forwarded
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.NativeCaptureElement">
            <summary>
            The element to used for the native capture
            </summary>
            <remarks>
            On WASM this might be different than the <see cref="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.Element"/>:
            In case of implicit capture, the element used for the capture will prevent any pointer event on sub element
            (sub element will actually get a pointer 'leave' on capture, and a 'enter' on capture release).
            So instead of capturing using the actual element, we use the 'OriginalSource' of the 'relatedArgs',
            so event will still be sent to sub elements and we will then filter them out if needed.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.Kind">
            <summary>
            Gets tha current capture kind that was enabled on the target
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.IsInNativeBubblingTree">
             <summary>
             Determines if the <see cref="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.Element"/> is in the native bubbling tree.
             If so we could rely on standard events bubbling to reach it.
             Otherwise this means that we have to bubble the event in managed only.
            
             This makes sense only for platform that has "implicit capture"
             (i.e. all pointers events are sent to the element on which the pointer pressed
             occured at the beginning of the gesture). This is the case on iOS and Android.
             </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.LastDispatched">
            <summary>
            Gets the last event dispatched by the <see cref="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.Element"/>.
            In case of native bubbling (cf. <see cref="P:Windows.UI.Xaml.UIElement.PointerCaptureTarget.IsInNativeBubblingTree"/>),
            this helps to determine that an event was already dispatched by the Owner:
            if a UIElement is receiving and event with the same timestamp, it means that the element
            is a parent of the Owner and we are only bubbling the routed event, so this element can
            raise the event (if the opposite, it means that the element is a child, so it has to mute the event).
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.ArePointersEnabled">
            <summary>
            Validates that this element is able to manage pointer events.
            If this element is only the shadow of a ghost native view that was instantiated for marshalling purposes by Xamarin,
            the _gestures instance will be invalid and trying to interpret a native pointer event might crash the app.
            This flag should be checked when receiving a pointer related event from the native view to prevent this case.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.GetHitTestVisibility">
            <summary>
            Indicates if this element or one of its child might be target pointer pointer events.
            Be aware this doesn't means that the element itself can be actually touched by user,
            but only that pointer events can be raised on this element.
            I.e. this element is NOT <see cref="F:Windows.UI.Xaml.HitTestability.Collapsed"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CompleteGesture">
            <summary>
            Prevents the gesture recognizer to generate a manipulation. It's designed to be invoked in Pointers events handlers.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.PrepareShare(Windows.ApplicationModel.DataTransfer.DataPackage)">
            <summary>
            Provides ability to a control to fulfill the data that is going to be shared, by drag-and-drop for instance.
            </summary>
            <remarks>This is expected to be overriden by controls like Image or TextBlock to self fulfill data.</remarks>
            <param name="data">The <see cref="T:Windows.ApplicationModel.DataTransfer.DataPackage"/> to fulfill.</param>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.OnNativePointerCancel(Windows.UI.Xaml.Input.PointerRoutedEventArgs,System.Boolean)">
            <summary>
            When the system cancel a pointer pressed, either
            1. because the pointing device was lost/disconnected,
            2. or the system detected something meaning full and will handle this pointer internally.
            This second case is the more common (e.g. ScrollViewer) and should be indicated using the <paramref name="isSwallowedBySystem"/> flag.
            </summary>
            <param name="isSwallowedBySystem">Indicates that the pointer was muted by the system which will handle it internally.</param>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsPointerOver">
            <summary>
            Indicates if a pointer (no matter the pointer) is currently over the element (i.e. OverState)
            WARNING: This might not be maintained for all controls, cf. remarks.
            </summary>
            <remarks>
            This flag is updated by the managed Pointers events handling, however on Android and WebAssembly,
            pointer events are marshaled to the managed code only if there is some listeners to the events.
            So it means that this flag will be maintained only if you subscribe at least to one pointer event
            (or override one of the OnPointer*** methods).
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.IsOver(Windows.UI.Xaml.Input.Pointer)">
            <summary>
            Indicates if a pointer is currently over the element (i.e. OverState)
            WARNING: This might not be maintained for all controls, cf. remarks.
            </summary>
            <remarks>
            The over state is updated by the managed Pointers events handling, however on Android and WebAssembly,
            pointer events are marshaled to the managed code only if there is some listeners to the events.
            So it means that this method will give valid state only if you subscribe at least to one pointer event
            (or override one of the OnPointer*** methods).
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsPointerPressed">
            <summary>
            Indicates if a pointer was pressed while over the element (i.e. PressedState).
            Note: The pressed state will remain true even if the pointer exits the control (while pressed)
            WARNING: This might not be maintained for all controls, cf. remarks.
            </summary>
            <remarks>
            This flag is updated by the managed Pointers events handling, however on Android and WebAssembly,
            pointer events are marshaled to the managed code only if there is some listeners to the events.
            So it means that this flag will be maintained only if you subscribe at least to one pointer event
            (or override one of the OnPointer*** methods).
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.IsPressed(Windows.UI.Xaml.Input.Pointer)">
            <summary>
            Indicates if a pointer was pressed while over the element (i.e. PressedState)
            Note: The pressed state will remain true even if the pointer exits the control (while pressed)
            WARNING: This might not be maintained for all controls, cf. remarks.
            </summary>
            <remarks>
            The pressed state is updated by the managed Pointers events handling, however on Android and WebAssembly,
            pointer events are marshaled to the managed code only if there is some listeners to the events.
            So it means that this method will give valid state only if you subscribe at least to one pointer event
            (or override one of the OnPointer*** methods).
            </remarks>
            <remarks>
            Note that on UWP the "pressed" state is managed **PER POINTER**, and not per pressed button on the given pointer.
            It means that with a mouse if you follow this sequence : press left => press right => release right => release left,
            you will get only one 'PointerPressed' and one 'PointerReleased'.
            Same thing if you release left first (press left => press right => release left => release right), and for the pen's barrel button.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.HasPointerCapture">
            <summary>
            Indicates if this UIElement has any active ** EXPLICIT ** pointer capture.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.ReleasePointerCapture(Windows.Devices.Input.PointerIdentifier,System.Boolean,Windows.UI.Xaml.UIElement.PointerCaptureKind)">
            <summary>
            Release a pointer capture with the ability to not raise the <see cref="E:Windows.UI.Xaml.UIElement.PointerCaptureLost"/> event (cf. Remarks)
            </summary>
            <remarks>
            On some controls we use the Capture to track the pressed state properly, to detect click.  But in few cases (i.e. Hyperlink)
            UWP does not raise a PointerCaptureLost. This method give the ability to easily follow this behavior without requiring
            the control to track and handle the event.
            </remarks>
            <param name="pointer">The pointer to release.</param>
            <param name="muteEvent">Determines if the event should be raised or not.</param>
            <param name="kinds">The kind of captures to release.</param>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.IsDragOver(Windows.UI.Xaml.Input.Pointer)">
            <summary>
            Gets a boolean which indicates if there is currently a Drag and Drop operation pending over this element.
            This indicates that a **data package is currently being dragged over this element and might be dropped** on this element or one of its children,
            and not that this element nor one of its children element is being drag.
            As this flag reflect the state of the element **or one of its children**, it might be True event if `DropAllowed` is `false`.
            </summary>
            <param name="pointer">The pointer associated to the drag and drop operation</param>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.VisibilityProperty">
            <summary>
            Sets the visibility of the current view
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.BringIntoViewRequestedEvent">
            <summary>
            Gets the identifier for the BringIntoViewRequested routed event.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.UIElement.BringIntoViewRequested">
            <summary>
            Occurs when StartBringIntoView is called on this element or one of its descendants.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.InsertHandler(Windows.UI.Xaml.RoutedEvent,System.Object,System.Boolean)">
            <summary>
            Inserts an event handler as the first event handler.
            This is for internal use only and allow controls to lazily subscribe to event only when required while remaining the first invoked handler,
            which is ** really ** important when marking an event as handled.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.RaiseEvent(Windows.UI.Xaml.RoutedEvent,Windows.UI.Xaml.RoutedEventArgs,Windows.UI.Xaml.UIElement.BubblingContext)">
            <summary>
            Raise a routed event
            </summary>
            <remarks>
            Return true if event is handled in managed code (shouldn't bubble natively)
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.BubblingContext.OnManagedBubbling">
            <summary>
            When bubbling in managed code, the <see cref="M:Windows.UI.Xaml.UIElement.RaiseEvent(Windows.UI.Xaml.RoutedEvent,Windows.UI.Xaml.RoutedEventArgs,Windows.UI.Xaml.UIElement.BubblingContext)"/> will take care to raise the event on each parent,
            considering the Handled flag.
            This value is used to flag events that are sent to element to maintain their internal state,
            but which are not meant to initiate a new event bubbling (a.k.a. invoke the "RaiseEvent" again)
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.BubblingContext.Mode">
            <summary>
            The mode to use for bubbling
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.BubblingContext.Root">
            <summary>
            An optional root element on which the bubbling should stop.
            </summary>
            <remarks>It's expected that the event is raised on this Root element.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.BubblingContext.IsInternal">
            <summary>
            Indicates that the associated event should not be publicly raised.
            </summary>
            <remarks>
            The "internal" here refers only to the private state of the code which has initiated this event, not subclasses.
            This means that an event flagged as "internal" can bubble to update the private state of parents,
            but the UIElement.RoutedEvent won't be raised in any way (public and internal handlers) and it won't be sent to Control.On`RoutedEvent`() neither.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.UIElement.BubblingMode">
            <summary>
            Defines the mode used to bubble an event.
            </summary>
            <remarks>
            This takes priority over the <see cref="P:Windows.UI.Xaml.RoutedEvent.IsAlwaysBubbled"/>.
            Preventing default bubble behavior of an event is meant to be used only when the event has already been raised/bubbled,
            but we need to sent it also to some specific elements (e.g. implicit captures).
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.BubblingMode.Bubble">
            <summary>
            The event should bubble normally in this element and its parent
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.BubblingMode.IgnoreElement">
            <summary>
            The event should not be raised on current element
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.BubblingMode.IgnoreParents">
            <summary>
            The event should not bubble to parent elements
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement.BubblingMode.NoBubbling">
            <summary>
            The bubbling should stop here (the event won't even be raised on the current element)
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.UIElement._nativeChildrenCount">
            <summary>
            Keeps the count of native children (non-UIElements), for clipping purpoess.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.OnChildViewAdded(Android.Views.View)">
            <summary>
            Invoked when a child view has been added.
            </summary>
            <param name="view">The view being removed</param>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsMeasureDirtyPath">
            <summary>
            On Android, the equivalent of the "Dirty Path" is the native
            "Layout Requested" mechanism.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsArrangeDirty">
            <summary>
            Determines if InvalidateArrange has been called
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.IsArrangeDirtyPath">
            <summary>
            Not implemented yet on this platform.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.TransientArrangeFinalRect">
            <summary>
            Gets the **logical** frame (a.k.a. 'finalRect') of the element while it's being arranged by a managed parent.
            </summary>
            <remarks>Used to keep "double" precision of arrange phase.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.UIElement.FrameRoundingAdjustment">
             <summary>
             The difference between the physical layout width and height taking the origin into account,
             and the physical width and height that would've been calculated for an origin of (0,0).
             The difference may be -1,0, or +1 pixels due to different roundings.
            
             (Eg, consider a Grid that is 31 logical pixels high, with 3 children with alignment Stretch in successive Star-sized rows.
             Each child will be measured with a logical height of 10.3, and logical origins of 0, 10.3, and 20.6.  Assume the device scale is 1.
             The child origins will be converted to 0, 10, and 21 respectively in integer pixel values; this will give heights of 10, 11, and 10 pixels.
             The FrameRoundingAdjustment values will be (0,0), (0,1), and (0,0) respectively.
             </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.AdjustCornerRadius(Android.Graphics.Canvas,Windows.UI.Xaml.CornerRadius)">
            <summary>
            This method is called from the OnDraw of elements supporting rounded corners:
            Border, Rectangle, Panel...
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.TransformToVisual(Android.Views.View,Android.Views.View)">
            <summary>
            WARNING: This provides an approximation for Android.View only.
            Prefer to use the GetTransform between 2 UIElement when possible.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.TryGetParentUIElementForTransformToVisual(Windows.UI.Xaml.UIElement@,System.Double@,System.Double@)">
            <summary>
            Note: Offsets are only an approximation which does not take in consideration possible transformations
            applied by a 'ViewGroup' between this element and its parent UIElement.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.SetDependencyPropertyValue(System.String)">
            <summary>
            Sets the specified dependency property value using the format "name|value"
            </summary>
            <param name="dependencyPropertyNameAndvalue">The name and value of the property</param>
            <returns>The currenty set value at the Local precedence</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.GetDependencyPropertyValue(System.String)">
            <summary>
            Provides a native value for the dependency property with the given name on the current instance. If the value is a primitive type, 
            its native representation is returned. Otherwise, the <see cref="M:System.Object.ToString"/> implementation is used/returned instead.
            </summary>
            <param name="dependencyPropertyName">The name of the target dependency property</param>
            <returns>The content of the target dependency property (its actual value if it is a primitive type ot its <see cref="M:System.Object.ToString"/> representation otherwise</returns>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.TouchReRouter.OnTouch(Android.Views.View,Android.Views.MotionEvent)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.RedispatchPointerExited(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Used by the VisualRoot to redispatch a pointer exit on pointer up
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusKeyboardNavigationProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusKeyboardNavigationProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusDownNavigationStrategyProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusDownNavigationStrategyProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusLeftNavigationStrategyProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusLeftNavigationStrategyProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusRightNavigationStrategyProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusRightNavigationStrategyProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusUpNavigationStrategyProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusUpNavigationStrategyProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateTabFocusNavigationProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.TabFocusNavigationProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateFocusStateProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.FocusStateProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateTabIndexProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.TabIndexProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusUpProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusUpProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusDownProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusDownProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusLeftProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusLeftProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateXYFocusRightProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.XYFocusRightProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateUseSystemFocusVisualsProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.UseSystemFocusVisualsProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateIsHitTestVisibleProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.IsHitTestVisibleProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateOpacityProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.OpacityProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateVisibilityProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.VisibilityProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateContextFlyoutProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.ContextFlyoutProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.CreateKeyboardAcceleratorsProperty">
            <summary>
            Generated method used to create the <see cref="P:Windows.UI.Xaml.UIElement.KeyboardAcceleratorsProperty" /> member value
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.UIElement.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.VisualState.LazyBuilder">
            <summary>
            Lazy builder provided by the source generator. Invoking this will
            optionally fill <see cref="P:Windows.UI.Xaml.VisualState.Storyboard"/> and <see cref="P:Windows.UI.Xaml.VisualState.Setters"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualState.EnsureMaterialized">
            <summary>
            Ensures that the lazy builder has been invoked
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualState.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualState.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualState.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.VisualStateGroup._xamlScope">
            <summary>
            The xaml scope in force at the time the VisualStateGroup was created.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualStateGroup.GetActiveTrigger">
            <remarks>
            This method is not using LINQ for performance considerations.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.VisualStateGroup.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualStateGroup.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualStateGroup.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualStateManager.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualStateManager.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualStateManager.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualTransition.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualTransition.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisualTransition.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Window">
            <summary>
            Represents an application window.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Window.Activated">
            <summary>
            Occurs when the window has successfully been activated.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Window.Closed">
            <summary>
            Occurs when the window has closed.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Window.SizeChanged">
            <summary>
            Occurs when the app window has first rendered or has changed its rendering size.
            </summary>
        </member>
        <member name="E:Windows.UI.Xaml.Window.VisibilityChanged">
            <summary>
            Occurs when the value of the Visible property changes.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Window.RootElement">
            <summary>
            This is the real root of the **managed** visual tree.
            This means its the root panel which contains the <see cref="P:Windows.UI.Xaml.Window.Content"/>
            but also the PopupRoot, the DragRoot and all other internal UI elements.
            On platforms like iOS and Android, we might still have few native controls above this.
            </summary>
            <remarks>This element is flagged with IsVisualTreeRoot.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.Window.Bounds">
            <summary>
            Gets a Rect value containing the height and width of the application window in units of effective (view) pixels.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Window.CoreWindow">
            <summary>
            Gets an internal core object for the application window.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Window.Dispatcher">
            <summary>
            Gets the CoreDispatcher object for the Window, which is generally the CoreDispatcher for the UI thread.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Window.Visible">
            <summary>
            Gets a value that reports whether the window is visible.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Window.Current">
            <summary>
            Gets the window of the current thread.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.Window.RegisterSizeChangedEvent(Windows.UI.Xaml.WindowSizeChangedEventHandler)">
            <summary>
            Provides a memory-friendly registration to the <see cref="E:Windows.UI.Xaml.Window.SizeChanged" /> event.
            </summary>
            <returns>A disposable instance that will cancel the registration.</returns>
        </member>
        <member name="T:Windows.UI.Xaml.XamlRoot">
            <summary>
            Represents a tree of XAML content and information about the context in which it is hosted.
            </summary>
            <remarks>
            Effectively a public API wrapper around VisualTree.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.ApplicationRequiresPointerMode">
            <summary>
            Specifies the interaction experiences for non-pointer
            devices such as an Xbox controller or remote control.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ApplicationRequiresPointerMode.Auto">
            <summary>
            The default system experience for the input device.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ApplicationRequiresPointerMode.WhenRequested">
            <summary>
            A pointer-like interaction experience using a mouse
            cursor that can be freely moved using non-pointer input devices.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ApplicationTheme">
            <summary>
            Declares the theme preference for an app.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ApplicationTheme.Light">
            <summary>
            Use the Light default theme.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ApplicationTheme.Dark">
            <summary>
            Use the Dark default theme.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.AttachedDependencyObject">
            <summary>
            DependencyObject wrapped for POCO to enable x:Bind support
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.AttachedDependencyObject.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.AttachedDependencyObject.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.AttachedDependencyObject.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextTrimming.None">
            <summary>
            [NOT SUPPORTED, Fallback = 'Clip']
            Text is not trimmed.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextTrimming.CharacterEllipsis">
            <summary>
            Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextTrimming.WordEllipsis">
            <summary>
            [NOT SUPPORTED, Fallback = 'CharacterEllipsis']
            Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextTrimming.Clip">
            <summary>
            Text is trimmed at a pixel level, visually clipping the excess glyphs.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.CornerRadius">
            <summary>Defines the radius of a rectangle's corners. </summary>
        </member>
        <member name="P:Windows.UI.Xaml.CornerRadius.TopLeft">
            <summary>Gets or sets the radius of the top-left corner.</summary>
            <returns>The radius of the top-left corner. The default is 0.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.CornerRadius.TopRight">
            <summary>Gets or sets the radius of the top-right corner. </summary>
            <returns>The radius of the top-right corner. The default is 0.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.CornerRadius.BottomRight">
            <summary>Gets or sets the radius of the bottom-right corner. </summary>
            <returns>The radius of the bottom-right corner. The default is 0.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.CornerRadius.BottomLeft">
            <summary>Gets or sets the radius of the bottom-left corner. </summary>
            <returns>The radius of the bottom-left corner. The default is 0.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.CornerRadius.Equals(Windows.UI.Xaml.CornerRadius)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.CornerRadius.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.CornerRadius.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.CornerRadius.ToString">
            <inheritdoc />
        </member>
        <member name="F:Windows.UI.Xaml.CornerRadius.None">
            <summary>
            Provides a Zero-valued corner radius.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.CornerRadius.op_Implicit(System.Double)~Windows.UI.Xaml.CornerRadius">
            <summary>
            Builds a uniform radius from a double;
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.CornerRadius.op_Equality(Windows.UI.Xaml.CornerRadius,Windows.UI.Xaml.CornerRadius)">
            <summary>
            Determines if two CornerRadius instances are equal.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.CornerRadius.op_Inequality(Windows.UI.Xaml.CornerRadius,Windows.UI.Xaml.CornerRadius)">
            <summary>
            Determines if two CornerRadius instances are equal.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.CornerRadiusConverter">
            <summary>Defines the radius of a rectangle's corners. </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectCollectionBase">
            <summary>
            Non-generic base class used to generate the DependencyObject implementation.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectCollectionBase.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectCollectionBase.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectCollectionBase.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectCollection`1">
            <summary>
            Generic base class from which other collections (DependencyObjectCollection, InlineCollection, GeometryCollection, PathFigureCollection, ArcFigureCollection, etc.) derive.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyObjectCollection`1.Items">
            <summary>
            An internal direct access to the internal list to be able to do allocation-free enumeration
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetAttachedStore(System.Object)">
            <summary>
            Gets the attached dependency object for the specified instance.
            </summary>
            <returns>A new DependencyObject if none exists, otherwise the existing one.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetAttachedDependencyObject(System.Object)">
            <summary>
            Provides a DependencyObject proxy for a non-dependency object for DataBinding and x:Bind purposes
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetDependencyObjectId(System.Object)">
            <summary>
            Gets the Unique ID of the specified dependency object.
            </summary>
            <param name="dependencyObject">The possible object id</param>
            <returns>A unique ID</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetParent(System.Object)">
            <summary>
            Gets the parent dependency object, if any.
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetParent(Windows.UI.Xaml.IDependencyObjectStoreProvider)">
            <summary>
            Gets the parent dependency object, if any.
            </summary>
            <param name="dependencyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.StoreTryEnableHardReferences(Windows.UI.Xaml.IDependencyObjectStoreProvider)">
            <summary>
            Enables the use of hard references for internal variables to improve the performance
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.StoreDisableHardReferences(Windows.UI.Xaml.IDependencyObjectStoreProvider)">
            <summary>
            Disables the use of hard references for internal variables to improve the performance
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.StoreGetImplicitStyle(Windows.UI.Xaml.IDependencyObjectStoreProvider,Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey@)">
            <summary>
            Gets the implicit style for the current object
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.SetParent(System.Object,System.Object)">
            <summary>
            Set the parent of the specified dependency object
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.IsAncestorOf(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Parts of the internal UWP API of DependencyObject
            Determines if a DO is a parent of another DO
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.OverrideLocalPrecedence(System.Object,Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Creates a SetValue precedence scoped override. All calls to SetValue
            on the specified instance will be set to the specified precedence.
            </summary>
            <param name="instance">The instance to override</param>
            <param name="precedence">The precedence to set</param>
            <returns>A disposable to dispose to cancel the override.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetValue(System.Object,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Gets the value for the specified dependency property on the specified instance.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <returns>The dependency property value</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetValue(System.Object,Windows.UI.Xaml.DependencyProperty,System.Nullable{Windows.UI.Xaml.DependencyPropertyValuePrecedences})">
            <summary>
            Get the value for the specified dependency property on the specific instance at the specified precedence level
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="precedence">The value precedence to fetch</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.ReadLocalValue(System.Object,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Returns the local value of a dependency property, if a local value is set.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetPrecedenceSpecificValue(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Gets the value for the specified dependency property on the specific instance at
            the specified precedence.  As opposed to GetValue, this will not fall back to the highest
            precedence if this precedence is currently unset and will return unset value.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="precedence">The value precedence at which to fetch a value</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetValueUnderPrecedence(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Get the value for the specified dependency property on the specific instance at 
            the highest precedence level under the specified one.
            E.G. If a property has a value both on the Animation, Local and Default 
            precedences, and the given precedence is Animation, then the Local value is returned.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="precedence">The value precedence under which to fetch a value</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.GetValueForEachPrecedences(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            The the value for all precedences.
            </summary>
            <remarks>
            This should only be used for diagnostics and testing purposes.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.ClearValue(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Clears the value for the specified dependency property on the specified instance.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="precedence">The value precedence to assign</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.SetValue(System.Object,Windows.UI.Xaml.DependencyProperty,System.Object)">
            <summary>
            Sets the value of the specified dependency property on the specified instance.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.SetValue(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,System.Object,System.Nullable{Windows.UI.Xaml.DependencyPropertyValuePrecedences})">
            <summary>
            Sets the value of the specified dependency property on the specified instance.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="value">The value to set</param>
            <param name="precedence">The value precedence to assign</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.SetValue(System.Object,Windows.UI.Xaml.DependencyProperty,System.Object,System.Nullable{Windows.UI.Xaml.DependencyPropertyValuePrecedences})">
            <summary>
            Sets the value of the specified dependency property on the specified instance.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="value">The value to set</param>
            <param name="precedence">The value precedence to assign</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.CoerceValue(Windows.UI.Xaml.IDependencyObjectStoreProvider,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Coerces the value of the specified dependency property.
            This is accomplished by invoking any CoerceValueCallback function specified in
            property metadata for the dependency property as it exists on the calling DependencyObject.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.RegisterDisposablePropertyChangedCallback(System.Object,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.PropertyChangedCallback)">
            <summary>
            Register for changes dependency property changes notifications.
            </summary>
            <param name="instance">The instance that owns the property</param>
            <param name="property">The property to observe</param>
            <param name="callback">The callback</param>
            <returns>A disposable that will unregister the callback when disposed.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.RegisterDisposablePropertyChangedCallback(System.Object,Windows.UI.Xaml.ExplicitPropertyChangedCallback)">
            <summary>
            Register for changes all dependency properties changes notifications for the specified instance.
            </summary>
            <param name="instance">The instance for which to observe properties changes</param>
            <param name="callback">The callback</param>
            <returns>A disposable that will unregister the callback when disposed.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.RegisterDisposableNestedPropertyChangedCallback(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.PropertyChangedCallback,Windows.UI.Xaml.DependencyProperty[][])">
            <summary>
            Registers a notification function for listening to changes to a tree of DependencyProperties relative to this DependencyObject instance.
            </summary>
            <param name="instance">The DependencyObject instance the dependency property tree starts at.</param>
            <param name="callback">A callback based on the PropertyChangedCallback delegate, which the system invokes when the value of any of the specified properties changes.</param>
            <param name="properties">The tree of dependency property to register for property-changed notification.</param>
            <returns>A disposable that will unregister the callback when disposed.</returns>
            <remarks>
            <para>Each node of the dependency property tree is represented by an array describing the path of the dependency property relative to the given dependency object instance.</para>
            <para>For example, to register for notifications to changes to the Color of a TextBlock's Foreground:</para>
            <code>var disposable = myTextBlock.RegisterDisposableNestedPropertyChangedCallback(callback, new [] { TextBlock.ForegroundProperty, SolidColorBrush.ColorProperty });</code>
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.RegisterParentChangedCallback(Windows.UI.Xaml.DependencyObject,System.Object,Windows.UI.Xaml.ParentChangedCallback)">
            <summary>
            Registers to parent changes.
            </summary>
            <param name="instance">The target dependency object</param>
            <param name="key">A key to be passed to the callback parameter.</param>
            <param name="handler">A callback to be called</param>
            <returns>A disposable that cancels the subscription.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.RegisterParentChangedCallbackStrong(Windows.UI.Xaml.DependencyObject,System.Object,Windows.UI.Xaml.ParentChangedCallback)">
            <summary>
            Registers to parent changes.
            </summary>
            <param name="instance">The target dependency object</param>
            <param name="key">A key to be passed to the callback parameter.</param>
            <param name="handler">A callback to be called</param>
            <returns>A disposable that cancels the subscription.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.IsDependencyPropertySet(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Determines if the specified dependency property is set.
            A property is set whenever a value (including null) is assigned to it.
            </summary>
            <param name="dependencyObject">The instance on which the property is attached</param>
            <param name="property">The dependency property to test</param>
            <returns>True if the dependency property is set. False otherwise.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.IsDependencyPropertyLocallySet(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            True if a value is set on the property with <see cref="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Local"/> precedence or higher, false otherwise.
            </summary>
            <param name="dependencyObject">The instance on which the property is attached</param>
            <param name="property">The dependency property to test</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectExtensions.RegisterPropertyChangedCallbackStrong(Windows.UI.Xaml.IDependencyObjectStoreProvider,Windows.UI.Xaml.ExplicitPropertyChangedCallback)">
            <summary>
            See <see cref="M:Windows.UI.Xaml.DependencyObjectStore.RegisterPropertyChangedCallbackStrong(Windows.UI.Xaml.ExplicitPropertyChangedCallback)"/> for more details
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectParentChangedEventArgs">
            <summary>
            A event arg used when the parent of a DependencyObject changes.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectStore">
            <summary>
            Defines a Dependency Object
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SetTemplatedParent(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the templated parent, with the ability to control the propagation of the templated parent.
            </summary>
            <param name="templatedParent">The parent to apply.</param>
            <param name="applyToChildren">
            Applies the templated parent to children if true. False is generally used when a control is template-able
            to avoid propagating its own templated parent to its children.
            </param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ApplyCompiledBindings">
            <summary>
            Apply load-time binding updates. Processes the x:Bind markup for the current FrameworkElement, applies load-time ElementName bindings, and updates ResourceBindings.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ApplyElementNameBindings">
            <summary>
            Apply load-time binding updates. Processes the x:Bind markup for the current FrameworkElement, applies load-time ElementName bindings, and updates ResourceBindings.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.RestoreBindings">
            <summary>
            Restores the bindings that may have been cleared by <see cref="M:Windows.UI.Xaml.DependencyObjectStore.ClearBindings"/>.
            </summary>
            <remarks>
            Calling this method will specifically restore <see cref="P:Windows.UI.Xaml.Data.Binding.ElementName"/> 
            and <see cref="P:Windows.UI.Xaml.Data.Binding.Source"/> bindings, which are not restored as part of the 
            normal <see cref="!:DataContext"/> change flow.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ClearBindings">
            <summary>
            Clears the bindings for the current binder.
            </summary>
            <remarks> 
            This method is used as an out-of-band replacement for setting the DataContext to null, which 
            in the case of two-way bindings, would send the fallback value if it has been set.
            This method may also clear <see cref="P:Windows.UI.Xaml.Data.Binding.ElementName"/> 
            and <see cref="P:Windows.UI.Xaml.Data.Binding.Source"/> bindings, which need to be restored
            using the <see cref="M:Windows.UI.Xaml.DependencyObjectStore.RestoreBindings"/> method.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SuspendBindings">
            <summary>
            Suspends the processing the <see cref="!:DataContext"/> until <see cref="M:Windows.UI.Xaml.DependencyObjectStore.ResumeBindings"/> is called.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ResumeBindings">
            <summary>
            Restores the processing the <see cref="!:DataContext"/> after <see cref="M:Windows.UI.Xaml.DependencyObjectStore.SuspendBindings"/> was called.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SetBinding(Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.Data.BindingBase)">
            <summary>
            Set a binding using a regular or attached DependencyProperty
            </summary>
            <param name="dependencyProperty">The dependency property to bind</param>
            <param name="binding">The binding expression</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.FindStandardProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Finds a DependencyProperty for the specified C# property
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SetBindingValue(System.Object,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Sets the specified source <paramref name="value"/> on <paramref name="property"/>
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SetBindingValue(Windows.UI.Xaml.DependencyPropertyDetails,System.Object)">
            <summary>
            Sets the specified source <paramref name="value"/> on <paramref name="property"/>
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SubscribeToDependencyPropertyChanged(Uno.UI.DataBinding.ManagedWeakReference,System.String,Uno.UI.DataBinding.BindingPath.IPropertyChangedValueHandler)">
            <summary>
            Subscribes to a dependency property changed handler
            </summary>
            <param name="dataContext">The DataContext that contains propertyName</param>
            <param name="propertyName">The property to observe</param>
            <param name="newValueAction">The action to execute when a new value is raised</param>
            <param name="disposeAction">The action to execute when the listener wants to dispose the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.GetOrCreateChildBindablePropertyIndex(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Gets or create an index in the <see cref="F:Windows.UI.Xaml.DependencyObjectStore._childrenBindable"/> list, to avoid enumerating <see cref="F:Windows.UI.Xaml.DependencyObjectStore._childrenBindableMap"/>.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectStore.BindingPathPropertyChangedRegistrationHandler">
            <summary>
            BindingPath Registration handler for DependencyProperty instances
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyObjectStore._objectIdCounter">
            <summary>
            A global static counter that is used to uniquely identify objects.
            This is primarily used during trace profiling.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyObjectStore._thisWeakRef">
            <summary>
            This field is used to pass a reference to itself in the case
            of DependencyProperty changed registrations. This avoids creating many
            weak references to the same object.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyObjectStore._parentUnregisteringInheritedProperties">
            <summary>
            An ancestor store is unregistering inherited properties.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyObjectStore._isSettingPersistentResourceBinding">
            <summary>
            Is a theme-bound value currently being set?
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyObjectStore._themeLastUsed">
            <summary>
            The theme last to apply theme bindings on this object and its children.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyObjectStore.Parent">
            <summary>
            Provides the parent Dependency Object of this dependency object
            </summary>
            <remarks>
            This property is an <see cref="T:System.Object"/> as the parent of a <see cref="T:Windows.UI.Xaml.DependencyObject"/> may
            not always be another <see cref="T:Windows.UI.Xaml.DependencyObject"/>, particularly in the case of the root element.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.#ctor(System.Object,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Creates a delegated dependency object instance for the specified <paramref name="originalObject"/>
            </summary>
            <param name="originalObject"></param>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyObjectStore.IsAutoPropertyInheritanceEnabled">
            <summary>
            Determines if the dependency object automatically registers for inherited
            properties such as <see cref="P:Windows.UI.Xaml.DependencyObjectStore.DataContextProperty"/> or <see cref="P:Windows.UI.Xaml.DependencyObjectStore.TemplatedParentProperty"/>.
            </summary>
            <remarks>
            This is used to avoid propagating the DataContext and TemplatedParent properties
            for types that commonly do not expose inherited propertyes, such as visual states.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyObjectStore.ObjectId">
            <summary>
            Gets a unique identifier for the current DependencyObject.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.GetValue(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Returns the current effective value of a dependency property from a DependencyObject.
            </summary>
            <param name="property">The <see cref="T:Windows.UI.Xaml.DependencyProperty" /> identifier of the property for which to retrieve the value. </param>
            <returns>Returns the current effective value.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ReadLocalValue(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Returns the local value of a dependency property, if a local value is set.
            </summary>
            <param name="property">The dependency property to get</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.GetAnimationBaseValue(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Returns the local value of a dependency property, if a local value is set.
            </summary>
            <param name="property">The dependency property to get</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.GetCurrentHighestValuePrecedence(Windows.UI.Xaml.DependencyPropertyDetails)">
            <summary>
            Determines the current highest dependency property value precedence
            </summary>
            <param name="propertyDetails">The dependency property to get</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.GetCurrentHighestValuePrecedence(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Determines the current highest dependency property value precedence
            </summary>
            <param name="property">The dependency property to get</param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.OverrideLocalPrecedence(System.Nullable{Windows.UI.Xaml.DependencyPropertyValuePrecedences})">
            <summary>
            Creates a SetValue precedence scoped override. All calls to SetValue
            on the specified instance will be set to the specified precedence.
            </summary>
            <param name="precedence">The precedence to set</param>
            <returns>A disposable to dispose to cancel the override.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SetValue(Windows.UI.Xaml.DependencyProperty,System.Object)">
            <summary>
            Sets the local value of a dependency property on a <see cref="T:Windows.UI.Xaml.DependencyObject" />.
            </summary>
            <param name="property">The identifier of the <see cref="T:Windows.UI.Xaml.DependencyProperty"/> to set.</param>
            <param name="value">The new <see cref="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Local"/> value.</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ClearValue(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Clears the value for the specified dependency property on the specified instance.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="precedence">The value precedence to assign</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ClearValue(Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Clears the value for the specified dependency property on the specified instance.
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="property">The dependency property to get</param>
            <param name="precedence">The value precedence to assign</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ApplyPrecedenceOverride(Windows.UI.Xaml.DependencyPropertyValuePrecedences@)">
            <summary>
            Applies the precedence override that has been set through <seealso cref="!:OverrideLocalPrecedence(object, DependencyPropertyValuePrecedences)" />
            Used to ambiently change the precedence specified when using standard DependencyProperty accessors, particularly when applying styles.
            </summary>
            <param name="precedence"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.ValidatePropertyOwner(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Validates that the DependencyProperty type is
            </summary>
            <param name="property">A dependency property</param>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectStore.RegisterPropertyChangedCallbackForPropertyConditionalDisposable">
            <summary>
            Specialized <see cref="T:Windows.UI.Xaml.DispatcherConditionalDisposable"/> for
            <see cref="M:Windows.UI.Xaml.DependencyObjectStore.RegisterPropertyChangedCallback(Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.PropertyChangedCallback,Windows.UI.Xaml.DependencyPropertyDetails)"/>.
            </summary>
            <remarks>
            This class is used to avoid the creation of a set of <see cref="T:System.Action"/> instances, as well as delegate invocations.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectStore.RegisterPropertyChangedCallbackConditionalDisposable">
            <summary>
            Specialized DispatcherConditionalDisposable for <see cref="M:Windows.UI.Xaml.DependencyObjectStore.RegisterPropertyChangedCallback(Windows.UI.Xaml.ExplicitPropertyChangedCallback)"/>
            </summary>
            <remarks>
            This class is used to avoid the creation of a set of <see cref="T:System.Action"/> instances, as well as delegate invocations.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.RegisterPropertyChangedCallbackStrong(Windows.UI.Xaml.ExplicitPropertyChangedCallback)">
            <summary>
            Registers an strong-referenced explicit DependencyProperty changed handler to be notified of any property change.
            </summary>
            <remarks>
            This method is meant to be used only for a DependencyObject to
            itself, to match the behavior of generic WinUI's OnPropertyChanged virtual method.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.RegisterInheritedPropertyChangedCallback(Windows.UI.Xaml.DependencyObjectStore)">
            <summary>
            Register for changes all dependency properties changes notifications for the specified instance.
            </summary>
            <param name="instance">The instance for which to observe properties changes</param>
            <param name="callback">The callback</param>
            <returns>A disposable that will unregister the callback when disposed.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.RegisterSelfParentChangedCallback(Windows.UI.Xaml.ParentChangedCallback)">
            <summary>
            Registers a parent changed callback for itself
            </summary>
            <param name="callback">A callback used to notified that the parent changed</param>
            <remarks>The <see cref="T:Windows.UI.Xaml.ParentChangedCallback"/> key parameter will always be null</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.RegisterParentChangedCallback(System.Object,Windows.UI.Xaml.ParentChangedCallback)">
            <summary>
            Registers to parent changes.
            </summary>
            <param name="key">A key to be passed to the callback parameter.</param>
            <param name="callback">A callback to be called</param>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectStore.RegisterParentChangedCallbackConditionalDisposable">
            <summary>
            Specialized DispatcherConditionalDisposable for <see cref="M:Windows.UI.Xaml.DependencyObjectStore.RegisterParentChangedCallback(System.Object,Windows.UI.Xaml.ParentChangedCallback)"/>
            </summary>
            <remarks>
            This class is used to avoid the creation of a set of <see cref="T:System.Action"/> instances, as well as delegate invocations.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.RegisterParentChangedCallbackStrong(System.Object,Windows.UI.Xaml.ParentChangedCallback)">
            <summary>
            Registers to parent changes for self
            </summary>
            <param name="key">A key to be passed to the callback parameter.</param>
            <param name="callback">A callback to be called</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.UpdateResourceBindings(Windows.UI.Xaml.Data.ResourceUpdateReason,Windows.UI.Xaml.ResourceDictionary)">
            <summary>
            Do a tree walk to find the correct values of StaticResource and ThemeResource assignations.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.InnerUpdateResourceBindings(Windows.UI.Xaml.Data.ResourceUpdateReason,Windows.UI.Xaml.ResourceDictionary[],Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.Data.ResourceBinding)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.InnerUpdateResourceBindingsUnsafe(Windows.UI.Xaml.Data.ResourceUpdateReason,Windows.UI.Xaml.ResourceDictionary[],Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.Data.ResourceBinding)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.InnerUpdateChildResourceBindings(Windows.UI.Xaml.Data.ResourceUpdateReason)">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.GetChildrenDependencyObjects">
            <summary>
            Returns all discoverable child dependency objects.
            </summary>
            <remarks>
            This method is potentially slow and should only be used where performance isn't a concern (eg updating resource bindings
            when the app theme changes).
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.GetResourceDictionaries(System.Boolean,Windows.UI.Xaml.ResourceDictionary)">
            <summary>
            Returns all ResourceDictionaries in scope using the visual tree, from nearest to furthest.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.GetImplicitStyle(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey@)">
            <summary>
            Retrieve the implicit Style for <see cref="P:Windows.UI.Xaml.DependencyObjectStore.ActualInstance"/> by walking the visual tree.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.PropagateInheritedProperties(Windows.UI.Xaml.DependencyObjectStore)">
            <summary>
            Propagate the current inheritable properties to the registered children.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.CreateWeakDelegate(Windows.UI.Xaml.PropertyChangedCallback,Windows.UI.Xaml.PropertyChangedCallback@,Windows.UI.Xaml.DependencyObjectStore.WeakReferenceReturnDisposable@)">
             <summary>
             Creates a weak delegate for the specified PropertyChangedCallback callback.
             </summary>
             <param name="callback">The callback to reference</param>
             <remarks>
             This method is used to avoid creating a hard link between the source instance
             and the stored delegate for the instance, thus avoid memory leaks.
             We also do not need to clear the delegate created because it is already associated with the instance.
            
             Note that this method is not generic to avoid the cost of trampoline resolution
             on Mono 4.2 and earlier, when Full AOT is enabled. This should be revised once this behavior is updated, or
             the cost of calling generic delegates is lowered.
             </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.CreateWeakDelegate(Windows.UI.Xaml.ExplicitPropertyChangedCallback,Windows.UI.Xaml.ExplicitPropertyChangedCallback@,Windows.UI.Xaml.DependencyObjectStore.WeakReferenceReturnDisposable@)">
             <summary>
             Creates a weak delegate for the specified ExplicitPropertyChangedCallback callback.
             </summary>
             <param name="callback">The callback to reference</param>
             <remarks>
             This method is used to avoid creating a hard link between the source instance
             and the stored delegate for the instance, thus avoid memory leaks.
             We also do not need to clear the delegate created because it is already associated with the instance.
            
             Note that this method is not generic to avoid the cost of trampoline resolution
             on Mono 4.2 and earlier, when Full AOT is enabled. This should be revised once this behavior is updated, or
             the cost of calling generic delegates is lowered.
             </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.UpdateAutoParent(Windows.UI.Xaml.DependencyObject,System.Object,System.Object)">
            <summary>
            Updates the parent of the <paramref name="newValue"/> to the
            <paramref name="actualInstanceAlias"/> and resets the parent of <paramref name="previousValue"/>.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SetValueInternal(System.Object,Windows.UI.Xaml.DependencyPropertyValuePrecedences,Windows.UI.Xaml.DependencyPropertyDetails)">
            <summary>
            Sets the value in the proper layer of the value precedence stack
            </summary>
            <param name="instance">The instance on which the property is attached</param>
            <param name="value">The value to set</param>
            <param name="precedence">The value precedence to assign</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.AreDifferent(System.Object,System.Object)">
            <summary>
            Determines if the two values are different, based on the type of the objects.
            </summary>
            <param name="previousValue">The previous value</param>
            <param name="newValue">The new value</param>
            <returns>True if different, otherwise false</returns>
            <remarks>This comparison uses value for value types, references for reference types.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.CheckThemeBindings(System.Object,System.Object)">
            <summary>
            If we're being unloaded, save the current theme. If we're being loaded, check if application theme has changed since theme
            bindings were last applied, and update if needed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.SetLastUsedTheme(System.Nullable{Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey})">
            <summary>
            Set theme used when applying theme-bound values.
            </summary>
            <param name="resourceKey">Key for the theme used</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.TryEnableHardReferences">
            <summary>
            Enables hard references for internal fields for faster access
            </summary>
            <remarks>
            Calling this method may cause memory leaks and must be used along with <see cref="M:Windows.UI.Xaml.DependencyObjectStore.DisableHardReferences"/>.
            The use case is for FrameworkElement instances that can be Loaded and Unloaded, and for which the Unloaded
            state is ensured to happen in such a way that memory leaks cannot happen.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyObjectStore.DisableHardReferences">
            <summary>
            Disables hard references for internal fields created by <see cref="!:EnableHardReferences"/>
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyObjectStore.AreHardReferencesEnabled">
            <summary>
            Determines if <see cref="!:EnableHardReferences"/> has been called
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyObjectStore.WeakReferenceValueComparer">
            <summary>
            A comparer that compares references of the target values.|
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ExplicitPropertyChangedCallback">
            <summary>
            Defines a delegate to be called when a property value changes.
            </summary>
            <param name="property">The property being changed</param>
            <param name="args">The arguments for the changes of the property</param>
        </member>
        <member name="T:Windows.UI.Xaml.ParentChangedCallback">
            <summary>
            Defines a delegate to be called when the parent of a <see cref="T:Windows.UI.Xaml.DependencyObject"/> changes.
            </summary>
            <param name="instance">The DependencyObject instance being updated</param>
            <param name="key">An optional key passed as a parameter to <see cref="!:DependencyObject.RegisterParentChangedCallback(object, ParentChangedCallback)"/>.</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Windows.UI.Xaml.PropertyCacheEntry">
            <summary>
            An optimized cache entry for the DependencyProperty.GetProperty method.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyPropertyCallbackManager">
            <summary>
            DependencyProperty Callback Manager
            </summary>
            <remarks>
            This class is built are the fact that creating arrays is costly, 
            so the list of handlers is kept alive for as long as possible.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyCallbackManager.RegisterCallback(Windows.UI.Xaml.PropertyChangedCallback)">
            <summary>
            Registers a callback to be called by <see cref="M:Windows.UI.Xaml.DependencyPropertyCallbackManager.RaisePropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)"/>
            </summary>
            <param name="callback">A property changed callback</param>
            <returns>A disposable to remove the callback from the manager</returns>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyPropertyComparer">
            <summary>
            A dependency property comparer that assumes that instances are unique and that the hash code will never change.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyComparer.Default">
            <summary>
            Gets the default instance of DependencyPropertyComparer. This class has no state and cannot be created.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDescriptor.Parse(System.String)">
            <summary>
            Parses an attached PropertyPath in the form of "(clrnamespace:Type.Property)"
            </summary>
            <param name="propertyPath">The property path</param>
            <returns></returns>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyPropertyDetails">
            <summary>
            Represents the stack of values used by the Dependency Property Value Precedence system
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetails.#ctor(Windows.UI.Xaml.DependencyProperty,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="defaultValue">The default value of the Dependency Property</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetails.SetValue(System.Object,Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Sets the value at the given level in the stack
            </summary>
            <param name="value">The value to set</param>
            <param name="precedence">The precedence level to set the value at</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetails.GetValue">
            <summary>
            Gets the value at the current highest precedence level
            </summary>
            <returns>The value at the current highest precedence level</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetails.GetValue(Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Gets the value at a given precedence level
            </summary>
            <param name="precedence">The precedence level to get the value at</param>
            <returns>The value at a given precedence level</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetails.GetValueUnderPrecedence(Windows.UI.Xaml.DependencyPropertyValuePrecedences)">
            <summary>
            Gets the value at the highest precedence level under the specified one
            E.G. If a property has a value both on the Animation, Local and Default
            precedences, and the given precedence is Animation, then the Local value is returned.
            </summary>
            <param name="precedence">The value precedence under which to fetch a value</param>
            <returns>The value at the highest precedence level under the specified one</returns>
        </member>
        <member name="P:Windows.UI.Xaml.DependencyPropertyDetails.CurrentHighestValuePrecedence">
            <summary>
            Gets the current highest value precedence level
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetails.Validate(System.Object)">
            <summary>
            Validate the value to prevent setting null to non-nullable dependency properties.
            </summary>
            <param name="value">value to validate</param>
            <returns>The value if valid, otherwise the dependency property's default value.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetails.ValidateNoWrap(System.Object)">
            <summary>
            Validate the value to prevent setting null to non-nullable dependency properties.
            </summary>
            <param name="value">value to validate</param>
            <returns>The value if valid, otherwise the dependency property's default value.</returns>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyDetails.Flags.WeakStorage">
            <summary>
            This dependency property uses weak storage for its values
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyDetails.Flags.DefaultValueSet">
            <summary>
            Determines if the default value has been populated
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DependencyPropertyDetailsCollection">
            <summary>
            A <see cref="T:Windows.UI.Xaml.DependencyPropertyDetails"/> collection
            </summary>
             <summary>
             A <see cref="T:Windows.UI.Xaml.DependencyPropertyDetails"/> collection
             </summary>
             <remarks>
             This implementation uses an O(1) lookup for the dependency properties of a DependencyObject. This assumes that
             <see cref="M:Windows.UI.Xaml.DependencyProperty.GetPropertiesForType(System.Type)"/> returns an ordered list, and creates an array based on
             the min and max UniqueIDs found in the object's properties.
            
             This approach can cost more in storage for some types, if the array is mostly empty.
             </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.ApplyTemplatedParent(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Applies the specified templated parent on the current <see cref="T:Windows.UI.Xaml.Data.TemplateBinding"/> instances
            </summary>
            <param name="templatedParent"></param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.ApplyDataContext(System.Object)">
            <summary>
            Applies the specified datacontext on the current <see cref="T:Windows.UI.Xaml.Data.Binding"/> instances
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.ApplyCompiledBindings">
            <summary>
            Applies the <see cref="T:Windows.UI.Xaml.Data.Binding"/> instances which have a <see cref="P:Windows.UI.Xaml.Data.Binding.CompiledSource"/> set.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.ApplyElementNameBindings">
            <summary>
            Applies the <see cref="T:Windows.UI.Xaml.Data.Binding"/> instances which contain an ElementName property
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.SuspendBindings">
            <summary>
            Suspends the <see cref="T:Windows.UI.Xaml.Data.Binding"/> instances from reacting to DataContext changes
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.ResumeBindings">
            <summary>
            Resumes the <see cref="T:Windows.UI.Xaml.Data.Binding"/> instances for reacting to DataContext changes
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.FindDataContextBinding">
            <summary>
            Gets the DataContext <see cref="T:Windows.UI.Xaml.Data.Binding"/> instance, if any
            </summary>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.SetBinding(Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.Data.Binding,Uno.UI.DataBinding.ManagedWeakReference)">
            <summary>
            Sets the specified <paramref name="binding"/> on the <paramref name="target"/> instance.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.SetSourceValue(Windows.UI.Xaml.DependencyProperty,System.Object)">
            <summary>
            Sets the source value for the the specified <paramref name="property"/>
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.SetSourceValue(Windows.UI.Xaml.DependencyPropertyDetails,System.Object)">
            <summary>
            Sets the source value for the the specified <paramref name="details"/> 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.GetBindingExpression(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Gets the last known defined <see cref="T:Windows.UI.Xaml.Data.BindingExpression"/> for the specified <paramref name="dependencyProperty"/>
            </summary>
            <param name="dependencyProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.#ctor(System.Type,Uno.UI.DataBinding.ManagedWeakReference,Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Creates an instance using the specified DependencyObject <see cref="T:System.Type"/>
            </summary>
            <param name="ownerType">The owner type</param>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.GetPropertyDetails(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Gets the <see cref="T:Windows.UI.Xaml.DependencyPropertyDetails"/> for a specific <see cref="T:Windows.UI.Xaml.DependencyProperty"/>
            </summary>
            <param name="property">A dependency property</param>
            <returns>The details of the property</returns>
        </member>
        <member name="M:Windows.UI.Xaml.DependencyPropertyDetailsCollection.FindPropertyDetails(Windows.UI.Xaml.DependencyProperty)">
            <summary>
            Finds the <see cref="T:Windows.UI.Xaml.DependencyPropertyDetails"/> for a specific <see cref="T:Windows.UI.Xaml.DependencyProperty"/> if it exists.
            </summary>
            <param name="property">A dependency property</param>
            <returns>The details of the property if it exists, otherwise null.</returns>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Coercion">
            <summary>
            Defined by the value returned by PropertyMetadata.CoerceValueCallback (only if it differs from the input/base value)
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Animations">
            <summary>
            Defined by animation storyboards
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Local">
            <summary>
            Values set directly on the Dependency Object
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.TemplatedParent">
            <summary>
            Values inherited from the templated parent
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.ExplicitStyle">
            <summary>
            Defined when setting a style from the style property
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.ImplicitStyle">
            <summary>
            Values defined by an implicitly defined style
            </summary>
            <remarks>On Uno, this is actually used for values set by the default style, to allow for them to correctly take precedence over inherited values.</remarks>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.Inheritance">
            <summary>
            Defined by the inheritance of a FrameworkElement property of the same name
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.DefaultStyle">
            <summary>
            Defined by the default style from Generic.xaml
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.DependencyPropertyValuePrecedences.DefaultValue">
            <summary>
            Defined on the dependency property metadata
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.DispatcherConditionalDisposable">
             <summary>
             A <see cref="T:Uno.Disposables.ConditionalDisposable"/> class that executes the dispose action on the Dispatcher.
             </summary>
             <remarks>
             This class is generally used to ensure that a delegate instance can be tied to its
             target property instance, while being a weak reference.
            
             This enables scenarios such as passing <see cref="M:Windows.UI.Xaml.DependencyObject.RegisterPropertyChangedCallback(Windows.UI.Xaml.DependencyProperty,Windows.UI.Xaml.DependencyPropertyChangedCallback)"/> a
             capturing lambda to be passed as a callback, and not have to unintended memory leaks
             on either the sender or receiver of the callback.
             </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.DragDropManager.AreConcurrentOperationsEnabled">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.DragDropManager.BeginDragAndDrop(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo,Windows.ApplicationModel.DataTransfer.DragDrop.Core.ICoreDropOperationTarget)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.DragDropManager.ProcessMoved(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked each time a pointer involved in a drag operation is moved,
            no matter if the drag operation has been initiated from this app or from an external app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.DragDropManager.ProcessDropped(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked when pointer involved in a drag operation is released,
            no matter if the drag operation has been initiated from this app or from an external app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.DragDropManager.ProcessAborted(Windows.ApplicationModel.DataTransfer.DragDrop.Core.IDragEventSource)">
            <summary>
            This method is expected to be invoked when pointer involved in a drag operation
            is lost for operation initiated by the current app,
            or left the window (a.k.a. the "virtual pointer" is lost) for operation initiated by an other app.
            </summary>
            <returns>
            The last accepted operation.
            Be aware that due to the async processing of dragging in UWP, this might not be the up to date.
            </returns>
        </member>
        <member name="M:Windows.UI.Xaml.DragOperation.Abort">
            <summary>
            This is used by the manager to abort a pending DnD for any consideration without an event args for the given pointer
            It ** MUST ** be invoked on the UI thread.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DragOperation.RaiseRecoverableLeave(System.Threading.CancellationToken)">
            <summary>
            This is only for internally initiated drag operation for which we capture the pointer
            and which **may come back over the window**.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DragRoot.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DragView.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.DragView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.DropUITarget.EnterAsync(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo,Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.DropUITarget.OverAsync(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo,Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragUIOverride)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.DropUITarget.LeaveAsync(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.DropUITarget.DropAsync(Windows.ApplicationModel.DataTransfer.DragDrop.Core.CoreDragInfo)">
            <inheritdoc />
        </member>
        <member name="T:Windows.UI.Xaml.ElementSoundKind">
            <summary>
            Defines constants that specify the sound played by the ElementSoundPlayer.Play method.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundKind.Focus">
            <summary>
            The sound to play when an element gets focus.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundKind.Invoke">
            <summary>
            The sound to play when an element is invoked.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundKind.Show">
            <summary>
            The sound to play when a flyout, dialog, or command bar is opened.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundKind.Hide">
            <summary>
            The sound to play when a flyout, dialog, or command bar is closed.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundKind.MovePrevious">
            <summary>
            The sound to play when a user navigates to the previous panel or view within a page.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundKind.MoveNext">
            <summary>
            The sound to play when a user navigates to the next panel or view within a page.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundKind.GoBack">
            <summary>
            The sound to play when a user navigates back.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ElementSoundMode">
            <summary>
            Defines constants that specify a control's preference for whether sounds are played.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundMode.Default">
            <summary>
            Sound is played based on the ElementSoundPlayer.State setting.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundMode.FocusOnly">
            <summary>
            Sound is played only when focus on the control changes.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundMode.Off">
            <summary>
            No sounds are played.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ElementSoundPlayerState">
            <summary>
            Defines constants that specify whether XAML controls play sounds.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundPlayerState.Auto">
            <summary>
            The platform determines whether or not sounds are played.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundPlayerState.Off">
            <summary>
            Sounds are never played on any platform.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSoundPlayerState.On">
            <summary>
            Sounds are played on all platforms.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ElementSpatialAudioMode">
            <summary>
            Defines constants that indicate whether spatial sound is on, off, or handled automatically.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSpatialAudioMode.Auto">
            <summary>
            Spatial sound is turned on or off by the system.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSpatialAudioMode.Off">
            <summary>
            Spatial sound is off.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ElementSpatialAudioMode.On">
            <summary>
            Spatial sound is on.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ElementStub">
            <summary>
            A support element for the DeferLoadStrategy Lazy Xaml directive.
            </summary>
            <remarks>This control is added in the visual tree, in place of the original content.</remarks>
        </member>
        <member name="F:Windows.UI.Xaml.ElementStub._isMaterializing">
            <summary>
            Ensures that materialization handles reentrancy properly.
            This scenario can happen on android specifically because the Parent
            property is not immediately set to null once a view is removed from
            the tree.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ElementStub.MaterializationChangedHandler">
            <summary>
            A delegate used to raise materialization changes in <see cref="E:Windows.UI.Xaml.ElementStub.MaterializationChanged"/>
            </summary>
            <param name="sender">The instance being changed</param>
        </member>
        <member name="E:Windows.UI.Xaml.ElementStub.MaterializationChanged">
            <summary>
            An event raised when the materialized object of the <see cref="T:Windows.UI.Xaml.ElementStub"/> has changed.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ElementStub.MaterializingChangedHandler">
            <summary>
            A delegate used to signal that the content is being materialized in <see cref="E:Windows.UI.Xaml.ElementStub.Materializing"/>
            </summary>
            <param name="sender">The instance being changed</param>
        </member>
        <member name="E:Windows.UI.Xaml.ElementStub.Materializing">
            <summary>
            An event raised when the materialized object of the <see cref="T:Windows.UI.Xaml.ElementStub"/> has changed.
            </summary>
            <remarks>
            This event is only raised when the ElementStub is materializing its target (not
            dematerializing), and is raised after the element stub has been removed from the
            tree, but before the new target is added to the tree (so the x:Bind on loaded event
            can be raised properly).
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.ElementStub.IsMaterialized">
            <summary>
            Determines if the current ElementStub has been materialized to its target View.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ElementStub.ContentBuilder">
            <summary>
            A function that will create the actual view.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ElementStub.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.EnteredBackgroundEventHandler">
            <summary>
            Represents the method that will handle the Application.EnteredBackground event.
            </summary>
            <param name="sender">The object where the handler is attached.</param>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="T:Windows.UI.Xaml.FocusState">
            <summary>
            Describes how an element obtained focus.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.FocusVisualKind">
            <summary>
            Specifies the visual feedback used to indicate the UI element with focus when navigating with a keyboard or gamepad.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FocusVisualKind.DottedLine">
            <summary>
            A dotted line rectangle. Also known as "marching ants".
            </summary>
            <remarks>
            The default on Windows 10 November Update
            (Windows 10 version 1511 - build number 10.0.10586, codenamed "Threshold 2")
            and earlier.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.FocusVisualKind.HighVisibility">
            <summary>
            A solid line rectangle composed of an inner and outer rectangle of contrasting colors.
            </summary>
            <remarks>
            The default on Windows 10 Anniversary Update
            (Windows 10 version 1607 - build number 10.0.14393, codenamed "Redstone 1")
            and earlier.
            DottedLine visual is difficult to see in 10-foot experience.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.FocusVisualKind.Reveal">
            <summary>
            A solid line rectangle, surrounded by a glowing light effect to simulate depth.
            </summary>
            <remarks>
            Opt-in feature for Xbox with Windows 10 version 1803 (codenamed "Redstone 4") and later.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.ViewportInfo.Reference">
            <summary>
            The element used as reference coordinate space to express the values.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ViewportInfo.Effective">
            <summary>
            The public effective viewport
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.ViewportInfo.Clip">
            <summary>
            The cumulative clipping applied by all parents scroll ports.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ViewportInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.ViewportInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.ViewportInfo.Equals(Windows.UI.Xaml.ViewportInfo)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.ViewportInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkElementExtensions.BindToEquivalentProperty``1(``0,System.Object,System.String,Windows.UI.Xaml.Data.BindingMode)">
            <summary>
            Bind property on <param name="element"/> to a property on <param name="source"/> of the same name.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.FrameworkPropertyMetadata">
            <summary>
            Defines the metadata to use for a dependency property for framework elements
            </summary>
            <remarks>
            This class in not _UWP compatible_ and are used to make DependencyProperties with
            special abilities (like _inheritable properties_).
            It should be used only to create controls like those in UWP. You should not use
            this class in application code or they won't compile and work properly on UWP.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkPropertyMetadata.IsLogicalChild">
            <summary>
            Temporary flag to opt-in for automatic parent propagation.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkPropertyMetadata.HasWeakStorage">
            <summary>
            Determines if the storage of this property's value should use a <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> backing
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.Inherits">
            <summary>
            Specifies that the property will be inherited for children controls
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.ValueInheritsDataContext">
            <summary>
            Specifies that this property's value or values will inherit the DataContext of its or their parent.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.AutoConvert">
            <summary>
            Forces the conversion of a set value to the type of a <see cref="T:Windows.UI.Xaml.DependencyProperty"/>
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.ValueDoesNotInheritDataContext">
            <summary>
            Prevents this property's value or values from inheriting the DataContext of its or their parent.
            </summary>
            <remarks>
            This is useful for framework properties of type <see cref="T:Windows.UI.Xaml.DependencyObject"/> for which ValueInheritsDataContext is enabled by default
            (cf. <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.Default"/>).
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.WeakStorage">
            <summary>
            Determines if the storage of this property's value should use a <see cref="T:Uno.UI.DataBinding.ManagedWeakReference"/> backing
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.LogicalChild">
            <summary>
            Automatic opt-in for <see cref="M:Windows.UI.Xaml.DependencyObjectExtensions.SetParent(System.Object,System.Object)"/> call.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.AffectsArrange">
            <summary>
            Updates to this property affect arrange on <see cref="T:Windows.UI.Xaml.FrameworkElement"/> <see cref="T:Windows.UI.Xaml.DependencyObject"/> instances.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.AffectsMeasure">
            <summary>
            Updates to this property affect measure on <see cref="T:Windows.UI.Xaml.FrameworkElement"/> <see cref="T:Windows.UI.Xaml.DependencyObject"/> instances.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.AffectsRender">
            <summary>
            Updates to this property affect render on <see cref="T:Windows.UI.Xaml.FrameworkElement"/> <see cref="T:Windows.UI.Xaml.DependencyObject"/> instances.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.Default">
            <summary>
            The default options set when creating a <see cref="T:Windows.UI.Xaml.FrameworkPropertyMetadata"/>.
            </summary>
            <remarks>
            By default all DP declared by the framework will inherit the DataContext while DP declared by application won't.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasInherits(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the specified options have the <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.Inherits"/> set.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasValueInheritsDataContext(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the specified options have the <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.ValueInheritsDataContext"/> set.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasAutoConvert(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the conversion of a set value to the type of a <see cref="T:Windows.UI.Xaml.DependencyProperty"/> should be performed.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasValueDoesNotInheritDataContext(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the specified options have the <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.ValueDoesNotInheritDataContext"/> set.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasAffectsRender(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the specified options have <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.AffectsRender"/> set.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasAffectsArrange(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the specified options have <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.AffectsArrange"/> set.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasAffectsMeasure(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the specified options have <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.AffectsMeasure"/> set.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasLogicalChild(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the specified options have <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.LogicalChild"/> set.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.HasWeakStorage(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Determines if the specified options have <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.WeakStorage"/> set.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkPropertyMetadataOptionsExtensions.WithDefault(Windows.UI.Xaml.FrameworkPropertyMetadataOptions)">
            <summary>
            Defines the default flags for a FrameworkPropertyMetadata if not explicitly opt-out (cf. <see cref="F:Windows.UI.Xaml.FrameworkPropertyMetadataOptions.Default"/>).
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.FrameworkTemplateBuilder">
            <summary>
            Defines a builder to be used in <see cref="T:Windows.UI.Xaml.FrameworkTemplate"/>
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.FrameworkTemplatePool">
            <summary>
            Provides an instance pool for FrameworkTemplates, when <see cref="M:Windows.UI.Xaml.FrameworkTemplate.LoadContentCached"/> is called.
            </summary>
            <remarks>
            The pooling is particularly important on iOS and Android where the memory management is less than ideal because of the
            pinning of native instances, and the inability of the GC to determine that two instances refer to each other via a 
            native storage (Subviews for instance), and reclaim their memory properly.
            
            The pooling is also important because creating a control is particularly expensive on Android and iOS.
            
            This Xaml implementation relies on unloaded controls to release their templated parent by setting it to null, which always resets
            content template of a ContentControl, as well as the template of a Control. This forces recycled controls to re-create their
            templates even if it was previously the same. This can make lists particularly jittery.
            This class allows for templates to be reused, based on the fact that controls created via a FrameworkTemplate that lose their
            DependencyObject.Parent value are considered orhpans. Those instances can then later on be reused.
            
            This behavior is not following windows' implementation, as this requires a control to be stateless. This is pretty easy to do when controls
            are strictly databound, but not if the control is using stateful code-behind. This is why this behavior can be disabled via <see cref="P:Windows.UI.Xaml.FrameworkTemplatePool.IsPoolingEnabled"/>
            if the pooling interferes with the normal behavior of a control.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkTemplatePool.TimeToLive">
            <summary>
            Determines the duration for which a pooled template stays alive.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkTemplatePool.IsPoolingEnabled">
            <summary>
            Determines if the pooling is enabled. If false, all requested instances are new.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.FrameworkTemplatePool.HighMemoryThreshold">
            <summary>
            Defines the ratio of memory usage at which the pools starts to stop pooling elligible views.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplatePool.SetPlatformProvider(Windows.UI.Xaml.IFrameworkTemplatePoolPlatformProvider)">
            <summary>
            Registers a custom <see cref="T:Windows.UI.Xaml.IFrameworkTemplatePoolPlatformProvider"/>
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplatePool.Scavenge">
            <summary>
            Release all templates that are currently held by the pool.
            </summary>
            <remarks>The pool will periodically release templates that haven't been reused within the span of <see cref="P:Windows.UI.Xaml.FrameworkTemplatePool.TimeToLive"/>, so
            normally you shouldn't need to call this method. It may be useful in advanced memory management scenarios.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.FrameworkTemplatePool.ReleaseTemplateRoot(Android.Views.View,Windows.UI.Xaml.FrameworkTemplate)">
            <summary>
            Manually return an unused template root to the pool.
            </summary>
            <remarks>
            We disable cleaning the elements inside the template root because it may cause problems. It's safe to assume the template root
            is still 'clean' because it was never made available to application code.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.HitTestability.Collapsed">
            <summary>
            The element and its children can't be targeted by hit-testing.
            </summary>
            <remarks>
            This occurs when IsHitTestVisible="False", IsEnabled="False", or Visibility="Collapsed".
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.HitTestability.Invisible">
            <summary>
            The element can't be targeted by hit-testing, but it's children might be.
            </summary>
            <remarks>
            This usually occurs if an element doesn't have a Background/Fill.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.HitTestability.Visible">
            <summary>
            The element can be targeted by hit-testing.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.HorizontalAlignment">
            <summary>
            Indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.HorizontalAlignment.Left">
            <summary>
            An element aligned to the left of the layout slot for the parent element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.HorizontalAlignment.Center">
            <summary>
            An element aligned to the center of the layout slot for the parent element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.HorizontalAlignment.Right">
            <summary>
            An element aligned to the right of the layout slot for the parent element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.HorizontalAlignment.Stretch">
            <summary>
            An element stretched to fill the entire layout slot of the parent element.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.IAdditionalChildrenProvider">
            <summary>
            Implemented by types that have <see cref="T:Windows.UI.Xaml.DependencyObject"/> children that are not reachable via a <see cref="T:Windows.UI.Xaml.DependencyProperty"/>, for instance
            to access theme resource bindings needing update when the app theme changes.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.IAdditionalChildrenProvider.GetAdditionalChildObjects">
            <summary>
            Return additional <see cref="T:Windows.UI.Xaml.DependencyObject"/> children that are not reachable via a <see cref="T:Windows.UI.Xaml.DependencyProperty"/>.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ICustomClippingElement.AllowClippingToLayoutSlot">
            <summary>
            Define if the control allows to be clipped to its bounds
            when the size is constrained.
            </summary>
            <remarks>
            This is called during the Arrange phase, can be dynamic.
            </remarks>
        </member>
        <member name="P:Windows.UI.Xaml.ICustomClippingElement.ForceClippingToLayoutSlot">
            <summary>
            Define if the control is forcing clipping to its bounds.
            </summary>
            <remarks>
            This is called during the Arrange phase, can be dynamic.
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.IDependencyObjectInternal">
            <summary>
            Internal implemenation for <see cref="T:Windows.UI.Xaml.DependencyObject"/>
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.IDependencyObjectInternal.OnPropertyChanged2(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked on every <see cref="T:Windows.UI.Xaml.DependencyProperty"/> changes, automatically generated for every <see cref="T:Windows.UI.Xaml.DependencyObject"/> implementing type.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Windows.UI.Xaml.IDependencyObjectParse">
            <summary>
            Contract for DependencyObjects which react to initialization and completion of Xaml parsing.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkElementHelper.Initialize(Windows.UI.Xaml.IFrameworkElement)">
            <summary>
            Initializes the standard properties for this framework element.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkElementHelper.GetTemplateChild(Windows.UI.Xaml.IFrameworkElement,System.String)">
            <summary>
            Finds a realised element in the control template
            </summary>
            <param name="e">The framework element instance</param>
            <param name="name">The name of the template part</param>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkElementHelper.LocalMin(System.Double,System.Double)">
            <summary>
            Gets the min value being left or right.
            </summary>
            <remarks>
            This method kept here for readbility
            of <see cref="M:Windows.UI.Xaml.IFrameworkElementHelper.SizeThatFits(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size)"/> the keep its
            fluent aspect.
            It also does not use the generic extension that may create an very
            short lived <see cref="T:System.IConvertible"/> instance.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkElementHelper.LocalMax(System.Double,System.Double)">
            <summary>
            Gets the max value being left or right.
            </summary>
            <remarks>
            This method kept here for readability
            of <see cref="M:Windows.UI.Xaml.IFrameworkElementHelper.SizeThatFits(Windows.UI.Xaml.IFrameworkElement,Windows.Foundation.Size)"/> the keep its
            fluent aspect.
            It also does not use the generic extension that may create an very
            short lived <see cref="T:System.IConvertible"/> instance.
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkElementHelper.OnMeasureOverride``1(``0)">
            <summary>
            Applies the framework element constraints like the size and max size, using an already measured view.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkElementHelper.OnMeasureOverride``1(``0,Windows.Foundation.Size)">
            <summary>
            Applies the framework element constraints like the size and max size, using the provided measured size.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkElementHelper.IsWidthConstrainedSimple(Windows.UI.Xaml.IFrameworkElement)">
            <summary>
            Base constraint reasoning for simple containers that always respect the stretch of their children.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkElementHelper.IsHeightConstrainedSimple(Windows.UI.Xaml.IFrameworkElement)">
            <summary>
            Base constraint reasoning for simple containers that always respect the stretch of their children.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.IFrameworkElementInternal.HasLayouter">
            <summary>
            True if this <see cref="T:Windows.UI.Xaml.IFrameworkElement"/> implementation has a <see cref="T:Windows.UI.Xaml.Controls.Layouter"/> associated with it.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.IFrameworkTemplatePoolAware">
            <summary>
            An element that should be notified when the template in which it exists is being reused.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.IFrameworkTemplatePoolAware.OnTemplateRecycled">
            <summary>
            A call in which to execute any logic that should take place when template is recycled.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ILayoutConstraints">
            <summary>
            An element that can participate in optimizations for propagating layout requests. 
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ILayoutConstraints.IsWidthConstrained(Android.Views.View)">
            <summary>
            Is the width of this element constrained by its Width and/or HorizontalAlignment properties and those of its ancestors.
            </summary>
            <param name="requester">The child view requesting constraint information.</param>
            <returns>True if the width is constrained, false if it may change when descendant elements change.</returns>
        </member>
        <member name="M:Windows.UI.Xaml.ILayoutConstraints.IsHeightConstrained(Android.Views.View)">
            <summary>
            Is the height of this element constrained by its Height and/or VerticalAlignment properties and those of its ancestors.
            </summary>
            <param name="requester">The child view requesting constraint information.</param>
            <returns>True if the width is constrained, false if it may change when descendant elements change.</returns>
        </member>
        <member name="T:Windows.UI.Xaml.ILayoutOptOut">
            <summary>
            Uno-specific interface that allows controls to specify that particular properties should be ignored by the shared layouting, eg for
            compatibility when a native template is used.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.IShareableDependencyObject">
            <summary>
            A <see cref="T:Windows.UI.Xaml.DependencyObject"/> that supports association with multiple 'owners'.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.IThemeChangeAware">
            <summary>
            Implemented by <see cref="T:Windows.UI.Xaml.DependencyObject"/> types that need to react when the visual theme changes.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.IUIElement.LastAvailableSize">
            <summary>
            The 'availableSize' provided for the last Measure
            </summary>
            <remarks>This is the backing flied for <see cref="M:Windows.UI.Xaml.Controls.Primitives.LayoutInformation.GetAvailableSize(Windows.UI.Xaml.UIElement)"/></remarks>
        </member>
        <member name="P:Windows.UI.Xaml.IUIElement.DesiredSize">
            <summary>
            The 'return' size produced by the last Measure
            </summary>
            <remarks>This is the backing flied for the **internal** <see cref="M:Windows.UI.Xaml.Controls.Primitives.LayoutInformation.GetDesiredSize(Windows.UI.Xaml.UIElement)"/></remarks>
        </member>
        <member name="P:Windows.UI.Xaml.IUIElement.LayoutSlot">
            <summary>
            The 'finalSize' provided for the last Arrange
            </summary>
            <remarks>This is the backing field for <see cref="M:Windows.UI.Xaml.Controls.Primitives.LayoutInformation.GetLayoutSlot(Windows.UI.Xaml.FrameworkElement)"/></remarks>
        </member>
        <member name="T:Windows.UI.Xaml.IXUidProvider">
            <summary>
            Internal interface for x:Uid enabled elements. Used through <see cref="M:Uno.UI.Helpers.MarkupHelper.SetXUid(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.LeavingBackgroundEventHandler">
            <summary>
            Represents the method that will handle the Application.LeavingBackground event.
            </summary>
            <param name="sender">The object where the handler is attached.</param>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="F:Windows.UI.Xaml.LineStackingStrategy.BaselineToBaseline">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.NameScope.SetNameScope(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.Markup.INameScope)">
            <summary>
            Provides the attached property set accessor for the NameScope attached property.
            </summary>
            <param name="dependencyObject">Object to change XAML namescope for.</param>
            <param name="value">The new XAML namescope, using an interface cast.</param>
        </member>
        <member name="M:Windows.UI.Xaml.NameScope.GetNameScope(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Provides the attached property get accessor for the NameScope attached property.
            </summary>
            <param name="dependencyObject">The object to get the XAML namescope from.</param>
            <returns>A XAML namescope, as an INameScope instance.</returns>
        </member>
        <member name="P:Windows.UI.Xaml.NameScope.NameScopeProperty">
            <summary>
            Identifies the NameScope attached property.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.NameScope.FindInNamescopes(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Search for a named element in all available namescopes, preferring scopes that are 'closest' in the hierarchy.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.NativeApplication.#ctor(Windows.UI.Xaml.NativeApplication.AppBuilder,System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Creates an android Application instance
            </summary>
            <param name="appBuilder">A <see cref="T:Windows.UI.Xaml.NativeApplication.AppBuilder"/> delegate that provides an <see cref="T:Windows.UI.Xaml.Application"/> instance.</param>
        </member>
        <member name="M:Windows.UI.Xaml.NativeApplication.GetTypeAssemblyFullName(System.String)">
            <summary>
            This method is used by UI Test frameworks to get 
            the Xamarin compatible name for a control in Java.
            </summary>
            <param name="type">A type full name</param>
            <returns>The assembly that contains the specified type</returns>
        </member>
        <member name="T:Windows.UI.Xaml.PagePool">
            <summary>
            Provides an instance pool for <see cref="T:Windows.UI.Xaml.Controls.Page"/>s. Pooling is enabled when <see cref="P:Uno.UI.FeatureConfiguration.Page.IsPoolingEnabled"/> is set to true.
            </summary>
            <remarks>Enabling page pooling improves performance when using <see cref="T:Windows.UI.Xaml.Controls.Frame"/> navigation.</remarks>
        </member>
        <member name="P:Windows.UI.Xaml.PagePool.TimeToLive">
            <summary>
            Determines the duration for which a pooled page stays alive.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.PagePool.IsPoolingEnabled">
            <summary>
            Determines if the pooling is enabled. If false, all requested instances are new.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.PropertyChangedCallback">
            <summary>
            Defines a delegate to be called when a property value changes.
            </summary>
            <param name="dependencyObject">The owner of the dependency property</param>
            <param name="args">The arguments for the changes of the property</param>
        </member>
        <member name="T:Windows.UI.Xaml.CoerceValueCallback">
            <summary>
            Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.
            </summary>
            <param name="dependencyObject">The object that the property exists on. When the callback is invoked, the property system will pass this value.</param>
            <param name="args">The new value of the property, prior to any coercion attempt.</param>
        </member>
        <member name="T:Windows.UI.Xaml.BackingFieldUpdateCallback">
            <summary>
            Provides a delegate for a method used to update backing fields of a dependency property
            </summary>
            <param name="dependencyObject">The object that the property exists on.</param>
            <param name="args">The new value of the property</param>
        </member>
        <member name="F:Windows.UI.Xaml.PropertyMetadataDictionary._table">
            <summary>
            This implementation of PropertyMetadataDictionary uses HashTable because it's generally faster than
            Dictionary`ref/ref. 
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ResourceHelper.Registry">
            <summary>
            Provides a global registry, similar to the Application.Current.Resources in WinRT.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ResourceHelper.ResourcesService">
            <summary>
            Provides a global resource service for localization in Android and iOS
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceHelper.FindResource(System.String)">
            <summary>
            Gets a global resource.
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceHelper.FindResourceString(System.String)">
            <summary>
            Use to get resource for XamlFileGenerator in Android and iOS
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Windows.UI.Xaml.ResourceHelper.FindConverter(System.String)">
            <summary>
            Tries to find a Converter using its static resource name.
            </summary>
            <param name="converterName"></param>
            <returns>The converter, or a NullConverter instance.</returns>
        </member>
        <member name="T:Windows.UI.Xaml.Setter`1">
            <summary>
            Defines a property assignation in a style or story board.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Windows.UI.Xaml.Setter`1.#ctor(System.String,System.Action{`0})">
            <summary>
            Creates a setter using the specified action to set a named property.
            </summary>
            <param name="property">The name of the property on the target object.</param>
            <param name="action"></param>
        </member>
        <member name="P:Windows.UI.Xaml.Setter`1.Property">
            <summary>
            The name of the string to set
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.Setter`1.Action">
            <summary>
            The action to be executed when the setter is applied
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.ICSharpPropertySetter">
            <summary>
            A marking interface used to determine if a <see cref="T:Windows.UI.Xaml.SetterBase"/> instance is a <see cref="T:Windows.UI.Xaml.Setter`1"/>. 
            This is used for binary backward compatitility
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SolidColorBrushHelper.FromARGB(System.String)">
            <summary>
            Takes a color code as an ARGB or RGB string and returns a solid color brush. 
            
            Remark: if single digits are used to define the color, they will
            be duplicated (example: FFD8 will become FFFFDD88)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SolidColorBrushHelper.Parse(System.String)">
            <summary>
            Takes a color code as an ARGB or RGB, or textual string from <see cref="T:Windows.UI.Colors"/> string and returns a solid color brush. 
            
            Remark: if single digits are used to define the color, they will
            be duplicated (example: FFD8 will become FFFFDD88)
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SolidColorBrushHelper.FromName(System.String)">
            <summary>
            Takes a standard color name (E.G. White) and returns a solid color brush
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.SpecializedResourceDictionary">
            <summary>
            Specialized Dictionary for ResourceDictionary values backing, using <see cref="T:Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey"/> for the dictionary key.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey">
            <summary>
            Represents a key for the source dictionary
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey.#ctor(System.Object)">
            <summary>
            Builds a ResourceKey based on an unknown object
            </summary>
            <param name="key">The original key to use</param>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey.#ctor(System.String)">
            <summary>
            Builds a ResourceKey based on a string for faster creation
            </summary>
            <param name="key">A string typed key</param>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey.#ctor(System.Type)">
            <summary>
            Builds a ResourceKey based on a Type for faster creation
            </summary>
            <param name="key">A string typed key</param>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey.Equals(Windows.UI.Xaml.SpecializedResourceDictionary.ResourceKey@)">
            <summary>
            Compares this instance with another ResourceKey instance
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the dictionary can hold up to 'capacity' entries without any further expansion of its backing storage
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.TrimExcess">
             <summary>
             Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries
             </summary>
             <remarks>
             This method can be used to minimize the memory overhead
             once it is known that no new elements will be added.
            
             To allocate minimum size storage array, execute the following statements:
            
             dictionary.Clear();
             dictionary.TrimExcess();
             </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.TrimExcess(System.Int32)">
            <summary>
            Sets the capacity of this dictionary to hold up 'capacity' entries without any further expansion of its backing storage
            </summary>
            <remarks>
            This method can be used to minimize the memory overhead
            once it is known that no new elements will be added.
            </remarks>
        </member>
        <member name="F:Windows.UI.Xaml.SpecializedResourceDictionary.Entry.next">
            <summary>
            0-based index of next entry in chain: -1 means end of chain
            also encodes whether this entry _itself_ is part of the free list by changing sign and subtracting 3,
            so -2 means end of free list, -3 means index 0 but on free list, -4 means index 1 but on free list, etc.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.KeyCollection.MoveKeys(System.Int32,System.Object[],System.Int32,Windows.UI.Xaml.SpecializedResourceDictionary.Entry[])">
            <remarks>
            This method contains or is called by a try/catch containing method and
            can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="M:Windows.UI.Xaml.SpecializedResourceDictionary.ValueCollection.MoveValues(System.Int32,System.Object[],System.Int32,Windows.UI.Xaml.SpecializedResourceDictionary.Entry[])">
            <remarks>
            This method contains or is called by a try/catch containing method and can be significantly slower than other methods as a result on WebAssembly.
            See https://github.com/dotnet/runtime/issues/56309
            </remarks>
        </member>
        <member name="T:Windows.UI.Xaml.InsertionBehavior">
            <summary>
            Used internally to control behavior of insertion into a <see cref="T:System.Collections.Generic.Dictionary`2"/> or <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.InsertionBehavior.None">
            <summary>
            The default insertion behavior.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.InsertionBehavior.OverwriteExisting">
            <summary>
            Specifies that an existing entry with the same key should be overwritten if encountered.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.InsertionBehavior.ThrowOnExisting">
            <summary>
            Specifies that if an existing entry with the same key is encountered, an exception should be thrown.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.HashHelpers.GetFastModMultiplier(System.UInt32)">
            <summary>Returns approximate reciprocal of the divisor: ceil(2**64 / divisor).</summary>
            <remarks>This should only be used on 64-bit.</remarks>
        </member>
        <member name="M:Windows.UI.Xaml.HashHelpers.FastMod(System.UInt32,System.UInt32,System.UInt64)">
            <summary>Performs a mod operation using the multiplier pre-computed with <see cref="M:Windows.UI.Xaml.HashHelpers.GetFastModMultiplier(System.UInt32)"/>.</summary>
            <remarks>This should only be used on 64-bit.</remarks>
        </member>
        <member name="T:Windows.UI.Xaml.StateTriggerPrecedence">
            <summary>
            Precedence of an active trigger
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.TextAlignment">
            <summary>
            Specifies whether text is centered, left-aligned, or right-aligned.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextAlignment.Center">
            <summary>
            Text is centered within the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextAlignment.Left">
            <summary>
            Text is aligned to the left edge of the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextAlignment.Start">
            <summary>
            The beginning of the text is aligned to the edge of the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextAlignment.Right">
            <summary>
            Text is aligned to the right edge of the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextAlignment.End">
            <summary>
            The end of the text is aligned to the edge of the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextAlignment.Justify">
            <summary>
            Text is justified within the container.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.TextAlignment.DetectFromContent">
            <summary>
            Text alignment is inferred from the text content.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.UnsetValue">
            <summary>
            This class is used for DependencyProperty.UnsetValue.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.VerticalAlignment">
            <summary>
            Describes how a child element is vertically positioned or stretched within a parent's layout slot.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.VerticalAlignment.Top">
            <summary>
            The element is aligned to the top of the parent's layout slot.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.VerticalAlignment.Center">
            <summary>
            The element is aligned to the center of the parent's layout slot.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.VerticalAlignment.Bottom">
            <summary>
            The element is aligned to the bottom of the parent's layout slot.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.VerticalAlignment.Stretch">
            <summary>
            The element is stretched to fill the entire layout slot of the parent element.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.VirtualizationInformation">
            <summary>
            Class that holds virtualization information. We do not create this class indiscriminately,
            but only for containers that happen to be virtualizing.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.VirtualizationInformation.IsGeneratedContainer">
            <summary>
            Marks this as a container generated by, eg, a <see cref="T:Windows.UI.Xaml.Controls.Primitives.Selector"/>, rather than an element explicitly 
            defined in xaml.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.VirtualizationInformation.IsContainerFromTemplateRoot">
            <summary>
            Marks this as a container defined in the root of an ItemTemplate, so that it can be handled appropriately when recycled.
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.Visibility">
            <summary>
            Specifies the display state of an element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Visibility.Visible">
            <summary>
            Display the element.
            </summary>
        </member>
        <member name="F:Windows.UI.Xaml.Visibility.Collapsed">
            <summary>
            Do not display the element, and do not reserve space for it in layout.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.VisibilityExtensions.IsHidden(Windows.UI.Xaml.Visibility)">
            <summary>
            Determines if the specified visibility is hidden
            </summary>
        </member>
        <member name="T:Windows.UI.Xaml.XamlScope">
            <summary>
            This is a helper to support resolution of StaticResource/ThemeResource references using the 'Xaml-tree scope' similar to UWP, as
            opposed to the visual tree. In particular it allows correct resolution during template resolution, where the visual tree may be
            arbitrarily distant from the xaml tree.
            </summary>
        </member>
        <member name="P:Windows.UI.Xaml.ApplicationActivity.Instance">
            <summary>
            The windows model implies only one managed activity.
            </summary>
        </member>
        <member name="M:Windows.UI.Xaml.ApplicationActivity.GetTypeAssemblyFullName(System.String)">
            <summary>
            This method is used by UI Test frameworks to get 
            the Xamarin compatible name for a control in Java.
            </summary>
            <param name="type">A type full name</param>
            <returns>The assembly that contains the specified type</returns>
        </member>
        <member name="M:Windows.UI.Xaml.FontHelper.GetFontRatio">
            <summary>
            Get the ratio dictated by the user-specified text size in Accessibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:DirectUI.IteratorBase`1.Reset">
            <inheritdoc />
        </member>
        <member name="P:DirectUI.IteratorBase`1.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:DirectUI.IteratorBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DirectUI.UnoEnumeratorToIteratorAdapter`1.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:DirectUI.UnoEnumeratorToIteratorAdapter`1.Reset">
            <inheritdoc />
        </member>
        <member name="P:DirectUI.UnoEnumeratorToIteratorAdapter`1.Current">
            <inheritdoc />
        </member>
        <member name="P:DirectUI.UnoEnumeratorToIteratorAdapter`1.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:DirectUI.UnoEnumeratorToIteratorAdapter`1.Dispose">
            <inheritdoc />
        </member>
        <member name="P:DirectUI.UnoEnumeratorToIteratorAdapter`1.HasCurrent">
            <inheritdoc />
        </member>
        <member name="M:DirectUI.TrackerView`1.GetAt(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:DirectUI.TrackerView`1.IndexOf(`0,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="P:DirectUI.TrackerView`1.Size">
            <inheritdoc />
        </member>
        <member name="M:DirectUI.TrackerView`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:DirectUI.TrackerView`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:DirectUI.TrackerView`1.Count">
            <inheritdoc />
        </member>
        <member name="P:DirectUI.TrackerView`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Numerics.VectorExtensions.ToPoint(System.Numerics.Vector2)">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector2"/> to <see cref="T:Windows.Foundation.Point"/>
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector2"/> to convert</param>
            <returns>A <see cref="T:Windows.Foundation.Point"/></returns>
        </member>
        <member name="M:System.Numerics.VectorExtensions.ToSize(System.Numerics.Vector2)">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector2"/> to <see cref="T:Windows.Foundation.Size"/>
            </summary>
            <param name="vector">The <see cref="T:System.Numerics.Vector2"/> to convert</param>
            <returns>A <see cref="T:Windows.Foundation.Size"/></returns>
        </member>
        <member name="M:System.Numerics.VectorExtensions.ToVector2(Windows.Foundation.Point)">
            <summary>
            Converts a <see cref="T:Windows.Foundation.Point"/> to <see cref="T:System.Numerics.Vector2"/>
            </summary>
            <param name="point">The <see cref="T:Windows.Foundation.Point"/> to Convert</param>
            <returns>A <see cref="T:System.Numerics.Vector2"/></returns>
        </member>
        <member name="M:System.Numerics.VectorExtensions.ToVector2(Windows.Foundation.Size)">
            <summary>
            Converts a <see cref="T:Windows.Foundation.Size"/> to <see cref="T:System.Numerics.Vector2"/>
            </summary>
            <param name="point">The <see cref="T:Windows.Foundation.Size"/> to Convert</param>
            <returns>A <see cref="T:System.Numerics.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.AnimatedIcon.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.IAnimatedVisual">
            <summary>
            An animated Composition.Visual that can be used by other objects, such as an AnimatedVisualPlayer or AnimatedIcon.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.IAnimatedVisual.RootVisual">
            <summary>
            Gets the root Visual of the animated visual.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.IAnimatedVisual.Size">
            <summary>
            Gets the size of the animated visual.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.IAnimatedVisual.Duration">
            <summary>
            Gets the duration of the animated visual.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.ArrayList`1">
            <summary>
            Simplified implementation of List<typeparamref name="T"/> that supports direct access to the internal array.
            </summary>
            <remarks>
            This is needed in the ColorPicker to avoid an extra copy when converting a list of bytes into a WritableBitmap.
            The performance gains justify creation of this class and a slight deviation from WinUI.
            This class is not considered safe to use outside of the ColorPicker so it is not in a generic location.
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel">
            <summary>
            Represents a panel that arranges its items horizontally if there is available space, otherwise vertically.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.#ctor">
            <summary>
            Initializes a new instance of the InfoBarPanel class.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.GetHorizontalOrientationMargin(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the HorizontalOrientationMargin from an object.
            </summary>
            <param name="obj">The object that has an HorizontalOrientationMargin.</param>
            <returns>The HorizontalOrientationMargin thickness.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.SetHorizontalOrientationMargin(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.Thickness)">
            <summary>
            Sets the HorizontalOrientationMargin to an object.
            </summary>
            <param name="obj">The object that the HorizontalOrientationMargin value will be set to.</param>
            <param name="value">The thickness of the HorizontalOrientationMargin.</param>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationMarginProperty">
            <summary>
            Gets the identifier for the HorizontalOrientationMargin dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding">
            <summary>
            Gets and sets the distance between the edges of the InfoBarPanel
            and its children when the panel is oriented horizontally.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPaddingProperty">
            <summary>
            Gets the identifier for the HorizontalOrientationPadding dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.GetVerticalOrientationMargin(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the VerticalOrientationMargin from an object.
            </summary>
            <param name="obj">The object that has a VerticalOrientationMargin.</param>
            <returns>The VerticalOrientationMargin thickness.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.SetVerticalOrientationMargin(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.Thickness)">
            <summary>
            Sets the VerticalOrientationMargin to an object.
            </summary>
            <param name="obj">The object that the VerticalOrientationMargin value will be set to.</param>
            <param name="value">The thickness of the VerticalOrientationMargin.</param>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationMarginProperty">
            <summary>
            Gets the identifier for the VerticalOrientationMargin dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding">
            <summary>
            Gets and sets the distance between the edges of the InfoBarPanel
            and its children when the panel is oriented vertically.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPaddingProperty">
            <summary>
            Gets the identifier for the VerticalOrientationPadding dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter">
            <summary>
            Represents the visual elements of a NavigationViewItem.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.Icon">
            <summary>
            Gets or sets the icon in a NavigationView item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.IconProperty">
            <summary>
            Identifies the Icon dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.InfoBadge">
            <summary>
            Gets or sets the info badge in a NavigationView item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.InfoBadgeProperty">
            <summary>
            Identifies the InfoBadge dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.TemplateSettings">
            <summary>
            Gets the template settings.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.TemplateSettingsProperty">
            <summary>
            Identifies the TemplateSettings dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.IconWidth">
            <summary>
            Gets the width of the icon.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.IconWidthProperty">
            <summary>
            Identifies the IconWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.SmallerIconWidth">
            <summary>
            Gets the width of the smaller icon.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.SmallerIconWidthProperty">
            <summary>
            Identifies the SmallerIconWidth dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.Primitives.TabViewListView">
            <summary>
            Represents the ListView corresponding to the TabStrip within the TabView.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.TabViewListView.#ctor">
            <summary>
            Initializes a new instance of the TabViewListView class.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Primitives.TabViewListView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ColorPicker.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Expander.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.FontIconSource.CreateIconElementCore">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.IconSource.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.IconSource.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.IconSource.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ImageIcon.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBadge.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.InfoBar">
            <summary>
            An InfoBar is an inline notification for essential app-wide messages.
            The InfoBar will take up space in a layout and will not cover up other
            content or float on top of it. It supports rich content (including titles,
            messages, icons, and buttons) and can be configured to be user-dismissable
            or persistent.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBar.#ctor">
            <summary>
            Initializes a new instance of the InfoBar class.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonClick">
            <summary>
            Occurs after the close button is clicked in the InfoBar.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.InfoBar.Closing">
            <summary>
            Occurs just before the InfoBar begins to close.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.InfoBar.Closed">
            <summary>
            Occurs after the InfoBar is closed.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.ActionButton">
            <summary>
            Gets or sets the action button of the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.ActionButtonProperty">
            <summary>
            Identifies the ActionButton dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommand">
            <summary>
            Gets or sets the command to invoke when the close button is clicked in the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommandProperty">
            <summary>
            Gets or sets the parameter to pass to the command for the close button in the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommandParameter">
            <summary>
            Identifies the CloseButtonCommandParameter dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommandParameterProperty">
            <summary>
            Identifies the CloseButtonCommand dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonStyle">
            <summary>
            Gets or sets the Style to apply to the close button in the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonStyleProperty">
            <summary>
            Gets or sets the Style to apply to the close button in the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.Content">
            <summary>
            Gets or sets the XAML Content that is displayed below the title and message in the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.ContentTemplate">
            <summary>
            Gets or sets the data template for the InfoBar.Content.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.ContentTemplateProperty">
            <summary>
            Identifies the ContentTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.IconSource">
            <summary>
            Gets or sets the graphic content to appear alongside the title and message in the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.IconSourceProperty">
            <summary>
            Identifies the IconSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.IsClosable">
            <summary>
            Identifies the IconSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.IsClosableProperty">
            <summary>
            Identifies the IsClosable dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.IsIconVisible">
            <summary>
            Gets or sets a value that indicates whether the icon is visible in the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.IsIconVisibleProperty">
            <summary>
            Identifies the IsIconVisible dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.IsOpen">
            <summary>
            Gets or sets a value that indicates whether the InfoBar is open.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.IsOpenProperty">
            <summary>
            Identifies the IsOpen dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.Message">
            <summary>
            Gets or sets the message of the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.MessageProperty">
            <summary>
            Identifies the Message dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.Severity">
            <summary>
            Gets or sets the type of the InfoBar to apply consistent status color, icon,
            and assistive technology settings dependent on the criticality of the notification.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.SeverityProperty">
            <summary>
            Identifies the Severity dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.TemplateSettings">
            <summary>
            Provides calculated values that can be referenced as TemplatedParent sources when defining templates for an InfoBar.
            Not intended for general use.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.TemplateSettingsProperty">
            <summary>
            Identifies the TemplateSettings dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.Title">
            <summary>
            Gets or sets the title of the InfoBar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBar.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.InfoBarClosedEventArgs">
            <summary>
            Provides data for the InfoBar.Closed event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBarClosedEventArgs.Reason">
            <summary>
            Gets a constant that specifies whether the cause of the Closed
            event was due to user interaction (Close button click) or programmatic closure.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.InfoBarCloseReason">
            <summary>
            Defines constants that indicate the cause of the InfoBar closure.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.InfoBarCloseReason.CloseButton">
            <summary>
            The InfoBar was closed by the user clicking the close button.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.InfoBarCloseReason.Programmatic">
            <summary>
            The InfoBar was programmatically closed.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.InfoBarClosingEventArgs">
            <summary>
            Provides data for the InfoBar.Closing event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBarClosingEventArgs.Reason">
            <summary>
            Gets a constant that specifies whether the cause of the Closing event
            was due to user interaction (Close button click) or programmatic closure.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBarClosingEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether the Closing event should be canceled in the InfoBar.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.InfoBarSeverity">
            <summary>
            Defines constants that indicate the criticality of the InfoBar that is shown.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.InfoBarSeverity.Informational">
            <summary>
            Communicates that the InfoBar is displaying general information that
            requires the user's attention. For assistive technologies, they will
            follow the behavior set in the Processing_All constant.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.InfoBarSeverity.Success">
            <summary>
            Communicates that the InfoBar is displaying information regarding
            a long-running and/or background task that has completed successfully.
            For assistive technologies, they will follow the behavior
            set in the Processing_All constant.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.InfoBarSeverity.Warning">
            <summary>
            Communicates that the InfoBar is displaying information regarding
            a condition that might cause a problem in the future. For assistive
            technologies, they will follow the behavior
            set in the NotificationProcessing_ImportantAll constant.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.InfoBarSeverity.Error">
            <summary>
            Communicates that the InfoBar is displaying information regarding an error
            or problem that has occurred. For assistive technologies, they will follow
            the behavior set in the NotificationProcessing_ImportantAll constant.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings">
            <summary>
            Provides calculated values that can be referenced as TemplatedParent
            sources when defining templates for an InfoBar.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings.#ctor">
            <summary>
            Initializes a new instance of the InfoBarTemplateSettings class.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings.IconElement">
            <summary>
            Gets the icon element.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings.IconElementProperty">
            <summary>
            Identifies the InfoBarTemplateSettings.IconElement dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.LayoutPanel.CreateBorderBrushProperty">
            <summary>
            Generated method used to create the <see cref="P:Microsoft.UI.Xaml.Controls.LayoutPanel.BorderBrushProperty" /> member value
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.LayoutPanel.CreateBorderThicknessProperty">
            <summary>
            Generated method used to create the <see cref="P:Microsoft.UI.Xaml.Controls.LayoutPanel.BorderThicknessProperty" /> member value
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.LayoutPanel.CreatePaddingProperty">
            <summary>
            Generated method used to create the <see cref="P:Microsoft.UI.Xaml.Controls.LayoutPanel.PaddingProperty" /> member value
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.LayoutPanel.CreateCornerRadiusProperty">
            <summary>
            Generated method used to create the <see cref="P:Microsoft.UI.Xaml.Controls.LayoutPanel.CornerRadiusProperty" /> member value
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.LayoutPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.BackdropMaterial">
            <summary>
            Helper class to apply a backdrop material to the root of the XAML content.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.BackdropMaterial.BackdropMaterialState">
            <summary>
            This object gets attached to the target of the ApplyToRootOrPageBackground property to track additional
            state that needs to be cleaned up if that target ever goes away.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.BackdropMaterial.BackdropMaterialState.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.BackdropMaterial.BackdropMaterialState.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.BackdropMaterial.BackdropMaterialState.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.BackdropMaterial.GetApplyToRootOrPageBackground(Windows.UI.Xaml.Controls.Control)">
            <summary>
            Gets the value of the BackdropMaterial.ApplyToRootOrPageBackground XAML attached property for the target element.
            </summary>
            <param name="element">The object from which the property value is read.</param>
            <returns>The BackdropMaterial.ApplyToRootOrPageBackground XAML attached property value of the requested object.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.BackdropMaterial.SetApplyToRootOrPageBackground(Windows.UI.Xaml.Controls.Control,System.Boolean)">
            <summary>
            Sets the value of the BackdropMaterial.ApplyToRootOrPageBackground XAML attached property for a target element.
            </summary>
            <param name="element">The object to which the property value is written.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.BackdropMaterial.ApplyToRootOrPageBackgroundProperty">
            <summary>
            Applies the backdrop material to the root or background of the XAML content.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader">
            <summary>
            Gets or sets a value that indicates whether the header is always visible.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeaderProperty">
            <summary>
            Identifies the AlwaysShowHeader dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox">
            <summary>
            Gets or sets an AutoSuggestBox to be displayed in the NavigationView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBoxProperty">
            <summary>
            Identifies the AutoSuggestBox dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth">
            <summary>
            Gets or sets the minimum window width at which the NavigationView enters Compact display mode.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidthProperty">
            <summary>
            Identifies the CompactModeThresholdWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength">
            <summary>
            Gets or sets the width of the NavigationView pane in its compact display mode.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLengthProperty">
            <summary>
            Identifies the CompactPaneLength dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay">
            <summary>
            Gets or sets a UI element that is shown at the top of the control, below the pane if PaneDisplayMode is Top.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlayProperty">
            <summary>
            Identifies the ContentOverlay dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode">
            <summary>
            Gets a value that specifies how the pane and content areas of a NavigationView are being shown.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.DisplayModeProperty">
            <summary>
            Identifies the DisplayMode dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth">
            <summary>
            Gets or sets the minimum window width at which the NavigationView enters Expanded display mode.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidthProperty">
            <summary>
            Identifies the ExpandedModeThresholdWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems">
            <summary>
            Gets the footer menu items.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsProperty">
            <summary>
            Identifies the FooterMenuItems dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource">
            <summary>
            Gets or sets the footer menu items data source.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSourceProperty">
            <summary>
            Identifies the FooterMenuItemsSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.Header">
            <summary>
            Gets or sets the header content.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the control's header.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible">
            <summary>
            Gets or sets a value that indicates whether the back button is enabled or disabled.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisibleProperty">
            <summary>
            Identifies the IsBackButtonVisible dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled">
            <summary>
            Gets or sets a value that indicates whether the back button is enabled or disabled.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabledProperty">
            <summary>
            Identifies the IsBackEnabled dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen">
            <summary>
            Gets or sets a value that specifies whether the NavigationView pane is expanded to its full width.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpenProperty">
            <summary>
            Identifies the IsPaneOpen dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible">
            <summary>
            Gets or sets a value that indicates whether the menu toggle button is shown.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisibleProperty">
            <summary>
            Identifies the IsPaneToggleButtonVisible dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible">
            <summary>
            Gets or sets a value that determines whether the pane is shown.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisibleProperty">
            <summary>
            Identifies the IsPaneVisible dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible">
            <summary>
            Gets or sets a value that indicates whether the settings button is shown.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisibleProperty">
            <summary>
            Identifies the IsSettingsVisible dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled">
            <summary>
            Gets or sets a value that indicates whether top padding is added to the navigation view's header when used with a custom title bar.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabledProperty">
            <summary>
            Identifies the IsTitleBarAutoPaddingEnabled dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle">
            <summary>
            Gets or sets the style that is used when rendering the menu item containers.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleProperty">
            <summary>
            Identifies the MenuItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector">
            <summary>
            Gets or sets a reference to a custom StyleSelector logic class. The StyleSelector returns different Style values
            to use for the item container based on characteristics of the object being displayed.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelectorProperty">
            <summary>
            Identifies the MenuItemContainerStyleSelector dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItems">
            <summary>
            Gets the collection of menu items displayed in the NavigationView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsProperty">
            <summary>
            Identifies the MenuItems dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource">
            <summary>
            Gets or sets an object source used to generate the content of the NavigationView menu.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSourceProperty">
            <summary>
            Identifies the MenuItemsSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display each menu item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateProperty">
            <summary>
            Identifies the MenuItemTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector">
            <summary>
            Gets or sets a reference to a custom DataTemplateSelector logic class. The DataTemplateSelector referenced by this property returns
            a template to apply to items.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelectorProperty">
            <summary>
            Identifies the MenuItemTemplateSelector dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength">
            <summary>
            Gets or sets the width of the NavigationView pane when it's fully expanded.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLengthProperty">
            <summary>
            Identifies the OpenPaneLength dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode">
            <summary>
            Gets or sets a value that indicates what text label is shown for the overflow menu.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelModeProperty">
            <summary>
            Identifies the OverflowLabelMode dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent">
            <summary>
            Gets or sets a UI element that is shown in the NavigationView pane.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContentProperty">
            <summary>
            Identifies the PaneCustomContent dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode">
            <summary>
            Gets or sets a value that indicates how and where the NavigationView pane is shown.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayModeProperty">
            <summary>
            Identifies the PaneDisplayMode dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter">
            <summary>
            Gets or sets the content for the pane footer.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneFooterProperty">
            <summary>
            Identifies the PaneFooter dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader">
            <summary>
            Gets or sets the content for the pane header.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneHeaderProperty">
            <summary>
            Identifies the PaneHeader dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle">
            <summary>
            Gets or sets the label adjacent to the menu icon when the NavigationView pane is open.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationView.PaneTitleProperty">
            <summary>
            Identifies the PaneTitle dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle">
            <summary>
            Gets or sets the Style that defines the look of the menu toggle button.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyleProperty">
            <summary>
            Identifies the PaneToggleButtonStyle dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus">
            <summary>
            Gets or sets a value that indicates whether item selection changes when keyboard focus changes.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocusProperty">
            <summary>
            Identifies the SelectionFollowsFocus dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem">
            <summary>
            Gets the navigation item that represents the entry point to app settings.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.SettingsItemProperty">
            <summary>
            Identifies the SettingsItem dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled">
            <summary>
            Gets or sets a value that indicates when gamepad bumpers can be used to navigate the top-level navigation items in a NavigationView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabledProperty">
            <summary>
            Identifies the ShoulderNavigationEnabled dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings">
            <summary>
            Gets an object that provides calculated values that can be referenced as TemplateBinding sources when defining templates for a NavigationView control.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettingsProperty">
            <summary>
            Identifies the TemplateSettings dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.BackRequested">
            <summary>
            Occurs when the back button receives an interaction such as a click or tap.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.Collapsed">
            <summary>
            Occurs when a node in the tree is collapsed.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.DisplayModeChanged">
            <summary>
            Occurs when the DisplayMode property changes.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.Expanding">
            <summary>
            Occurs when a node in the tree starts to expand.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.ItemInvoked">
            <summary>
            Occurs when an item in the menu receives an interaction such a a click or tap.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.PaneClosed">
            <summary>
            Occurs when the NavigationView pane is closed.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.PaneClosing">
            <summary>
            Occurs when the NavigationView pane is closing.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.PaneOpened">
            <summary>
            Occurs when the NavigationView pane is opened.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.PaneOpening">
            <summary>
            Occurs when the NavigationView pane is opening.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.NavigationView.SelectionChanged">
            <summary>
            Occurs when the currently selected item changes.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible">
            <summary>
            Defines constants that specify whether the back button is visible in NavigationView.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Collapsed">
            <summary>
            Do not display the back button in NavigationView,
            and do not reserve space for it in layout.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Visible">
            <summary>
            Display the back button in NavigationView.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Auto">
            <summary>
            The system chooses whether or not to display
            the back button, depending on the device/form factor.
            On phones, tablets, desktops, and hubs, the back button
            is visible (except on Android, where it is not displayed
            as per Android guidelines). On Xbox/TV, the back button
            is collapsed.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs">
            <summary>
            Provides event data for the NavigationView.BackRequested event.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode">
            <summary>
            Defines constants that specify how the pane is shown in a NavigationView.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Minimal">
            <summary>
            Only the menu button remains fixed. The pane shows and hides as needed.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Compact">
            <summary>
            The pane always shows as a narrow sliver which can be opened to full width.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Expanded">
            <summary>
            The pane stays open alongside the content.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs">
            <summary>
            Provides data for the NavigationView.DisplayModeChanged event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs.DisplayMode">
            <summary>
            Gets the new display mode.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemBase.CreatedByNavigationViewItemsFactory">
            <summary>
            Flag to keep track of whether this item was created by the custom internal NavigationViewItemsFactory.
            This is required in order to achieve proper recycling
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected">
            <summary>
            Gets or sets the value that indicates
            whether a NavigationViewItem is selected.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewItemBase.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewItemBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs">
            <summary>
            Provides event data for the NavigationViewItem.Collapsed event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs.CollapsedItem">
            <summary>
            Gets the object that has been collapsed after
            the NavigationViewItem.Collapsed event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs.CollapsedItemContainer">
            <summary>
            Gets the container of the object that was collapsed
            in the NavigationViewItem.Collapsed event.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs">
            <summary>
            Provides event data for the NavigationViewItem.Expanding event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs.ExpandingItem">
            <summary>
            Gets the object that is expanding after the NavigationViewItem.Expanding event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs.ExpandingItemContainer">
            <summary>
            Gets the container of the expanding item after a NavigationViewItem.Expanding event.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewItemHeader.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs">
            <summary>
            Provides event data for the NavigationView.ItemInvoked event.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the NavigationViewItemInvokedEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs.InvokedItem">
            <summary>
            Gets a reference to the invoked item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs.IsSettingsInvoked">
            <summary>
            Gets a value that indicates whether the InvokedItem
            is the menu item for Settings.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs.InvokedItemContainer">
            <summary>
            Gets the container for the invoked item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs.RecommendedNavigationTransitionInfo">
            <summary>
            Gets the navigation transition recommended for the direction
            of the navigation.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode">
            <summary>
            Defines constants that specify the label
            for the overflow button in a NavigationView.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel">
            <summary>
            The text label "More" is shown next
            to the chevron.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel">
            <summary>
            No text label is shown, only a chevron.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs">
            <summary>
            Provides data for the NavigationView.PaneClosing event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether
            the event should be canceled.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode">
            <summary>
            Defines constants that specify how and where the NavigationView pane is shown.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Auto">
            <summary>
            The pane is shown on the left side of the control,
            and changes between minimal, compact, and full
            states depending on the width of the window.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Left">
            <summary>
            The pane is shown on the left side of the control
            in its fully open state.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Top">
            <summary>
            The pane is shown at the top of the control.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact">
            <summary>
            The pane is shown on the left side of the control.
            Only the pane icons are shown by default.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal">
            <summary>
            The pane is shown on the left side of the control.
            Only the pane menu button is shown by default.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs">
            <summary>
            Provides data for the NavigationView.SelectionChanged event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs.SelectedItem">
            <summary>
            Gets the newly selected menu item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs.IsSettingsSelected">
            <summary>
            Gets a value that indicates whether the SelectedItem
            is the menu item for Settings.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs.SelectedItemContainer">
            <summary>
            Gets the container for the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs.RecommendedNavigationTransitionInfo">
            <summary>
            Gets the navigation transition recommended for the direction
            of the navigation.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus">
            <summary>
            Defines constants that specify whether item selection changes when keyboard focus changes in a NavigationView.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled">
            <summary>
            Selection does not change when keyboard focus changes.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled">
            <summary>
            Selection changes when keyboard focus changes.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled">
            <summary>
            Defines constants that specify when gamepad bumpers
            can be used to navigate the top-level navigation items
            in a NavigationView.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus">
            <summary>
            Gamepad bumpers navigate the top-level
            navigation items when the SelectionFollowsFocus
            property is Enabled.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always">
            <summary>
            Gamepad bumpers always navigate the top-level
            navigation items.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never">
            <summary>
            Gamepad bumpers never navigate the top-level
            navigation items.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings">
            <summary>
            Provides calculated values that can be referenced as TemplatedParent sources
            when defining templates for a NavigationView. Not intended for general use.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.#ctor">
            <summary>
            Initializes a new instance of the NavigationViewTemplateSettings class.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.BackButtonVisibility">
            <summary>
            Gets the visibility of the back button.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.BackButtonVisibilityProperty">
            <summary>
            Identifies the BackButtonVisibility dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.LeftPaneVisibility">
            <summary>
            Gets the visibility of the left pane.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.LeftPaneVisibilityProperty">
            <summary>
            Identifies the LeftPaneVisibility dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.OpenPaneWidth">
            <summary>
            Gets the width of open pane.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.OpenPaneWidthProperty">
            <summary>
            Identifies the OpenPaneWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.OverflowButtonVisibility">
            <summary>
            Gets the visibility of the overflow button.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.OverflowButtonVisibilityProperty">
            <summary>
            Identifies the OverflowButtonVisibility dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.PaneToggleButtonVisibility">
            <summary>
            Gets the visibility of the pane toggle button.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.PaneToggleButtonVisibilityProperty">
            <summary>
            Identifies the PaneToggleButtonVisibility dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.PaneToggleButtonWidth">
            <summary>
            Gets the pane toggle button width.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.PaneToggleButtonWidthProperty">
            <summary>
            Identifies the PaneToggleButtonWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.SingleSelectionFollowsFocus">
            <summary>
            Gets the SelectionFollowsFocus value.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.SingleSelectionFollowsFocusProperty">
            <summary>
            Identifies the SingleSelectionFollowsFocus dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.SmallerPaneToggleButtonWidth">
            <summary>
            Gets the smaller pane toggle button width.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.SmallerPaneToggleButtonWidthProperty">
            <summary>
            Identifies the SmallerPaneToggleButtonWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.TopPadding">
            <summary>
            Gets the padding value of the top pane.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.TopPaddingProperty">
            <summary>
            Identifies the TopPadding dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.TopPaneVisibility">
            <summary>
            Gets the visibility of the top pane.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.TopPaneVisibilityProperty">
            <summary>
            Identifies the TopPaneVisibility dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.NumberBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.PagerControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.PagerControlTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.PagerControlTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.PagerControlTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ProgressBar.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ProgressRing.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RadioButtons.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.RatingControl">
            <summary>
            Represents a control that lets a user enter a star rating.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RatingControl.#ctor">
            <summary>
            Initializes a new instance of the RatingControl class.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.Caption">
            <summary>
            Gets or sets the text label for the control.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.CaptionProperty">
            <summary>
            Identifies the Caption dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.InitialSetValue">
            <summary>
            Gets or sets the initial set rating value.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.InitialSetValueProperty">
            <summary>
            Identifies the InitialSetValue dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.IsClearEnabled">
            <summary>
            Gets or sets the value that determines if the user can remove the rating.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.IsClearEnabledProperty">
            <summary>
            Identifies the IsClearEnabled dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.IsReadOnly">
            <summary>
            Gets or sets the value that determines if the user can change the rating.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.ItemInfo">
            <summary>
            Gets or sets info about the visual states of the items that represent a rating.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.ItemInfoProperty">
            <summary>
            Identifies the ItemInfo dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.MaxRating">
            <summary>
            Gets or sets the maximum allowed rating value.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.MaxRatingProperty">
            <summary>
            Identifies the MaxRating dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.PlaceholderValue">
            <summary>
            Gets or sets the rating that is displayed in the control until the value is changed by a user action or some other operation.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.PlaceholderValueProperty">
            <summary>
            Identifies the PlaceholderValue dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.Value">
            <summary>
            Gets or sets the rating value.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingControl.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.RatingControl.ValueChanged">
            <summary>
            Occurs when the Value property has changed.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RatingControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.RatingItemFontInfo">
            <summary>
            Represents information about the visual states of font elements that represent a rating.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.#ctor">
            <summary>
            Initializes a new instance of the RatingItemFontInfo class.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.DisabledGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that is disabled.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.DisabledGlyphProperty">
            <summary>
            Identifies the DisabledGlyph dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.Glyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that has been set by the user.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.GlyphProperty">
            <summary>
            Identifies the Glyph dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.PlaceholderGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that is showing a placeholder value.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.PlaceholderGlyphProperty">
            <summary>
            Identifies the PlaceholderGlyph dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.PointerOverGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that has the pointer over it.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.PointerOverGlyphProperty">
            <summary>
            Identifies the PointerOverGlyph dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element showing a placeholder value with the pointer over it.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyphProperty">
            <summary>
            Identifies the PointerOverPlaceholderGlyph dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.UnsetGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element that has not been set.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemFontInfo.UnsetGlyphProperty">
            <summary>
            Identifies the UnsetGlyph dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.RatingItemImageInfo">
            <summary>
            Represents information about the visual states of image elements that represent a rating.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.#ctor">
            <summary>
            Initializes a new instance of the RatingItemImageInfo class.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.DisabledImage">
            <summary>
            Gets or sets an image that represents a rating element that is disabled.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.DisabledImageProperty">
            <summary>
            Identifies the DisabledImage dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.Image">
            <summary>
            Gets or sets an image that represents a rating element that has been set by the user.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.ImageProperty">
            <summary>
            Identifies the Image dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.PlaceholderImage">
            <summary>
            Gets or sets an image that represents a rating element that is showing a placeholder value.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.PlaceholderImageProperty">
            <summary>
            Identifies the PlaceholderImage dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.PointerOverImage">
            <summary>
            Gets or sets an image that represents a rating element that has the pointer over it.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.PointerOverImageProperty">
            <summary>
            Identifies the PointerOverImage dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.PointerOverPlaceholderImage">
            <summary>
            Gets or sets an image that represents a rating element showing a placeholder value with the pointer over it.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.PointerOverPlaceholderImageProperty">
            <summary>
            Identifies the PointerOverPlaceholderImage dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.UnsetImage">
            <summary>
            Gets or sets an image that represents a rating element that has not been set.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.RatingItemImageInfo.UnsetImageProperty">
            <summary>
            Identifies the UnsetImage dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.RatingItemInfo">
            <summary>
            Represents information about the visual states of the elements that represent a rating.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RatingItemInfo.#ctor">
            <summary>
            Initializes a new instance of the RatingItemInfo class.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RatingItemInfo.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RatingItemInfo.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.RatingItemInfo.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.FlowLayout.IsSignificantViewportChange(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.IPanel">
            <summary>
            This interface allows use to replicate the "DeriveFromPanelHelper_base" of WinUI (cf. Remarks)
            </summary>
            <remarks>
            Doc about the DeriveFromPanelHelper_base in WinUI: 
            This type exists for types that in metadata derive from FrameworkElement but internally want to derive from Panel
            to get "protected" Children.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ItemsRepeater.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ItemsRepeaterScrollHost.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.ItemsSourceView">
            <summary>
            Represents a standardized view of the supported interactions between a given ItemsSource object and an ItemsRepeater control.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Layout.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Layout.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.Layout.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ListAdapter.ChangeType``2(System.Collections.Generic.IList{``0})">
            <summary>
            Creates a typed list decorator that changes the type of the source list
            </summary>
            <remarks>This is the equivalent of the Linq Cast operator.</remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ListAdapter.ToGeneric(System.Collections.IList)">
            <summary>
            Creates a typed list decorator over an IList
            </summary>
            <remarks>This is the equivalent of the Linq Cast operator.</remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ListAdapter.ToGeneric``1(System.Collections.IList)">
            <summary>
            Creates a typed list decorator over an IList
            </summary>
            <remarks>This is the equivalent of the Linq Cast operator.</remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ListAdapter.ToUntyped``1(System.Collections.Generic.IList{``0})">
            <summary>
            Creates an untyped list decorator over a generic list
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.SelectionNode.ConvertToNullableBool(Microsoft.UI.Xaml.Controls.SelectionState)">
            * static */
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.StackLayout.IsSignificantViewportChange(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.UniqueIdElementPool.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.UniqueIdElementPool.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.VirtualizingLayout.IsSignificantViewportChange(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            Determines if the difference between 2 viewports is large enough to cause a layout pass.
            ** This is Uno specific **
            This has been introduced to reduce the number of layouting pass for performance considerations.
            However a too high threshold would cause longer passes (as more items would been added / removed at once).
            Note: this is used only for viewport, if the size of the ItemsRepeater changes it will still be re-layouted.
            </summary>
            <param name="oldViewport">Previous viewport</param>
            <param name="newViewport">Updated viewport</param>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.SplitButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.ToggleSplitButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.AddTabButtonCommand">
            <summary>
            Gets or sets the command to invoke when the add (+) button is tapped.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.AddTabButtonCommandProperty">
            <summary>
            Identifies the AddButtonCommand dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.AddTabButtonCommandParameter">
            <summary>
            Gets or sets the parameter to pass to the AddTabButtonCommand property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.AddTabButtonCommandParameterProperty">
            <summary>
            Identifies the AddTabButtonCommandParameter dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.AllowDropTabs">
            <summary>
            Gets or sets a value that determines whether the TabView can be a drop target for the purposes of drag-and-drop operations.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.AllowDropTabsProperty">
            <summary>
            Identifies the AllowDropTabs dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.CanDragTabs">
            <summary>
            Gets or sets a value that indicates whether tabs can be dragged as a data payload.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.CanDragTabsProperty">
            <summary>
            Gets or sets a value that indicates whether tabs can be dragged as a data payload.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.CanReorderTabs">
            <summary>
            Gets or sets a value that indicates whether the tabs in the TabStrip can be reordered through user interaction.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.CanReorderTabsProperty">
            <summary>
            Identifies the CanReorderTabs dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.CloseButtonOverlayMode">
            <summary>
            Gets or sets a value that indicates the behavior of the close button within tabs.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.CloseButtonOverlayModeProperty">
            <summary>
            Identifies the CloseButtonOverlayMode dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.IsAddTabButtonVisible">
            <summary>
            Gets or sets whether the add (+) tab button is visible.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.IsAddTabButtonVisibleProperty">
            <summary>
            Identifies the IsAddTabButtonVisible dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabItems">
            <summary>
            Gets the collection used to generate the tabs within the control.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabItemsProperty">
            <summary>
            Identifies the TabItems dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabItemsSource">
            <summary>
            Gets or sets an object source used to generate the tabs within the TabView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabItemsSourceProperty">
            <summary>
            Identifies the TabItemsSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display each item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabItemTemplateProperty">
            <summary>
            Identifies the TabItemTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabItemTemplateSelector">
            <summary>
            Gets or sets a selection object that changes the DataTemplate to apply for content,
            based on processing information about the content item or its container at run time.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabItemTemplateSelectorProperty">
            <summary>
            Identifies the TabItemTemplateSelector dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabStripFooter">
            <summary>
            Gets or sets the content that is shown to the right of the tab strip.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabStripFooterProperty">
            <summary>
            Identifies the TabStripFooter dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabStripFooterTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the content of the TabStripFooter.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabStripFooterTemplateProperty">
            <summary>
            Identifies the TabStripFooterTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabStripHeader">
            <summary>
            Gets or sets the content that is shown to the left of the tab strip.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabStripHeaderProperty">
            <summary>
            Identifies the TabStripHeader dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabStripHeaderTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the content of the TabStripHeader.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabStripHeaderTemplateProperty">
            <summary>
            Identifies the TabStripHeaderTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabWidthMode">
            <summary>
            Gets or sets how the tabs should be sized.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabView.TabWidthModeProperty">
            <summary>
            Identifies the TabWidthMode dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.AddTabButtonClick">
            <summary>
            Occurs when the add (+) tab button has been clicked.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.SelectionChanged">
            <summary>
            Occurs when the currently selected tab changes.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.TabCloseRequested">
            <summary>
            Raised when the user attempts to close a Tab via clicking the x-to-close button, CTRL+F4, or mousewheel.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.TabDragCompleted">
            <summary>
            Raised when the user completes the drag action.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.TabDragStarting">
            <summary>
            Occurs when a drag operation is initiated.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.TabDroppedOutside">
            <summary>
            Occurs when the user completes a drag and drop operation by dropping a tab outside of the TabStrip area.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.TabItemsChanged">
            <summary>
            Raised when the items collection has changed.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.TabStripDragOver">
            <summary>
            Occurs when the input system reports an underlying drag event with the TabStrip as the potential drop target.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabView.TabStripDrop">
            <summary>
            Occurs when the input system reports an underlying drop event with the TabStrip as the drop target.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TabView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode">
            <summary>
            Defines constants that describe the behavior of the close button contained within each TabViewItem.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode.Auto">
            <summary>
            Behavior is defined by the framework. Default.
            This value maps to Always.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode.OnPointerOver">
            <summary>
            The selected tab always shows the close button if it is closable. Unselected tabs show the close
            button when the tab is closable and the user has their pointer over the tab.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode.Always">
            <summary>
            The selected tab always shows the close button if it is closable.
            Unselected tabs always show the close button if they are closable.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TabViewItem">
            <summary>
            Represents a single tab within a TabView.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TabViewItem.#ctor">
            <summary>
            Initializes a new instance of the TabViewItem class.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.Header">
            <summary>
            Gets or sets the content that appears inside the tab strip to represent the tab.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.HeaderTemplate">
            <summary>
            Gets or sets the DataTemplate used to display the content to the right of the tab strip.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.IconSource">
            <summary>
            Gets or sets the value for the IconSource to be displayed within the tab.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.IconSourceProperty">
            <summary>
            Identifies the IconSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.IsClosable">
            <summary>
            Gets or sets the value that determines if the tab shows a close button. The default is true.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.IsClosableProperty">
            <summary>
            Identifies the IsClosable dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.TabViewTemplateSettings">
            <summary>
            Gets an object that provides calculated values that can be referenced as {TemplateBinding} markup extension
            sources when defining templates for a TabViewItem control.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItem.TabViewTemplateSettingsProperty">
            <summary>
            Identifies the TabViewTemplateSettings dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TabViewItem.CloseRequested">
            <summary>
            Raised when the user attempts to close the TabViewItem via clicking
            the x-to-close button, CTRL+F4, or mousewheel.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TabViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings">
            <summary>
            Gets an object that provides calculated values that can be referenced as {TemplateBinding}
            markup extension sources when defining templates for a TabViewItem control.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings.IconElement">
            <summary>
            Gets an object that provides calculated values that can be referenced as {TemplateBinding}
            markup extension sources when defining templates for a TabViewItem control.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings.IconElementProperty">
            <summary>
            Identifies the IconElement dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs">
            <summary>
            Provides data for a tab close event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs.Item">
            <summary>
            Gets a value that represents the data context for the tab in which a close is being requested.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs.Tab">
            <summary>
            Gets the tab in which a close is being requested.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs">
            <summary>
            Provides data for the TabDragCompleted event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs.DropResult">
            <summary>
            Gets a value that indicates what operation was performed on the dragged data, and whether it was successful.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs.Item">
            <summary>
            Gets the item that was selected for the drag action.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs.Tab">
            <summary>
            Gets the TabViewItem that was selected for the drag action.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs">
            <summary>
            Provides data for the TabDragStarting event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs.Data">
            <summary>
            Gets the data payload associated with a drag action.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs.Item">
            <summary>
            Gets the item that was selected for the drag action.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs.Tab">
            <summary>
            Gets the TabViewItem that was selected for the drag action.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether the drag action should be cancelled.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TabViewTabDroppedOutsideEventArgs">
            <summary>
            Provides data for the TabDroppedOutside event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDroppedOutsideEventArgs.Item">
            <summary>
            Gets the item that was dropped outside of the TabStrip.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TabViewTabDroppedOutsideEventArgs.Tab">
            <summary>
            Gets the TabViewItem that was dropped outside of the TabStrip.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TabViewWidthMode">
            <summary>
            Defines constants that specify the width of the tabs.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TabViewWidthMode.Equal">
            <summary>
            Each tab has the same width.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TabViewWidthMode.SizeToContent">
            <summary>
            Each tab adjusts its width to the content within the tab.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TabViewWidthMode.Compact">
            <summary>
            Unselected tabs collapse to show only their icon. The selected
            tab adjusts to display the content within the tab.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TreeView">
            <summary>
            Represents a hierarchical list with expanding and collapsing nodes that contain nested items.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.#ctor">
            <summary>
            Initializes a new instance of the TreeView control.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.RootNodes">
            <summary>
            Gets or sets the collection of root nodes of the tree.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.ItemFromContainer(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the item that corresponds to the specified, generated container.
            </summary>
            <param name="container">The DependencyObject that corresponds to the item to be returned.</param>
            <returns>The contained item, or the container if it does not contain an item.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.ContainerFromItem(System.Object)">
            <summary>
            Returns the container corresponding to the specified item.
            </summary>
            <param name="item">The item to retrieve the container for.</param>
            <returns>A container that corresponds to the specified item, if the item
            has a container and exists in the collection; otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.NodeFromContainer(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the TreeViewNode corresponding to the specified container.
            </summary>
            <param name="container">he container to retrieve the TreeViewNode for.</param>
            <returns>The node that corresponds to the specified container.</returns>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.ContainerFromNode(Microsoft.UI.Xaml.Controls.TreeViewNode)">
            <summary>
            Returns the container corresponding to the specified node.
            </summary>
            <param name="node">The node to retrieve the container for.</param>
            <returns>A container that corresponds to the specified node, if the node
            has a container and exists in the collection; otherwise, null.</returns>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.SelectedNode">
            <summary>
            Gets or sets the node that is selected in the tree.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.SelectedNodes">
            <summary>
            Gets or sets the collection of nodes that are selected in the tree.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.SelectedItems">
            <summary>
            Gets the currently selected items.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.Expand(Microsoft.UI.Xaml.Controls.TreeViewNode)">
            <summary>
            Expands a given node.
            </summary>
            <param name="node">Node.</param>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.Collapse(Microsoft.UI.Xaml.Controls.TreeViewNode)">
            <summary>
            Collapses a given node.
            </summary>
            <param name="node">Node.</param>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.SelectAll">
            <summary>
            Selects all nodes in the tree.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TreeView.Collapsed">
            <summary>
            Occurs when a node in the tree is collapsed.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TreeView.DragItemsCompleted">
            <summary>
            Occurs when a drag operation that involves one of the items in the view is ended.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TreeView.DragItemsStarting">
            <summary>
            Occurs when a drag operation that involves one of the items in the view is initiated.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TreeView.Expanding">
            <summary>
            Occurs when a node in the tree starts to expand.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TreeView.ItemInvoked">
            <summary>
            Occurs when an item in the tree is invoked.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TreeView.SelectionChanged">
            <summary>
            Occurs when selection changes.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.CanDragItems">
            <summary>
            Gets or sets a value that indicates whether items in the view can be dragged as data payload.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.CanReorderItems">
            <summary>
            Gets or sets a value that indicates whether items in the view can be reordered through user interaction.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemContainerStyle">
            <summary>
            Gets or sets the style that is used when rendering the item containers.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemContainerStyleSelector">
            <summary>
            Gets or sets a reference to a custom StyleSelector logic class. The StyleSelector returns different
            Style values to use for the item container based on characteristics of the object being displayed.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemContainerTransitions">
            <summary>
            Gets or sets the collection of Transition style elements that apply to the item containers of a TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemsSource">
            <summary>
            Gets or sets an object source used to generate the content of the TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display each item.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemTemplateSelector">
            <summary>
            Gets or sets a reference to a custom DataTemplateSelector logic class.
            The DataTemplateSelector referenced by this property returns a template to apply to items.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.SelectedItem">
            <summary>
            Gets or sets the SelectedItem property of a TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.SelectionMode">
            <summary>
            Gets or sets the selection behavior for a TreeView instance.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.CanDragItemsProperty">
            <summary>
            Identifies the CanDragItems dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.CanReorderItemsProperty">
            <summary>
            Identifies the CanReorderItems dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemContainerStyleSelectorProperty">
            <summary>
            Identifies the ItemContainerStyleSelector dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemContainerTransitionsProperty">
            <summary>
            Identifies the ItemContainerTransitions dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemTemplateProperty">
            <summary>
            Identifies the ItemTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.ItemTemplateSelectorProperty">
            <summary>
            Identifies the ItemTemplateSelector dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeView.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs">
            <summary>
            Provides event data for the TreeView.Collapsed event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs.Node">
            <summary>
            Gets the TreeView node that is collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs.Item">
            <summary>
            Gets the TreeView item that is collapsed.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs">
            <summary>
            Provides event data for the TreeView.DragItemsCompleted event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs.DropResult">
            <summary>
            Gets a value that indicates what operation was performed on the dragged data, and whether it was successful.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs.Items">
            <summary>
            Gets the loosely typed collection of objects that are selected for the item drag action.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs.NewParentItem">
            <summary>
            Gets the new parent item.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs">
            <summary>
            Provides event data for the TreeView.DragItemsStarting event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether the item drag action should be canceled.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs.Data">
            <summary>
            Gets the data payload associated with an items drag action.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs.Items">
            <summary>
            Gets the loosely typed collection of objects that are selected for the item drag action.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs">
            <summary>
            Provides event data for the TreeView.Expanding event.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs.Node">
            <summary>
            Gets the tree view node that is expanding.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs.Item">
            <summary>
            Gets the data item for the tree view node that is expanding.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TreeViewItem">
            <summary>
            Represents the container for an item in a TreeView control.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewItem.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItem control.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewItem.IsDirectionalKey(Windows.System.VirtualKey)">
            * static */
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.CollapsedGlyph">
            <summary>
            Gets or sets the glyph to show for a collapsed tree node.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.ExpandedGlyph">
            <summary>
            Gets or sets the glyph to show for an expanded tree node.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.GlyphBrush">
            <summary>
            Gets or sets the Brush used to paint node glyphs on a TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.GlyphOpacity">
            <summary>
            Gets or sets the opacity of node glyphs on a TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.GlyphSize">
            <summary>
            Gets or sets the size of node glyphs on a TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.HasUnrealizedChildren">
            <summary>
            Gets or sets a value that indicates whether the current item has child items that haven't been shown.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.IsExpanded">
            <summary>
            Gets or sets a value that indicates whether a tree node is expanded.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.ItemsSource">
            <summary>
            Gets or sets an object source used to generate the content of the TreeView.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.TreeViewItemTemplateSettings">
            <summary>
            Gets an object that provides calculated values that can be referenced as {TemplateBinding} markup extension sources when defining templates for a TreeViewItem control.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.CollapsedGlyphProperty">
            <summary>
            Identifies the CollapsedGlyph dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.ExpandedGlyphProperty">
            <summary>
            Identifies the ExpandedGlyph dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.GlyphBrushProperty">
            <summary>
            Identifies the GlyphBrush dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.GlyphOpacityProperty">
            <summary>
            Identifies the GlyphOpacity dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.GlyphSizeProperty">
            <summary>
            Identifies the GlyphSize dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.HasUnrealizedChildrenProperty">
            <summary>
            Identifies the HasUnrealizedChildren dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.IsExpandedProperty">
            <summary>
            Identifies the IsExpanded dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItem.TreeViewItemTemplateSettingsProperty">
            <summary>
            Identifies the TreeViewItemTemplateSettings dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings">
            <summary>
            Provides calculated values that can be referenced as TemplatedParent sources when defining templates for a TreeViewItem control. Not intended for general use.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.CollapsedGlyphVisibility">
            <summary>
            Gets the visibilty of a collapsed glyph.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.DragItemsCount">
            <summary>
            Gets the number of items being dragged.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.ExpandedGlyphVisibility">
            <summary>
            Gets the visibilty of an expanded glyph.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.Indentation">
            <summary>
            Gets the amount that the item is indented.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.CollapsedGlyphVisibilityProperty">
            <summary>
            Identifies the CollapsedGlyphVisibility dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.DragItemsCountProperty">
            <summary>
            Identifies the DragItemsCount dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.ExpandedGlyphVisibilityProperty">
            <summary>
            Identifies the ExpandedGlyphVisibility dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.IndentationProperty">
            <summary>
            Identifies the Indentation dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TreeViewList">
            <summary>
            Represents a flattened list of tree view items so that operations such
            as keyboard navigation and drag-and-drop can be inherited from ListView.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewList.#ctor">
            <summary>
            Initializes a new instance of the TreeViewList control.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewList.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewNode.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewNode.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewNode.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TreeViewViewModel.GetEnumerator">
            <summary>
            The custom enumerator is necessary to ensure that when IsContentMode
            is set to true, the IndexFromItem method works properly (it must enumerate
            actual items, not TreeViewNodes).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TwoPaneView">
            <summary>
            Represents a container with two views that size and position content
            in the available space, either side-by-side or top-bottom.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TwoPaneView.#ctor">
            <summary>
            Initializes a new instance of the TwoPaneView class.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.MinTallModeHeight">
            <summary>
            Gets or sets the minimum height at which panes are shown in tall mode.
            </summary>
            <remarks>
            The default is 641px.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.MinTallModeHeightProperty">
            <summary>
            Identifies the MinTallModeHeight dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.MinWideModeWidth">
            <summary>
            Gets or sets the minimum width at which panes are shown in wide mode.
            </summary>
            <remarks>
            The default is 641px.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.MinWideModeWidthProperty">
            <summary>
            Identifies the MinWideModeWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Mode">
            <summary>
            Gets a value that indicates how panes are shown.
            </summary>
            <remarks>
            Default value is SinglePane.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.ModeProperty">
            <summary>
            Identifies the Mode dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Pane1">
            <summary>
            Gets or sets the content of pane 1.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Pane1Property">
            <summary>
            Identifies the Pane1 dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Pane1Length">
            <summary>
            Gets the calculated width (in wide mode) or height (in tall mode) of pane 1,
            or sets the GridLength value of pane 1.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Pane1LengthProperty">
            <summary>
            Identifies the Pane1Length dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Pane2">
            <summary>
            Gets or sets the content of pane 2.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Pane2Property">
            <summary>
            Identifies the Pane2 dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Pane2Length">
            <summary>
            Gets the calculated width (in wide mode) or height (in tall mode) of pane 2,
            or sets the GridLength value of pane 2.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.Pane2LengthProperty">
            <summary>
            Identifies the Pane2Length dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.PanePriority">
            <summary>
            Gets or sets a value that indicates which pane has priority.
            </summary>
            <remarks>
            The default is Pane1.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.PanePriorityProperty">
            <summary>
            Identifies the PanePriority dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.TallModeConfiguration">
            <summary>
            Gets or sets a value that indicates how panes are shown in tall mode.
            </summary>
            <remarks>
            The default is TopBottom.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.TallModeConfigurationProperty">
            <summary>
            Identifies the TallModeConfiguration dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.WideModeConfiguration">
            <summary>
            Gets or sets a value that indicates how panes are shown in wide mode.
            </summary>
            <remarks>
            The default is LeftRight.
            </remarks>
        </member>
        <member name="P:Microsoft.UI.Xaml.Controls.TwoPaneView.WideModeConfigurationProperty">
            <summary>
            Identifies the WideModeConfiguration dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.UI.Xaml.Controls.TwoPaneView.ModeChanged">
            <summary>
            Occurs when the Mode of the TwoPaneView has changed.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Controls.TwoPaneView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TwoPaneViewMode">
            <summary>
            Defines constants that specify how panes are shown in a TwoPaneView.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewMode.SinglePane">
            <summary>
            Only one pane is shown.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewMode.Wide">
            <summary>
            Panes are shown side-by-side.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewMode.Tall">
            <summary>
            Panes are shown top-bottom.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TwoPaneViewPriority">
            <summary>
            Defines constants that specify which pane has priority in a TwoPaneView.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewPriority.Pane1">
            <summary>
            Pane 1 has priority.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewPriority.Pane2">
            <summary>
            Pane 2 has priority.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration">
            <summary>
            Defines constants that specify how panes are shown in a TwoPaneView in tall mode.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration.SinglePane">
            <summary>
            Only the pane that has priority is shown, the other pane is hidden.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration.TopBottom">
            <summary>
            The pane that has priority is shown on top, the other pane is shown on the bottom.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration.BottomTop">
            <summary>
            The pane that has priority is shown on the bottom, the other pane is shown on top.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration">
            <summary>
            Defines constants that specify how panes are shown in a TwoPaneView in wide mode.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration.SinglePane">
            <summary>
            Only the pane that has priority is shown, the other pane is hidden.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration.LeftRight">
            <summary>
            The pane that has priority is shown on the left, the other pane is shown on the right.
            </summary>
        </member>
        <member name="F:Microsoft.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration.RightLeft">
            <summary>
            The pane that has priority is shown on the right, the other pane is shown on the left.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Automation.Peers.InfoBarAutomationPeer">
            <summary>
            Exposes InfoBar types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.InfoBarAutomationPeer.#ctor(Microsoft.UI.Xaml.Controls.InfoBar)">
            <summary>
            Initializes a new instance of the InfoBarAutomationPeer class.
            </summary>
            <param name="owner">The InfoBar control instance to create the peer for.</param>
        </member>
        <member name="T:Microsoft.UI.Xaml.Automation.Peers.RatingControlAutomationPeer">
            <summary>
            Exposes RatingControl types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.RatingControlAutomationPeer.#ctor(Microsoft.UI.Xaml.Controls.RatingControl)">
            <summary>
            Initializes a new instance of the RatingControlAutomationPeer class.
            </summary>
            <param name="owner">Rating control.</param>
        </member>
        <member name="T:Microsoft.UI.Xaml.Automation.Peers.TabViewAutomationPeer">
            <summary>
            Exposes TabView types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TabViewAutomationPeer.#ctor(Microsoft.UI.Xaml.Controls.TabView)">
            <summary>
            Initializes a new instance of the TabViewAutomationPeer class.
            </summary>
            <param name="owner">The TabView control instance to create the peer for.</param>
        </member>
        <member name="T:Microsoft.UI.Xaml.Automation.Peers.TabViewItemAutomationPeer">
            <summary>
            Exposes TabViewItem types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TabViewItemAutomationPeer.#ctor(Microsoft.UI.Xaml.Controls.TabViewItem)">
            <summary>
            Initializes an instance of TabViewItemAutomationPeer.
            </summary>
            <param name="owner">The TabViewItem control instance to create the peer for.</param>
        </member>
        <member name="T:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemAutomationPeer">
            <summary>
            Exposes TreeViewItem types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemAutomationPeer.#ctor(Microsoft.UI.Xaml.Controls.TreeViewItem)">
            <summary>
            Initializes a new instance of the TreeViewItemAutomationPeer class.
            </summary>
            <param name="owner">The TreeViewItem control instance to create the peer for.</param>
        </member>
        <member name="P:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemAutomationPeer.ExpandCollapseState">
            <summary>
            Gets a value indicating the expanded or collapsed state of the associated TreeViewItem.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemAutomationPeer.Collapse">
            <summary>
            Collapses the associated TreeViewItem.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemAutomationPeer.Expand">
            <summary>
            Expands the associated TreeViewItem.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemDataAutomationPeer">
            <summary>
            Exposes TreeViewItem data types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemDataAutomationPeer.#ctor(System.Object,Windows.UI.Xaml.Automation.Peers.ItemsControlAutomationPeer)">
            <summary>
            Initializes a new instance of the TreeViewItemDataAutomationPeer class.
            </summary>
            <param name="item">The TreeViewItem.</param>
            <param name="parent">The TreeViewList parent control instance for which to create the peer.</param>
        </member>
        <member name="P:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemDataAutomationPeer.ExpandCollapseState">
            <summary>
            Gets a value indicating the expanded or collapsed state of the associated TreeViewItemDataAutomationPeer.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemDataAutomationPeer.Collapse">
            <summary>
            Collapses the associated Microsoft.UI.Xaml.Automation.Peers.TreeViewItemDataAutomationPeer.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TreeViewItemDataAutomationPeer.Expand">
            <summary>
            Expands the associated Microsoft.UI.Xaml.Automation.Peers.TreeViewItemDataAutomationPeer.
            </summary>
        </member>
        <member name="T:Microsoft.UI.Xaml.Automation.Peers.TreeViewListAutomationPeer">
            <summary>
            Exposes TreeViewList types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:Microsoft.UI.Xaml.Automation.Peers.TreeViewListAutomationPeer.#ctor(Microsoft.UI.Xaml.Controls.TreeViewList)">
            <summary>
            Initializes a new instance of the TreeViewListAutomationPeer class.
            </summary>
            <param name="owner">The TreeViewList control instance to create the peer for.</param>
        </member>
        <member name="T:Microsoft.UI.NamespaceStub">
            <summary>
            This class is used to avoid missing namespace errors in UWP convertback mode.
            </summary>
        </member>
    </members>
</doc>
