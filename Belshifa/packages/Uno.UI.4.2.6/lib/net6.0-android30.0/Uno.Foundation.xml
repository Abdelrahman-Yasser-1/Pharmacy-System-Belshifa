<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Uno.Foundation</name>
    </assembly>
    <members>
        <member name="M:Windows.Foundation.AsyncOperationWithProgress`2.#ctor(Uno.FuncAsync{Windows.Foundation.AsyncOperationWithProgress{`0,`1},`0})">
            <inheritdoc />
        </member>
        <member name="P:Windows.Foundation.AsyncOperationWithProgress`2.Progress">
            <inheritdoc />
        </member>
        <member name="P:Windows.Foundation.AsyncOperationWithProgress`2.Completed">
            <inheritdoc />
        </member>
        <member name="F:Windows.Foundation.AsyncStatus.Completed">
            <summary>The operation has completed.</summary>
        </member>
        <member name="F:Windows.Foundation.AsyncStatus.Started">
            <summary>The operation has started.</summary>
        </member>
        <member name="F:Windows.Foundation.Collections.CollectionChange.Reset">
            <summary>
            The collection is changed.
            </summary>
        </member>
        <member name="F:Windows.Foundation.Collections.CollectionChange.ItemInserted">
            <summary>
            An item is added to the collection.
            </summary>
        </member>
        <member name="F:Windows.Foundation.Collections.CollectionChange.ItemRemoved">
            <summary>
            An item is removed from the collection.
            </summary>
        </member>
        <member name="F:Windows.Foundation.Collections.CollectionChange.ItemChanged">
            <summary>
            An item is changed in the collection.
            </summary>
        </member>
        <member name="E:Windows.Foundation.Collections.IObservableMap`2.MapChanged">
            <summary>Occurs when the map changes.</summary>
        </member>
        <member name="E:Windows.Foundation.Collections.IObservableVector.UntypedVectorChanged">
            <summary>
            Occurs when the vector changes.
            </summary>
        </member>
        <member name="E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged">
            <summary>
            Occurs when the vector changes.
            </summary>
        </member>
        <member name="P:Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange">
            <summary>
            Gets the type of change that occurred in the vector.
            </summary>
        </member>
        <member name="P:Windows.Foundation.Collections.IVectorChangedEventArgs.Index">
            <summary>
            Gets the position where the change occurred in the vector.
            </summary>
        </member>
        <member name="M:Windows.Foundation.Deferral.#ctor(Windows.Foundation.DeferralCompletedHandler)">
            <summary>
            Initializes a new Deferral object and specifies a DeferralCompletedHandler
            to be called upon completion of the deferral.
            </summary>
            <param name="handler">A DeferralCompletedHandler to be called upon completion of the deferral.</param>
        </member>
        <member name="M:Windows.Foundation.Deferral.Complete">
            <summary>
            If the DeferralCompletedHandler has not yet been invoked,
            this will call it and drop the reference to the delegate.
            </summary>
        </member>
        <member name="M:Windows.Foundation.Deferral.Dispose">
            <summary>
            Completes the deferral (calls <see cref="M:Windows.Foundation.Deferral.Complete" />).
            </summary>
        </member>
        <member name="T:Windows.Foundation.Gen2GcCallback">
            <summary>
            Schedules a callback roughly every gen 2 GC (you may see a Gen 0 an Gen 1 but only once)
            (We can fix this by capturing the Gen 2 count at startup and testing, but I mostly don't care)
            </summary>
        </member>
        <member name="M:Windows.Foundation.Gen2GcCallback.Register(System.Func{System.Boolean})">
            <summary>
            Schedule 'callback' to be called in the next GC.  If the callback returns true it is
            rescheduled for the next Gen 2 GC.  Otherwise the callbacks stop.
            </summary>
        </member>
        <member name="M:Windows.Foundation.Gen2GcCallback.Register(System.Func{System.Object,System.Boolean},System.Object)">
             <summary>
             Schedule 'callback' to be called in the next GC.  If the callback returns true it is
             rescheduled for the next Gen 2 GC.  Otherwise the callbacks stop.
            
             NOTE: This callback will be kept alive until either the callback function returns false,
             or the target object dies.
             </summary>
        </member>
        <member name="M:Windows.Foundation.Metadata.ApiInformation.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers an assembly as part of the Is*Present methods
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:Windows.Foundation.Metadata.ApiInformation.IsFailWhenNotImplemented">
            <summary>
            Determines if runtime use of not implemented members raises an exception, or logs an error message.
            </summary>
        </member>
        <member name="P:Windows.Foundation.Metadata.ApiInformation.AlwaysLogNotImplementedMessages">
            <summary>
            Determines if runtime use of not implemented members is logged only once, or at each use.
            </summary>
        </member>
        <member name="P:Windows.Foundation.Metadata.ApiInformation.NotImplementedLogLevel">
            <summary>
            The message log level used when a not implemented member is used at runtime, if <see cref="P:Windows.Foundation.Metadata.ApiInformation.IsFailWhenNotImplemented"/> is false.
            </summary>
        </member>
        <member name="P:Windows.Foundation.IPropertyValue.IsNumericScalar">
            <summary>Gets a value that indicates whether the property value is a scalar value.</summary>
            <returns>True if the value is scalar; otherwise false.</returns>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetDouble">
            <summary>Returns the floating-point value stored as a property value.</summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetChar16">
            <summary>Returns the Unicode character stored as a property value.</summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetBoolean">
            <summary>Returns the Boolean value stored as a property value.</summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetGuid">
            <summary>Returns the GUID value stored as a property value.</summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetDateTime">
            <summary>Returns the date and time value stored as a property value.</summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetUInt8Array(System.Byte[]@)">
            <summary>Returns the array of byte values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetInt16Array(System.Int16[]@)">
            <summary>Returns the array of integer values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetUInt16Array(System.UInt16[]@)">
            <summary>Returns the array of unsigned integer values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetInt32Array(System.Int32[]@)">
            <summary>Returns the array of integer values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetUInt32Array(System.UInt32[]@)">
            <summary>Returns the array of unsigned integer values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetInt64Array(System.Int64[]@)">
            <summary>Returns the array of integer values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetUInt64Array(System.UInt64[]@)">
            <summary>Returns the array of unsigned integer values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetSingleArray(System.Single[]@)">
            <summary>Returns the array of floating-point values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetStringArray(System.String[]@)">
            <summary>Returns the array of string values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetInspectableArray(System.Object[]@)">
            <summary>Returns the array of inspectable objects stored as a property value.</summary>
            <param name="value">The array of objects.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetTimeSpanArray(System.TimeSpan[]@)">
            <summary>Returns the array of time interval values stored as a property value.</summary>
            <param name="value">The array of values.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetPointArray(Windows.Foundation.Point[]@)">
            <summary>Returns the array of point structures stored as a property value.</summary>
            <param name="value">The array of structures.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetSizeArray(Windows.Foundation.Size[]@)">
            <summary>Returns the array of size structures stored as a property value.</summary>
            <param name="value">The array of structures.</param>
        </member>
        <member name="M:Windows.Foundation.IPropertyValue.GetRectArray(Windows.Foundation.Rect[]@)">
            <summary>Returns the array of rectangle structures stored as a property value.</summary>
            <param name="value">The array of structures.</param>
        </member>
        <member name="T:Windows.Foundation.PropertyValue">
            <summary>
            Represents a value in a property store (such as a PropertySet instance).
            </summary>
        </member>
        <member name="F:Windows.Foundation.HResult.Value">
            <summary>An integer that describes an error.</summary>
        </member>
        <member name="M:Windows.Foundation.IClosable.Close">
            <summary>Releases system resources that are exposed by a Windows Runtime object.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.UInt8">
            <summary>A byte.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Int16">
            <summary>A signed 16-bit (2-byte) integer.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.UInt16">
            <summary>An unsigned 16-bit (2-byte) integer.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Int32">
            <summary>A signed 32-bit (4-byte) integer.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.UInt32">
            <summary>An unsigned 32-bit (4-byte) integer.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Int64">
            <summary>A signed 64-bit (8-byte) integer.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.UInt64">
            <summary>An unsigned 64-bit (8-byte) integer.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Single">
            <summary>A signed 32-bit (4-byte) floating-point number.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.String">
            <summary>A Windows Runtime HSTRING.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Inspectable">
            <summary>An object implementing the IInspectable interface.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.TimeSpan">
            <summary>A time interval.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Guid">
            <summary>A globally unique identifier.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Point">
            <summary>An ordered pair of floating-point x- and y-coordinates that defines a point in a two-dimensional plane.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Size">
            <summary>An ordered pair of float-point numbers that specify a height and width.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Rect">
            <summary>A set of four floating-point numbers that represent the location and size of a rectangle.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.OtherType">
            <summary>A type not specified in this enumeration.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.DoubleArray">
            <summary>An array of Double values.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.Char16Array">
            <summary>An array of Char values.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.BooleanArray">
            <summary>An array of Boolean values.</summary>
        </member>
        <member name="F:Windows.Foundation.PropertyType.DateTimeArray">
            <summary>An array of DateTime values.</summary>
        </member>
        <member name="P:Windows.Foundation.Rect.IsInfinite">
            <summary>
            This indicates that this rect is equals to the <see cref="P:Windows.Foundation.Rect.Infinite"/>.
            Unlike the <see cref="P:Windows.Foundation.Rect.IsFinite"/>, this **DOES NOT** indicates that the rect is infinite on at least one of its axis.
            </summary>
        </member>
        <member name="P:Windows.Foundation.Rect.IsFinite">
            <summary>
            This make sure that this rect does not have any infinite value on any of its axis.
            </summary>
            <remarks>This is **NOT** the opposite of <see cref="P:Windows.Foundation.Rect.IsInfinite"/>.</remarks>
        </member>
        <member name="P:Windows.Foundation.Rect.IsValid">
            <summary>
            Indicates that this rect does not have any infinite or NaN on any on its axis.
            (I.e. it's a valid rect for standard layouting logic)
            </summary>
        </member>
        <member name="P:Windows.Foundation.Rect.Size">
            <summary>
            Provides the size of this rectangle.
            </summary>
            <remarks>This property is not provided by UWP, hence it is marked internal.</remarks>
        </member>
        <member name="P:Windows.Foundation.Rect.Location">
            <summary>
            Provides the location of this rectangle.
            </summary>
            <remarks>This property is not provided by UWP, hence it is marked internal.</remarks>
        </member>
        <member name="M:Windows.Foundation.Rect.Inflate(System.Double,System.Double)">
            <summary>Expands or shrinks the rectangle by using the specified width and height amounts, in all directions. </summary>
            <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
            <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
            <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
        </member>
        <member name="M:Windows.Foundation.Rect.Intersect(Windows.Foundation.Rect)">
            <summary>
            Finds the intersection of the rectangle represented by the current Windows.Foundation.Rect
            and the rectangle represented by the specified Windows.Foundation.Rect, and stores
            the result as the current Windows.Foundation.Rect.
            </summary>
            <remarks>
            Use .IntersectWith() extensions if you want a version without side-effects.
            </remarks>
            <param name="rect">The rectangle to intersect with the current rectangle.</param>
        </member>
        <member name="M:Windows.Foundation.Rect.Union(Windows.Foundation.Rect)">
            <summary>
            Finds the union of the rectangle represented by the current Windows.Foundation.Rect
            and the rectangle represented by the specified Windows.Foundation.Rect, and stores
            the result as the current Windows.Foundation.Rect.
            </summary>
            <param name="rect">The rectangle to union with the current rectangle.</param>
        </member>
        <member name="T:Uno.Foundation.Collections.NullableKeyDictionary`2">
            <summary>
            Represents a variant of dictionary that allows adding a value for a null key.
            </summary>
            <typeparam name="TKey">Key.</typeparam>
            <typeparam name="TValue">Value.</typeparam>
        </member>
        <member name="T:Uno.Foundation.Extensibility.ApiExtensibility">
            <summary>
            Registry for API existensibility providers, used to provide optional
            implementations for compatible parts of WinUI and WinRT APIs.
            </summary>
        </member>
        <member name="M:Uno.Foundation.Extensibility.ApiExtensibility.Register(System.Type,System.Func{System.Object,System.Object})">
            <summary>
            Registers an extension instance builder for the specified type
            </summary>
            <param name="type">The type to register</param>
            <param name="builder">A builder that will be provided an optional owner, and returns an instance of the extension</param>
            <remarks>This method is generally called automatically when the <see cref="T:Uno.Foundation.Extensibility.ApiExtensionAttribute"/> has been defined in an assembly.</remarks>
        </member>
        <member name="M:Uno.Foundation.Extensibility.ApiExtensibility.Register``1(System.Type,System.Func{``0,System.Object})">
            <summary>
            Registers an extension instance builder for the specified type with a strongly-typed owner.
            </summary>
            <typeparam name="TOwner">Type of owner.</typeparam>
            <param name="type">The type to register</param>
            <param name="builder">A builder that will be provided an optional owner, and returns an instance of the extension</param>
            <remarks>This method is generally called automatically when the <see cref="T:Uno.Foundation.Extensibility.ApiExtensionAttribute"/> has been defined in an assembly.</remarks>
        </member>
        <member name="M:Uno.Foundation.Extensibility.ApiExtensibility.CreateInstance``1(System.Object,``0@)">
            <summary>
            Creates an instance of an extension of the specified <typeparamref name="T"/> type
            </summary>
            <typeparam name="T">A registered type</typeparam>
            <param name="owner">An optional owner to be passed to the extension constructor</param>
            <param name="instance">The instance if the creation was successful</param>
            <returns>True if the creation suceeded, otherwise False.</returns>
        </member>
        <member name="T:Uno.Foundation.Extensibility.ApiExtensionAttribute">
            <summary>
            ApiExtension registration for the <see cref="T:Uno.Foundation.Extensibility.ApiExtensibility"/> class.
            </summary>
        </member>
        <member name="M:Uno.Foundation.Extensibility.ApiExtensionAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Creates an instance.
            </summary>
            <param name="extendedType">The type to extend</param>
            <param name="extensionType">The type to create an instance from</param>
        </member>
        <member name="P:Uno.Foundation.Extensibility.ApiExtensionAttribute.ExtensionType">
            <summary>
            The type to extend
            </summary>
        </member>
        <member name="P:Uno.Foundation.Extensibility.ApiExtensionAttribute.ExtendedType">
            <summary>
            The Type to create
            </summary>
        </member>
        <member name="T:Uno.UI.IndexPath">
            <summary>
            An index to an entry in a grouped items source.
            </summary>
        </member>
        <member name="M:Uno.Extensions.UriExtensions.GetExtension(System.Uri)">
            <summary>
            Get extension of the traget file of the uri.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.UriExtensions.EscapeDataString(System.String)">
            <summary>
            Converts a string to its escaped representation.
            This extension bypasses the Uri.EscapeDataString characters limit.
            </summary>
            Source: http://stackoverflow.com/questions/6695208/uri-escapedatastring-invalid-uri-the-uri-string-is-too-long
        </member>
        <member name="M:Uno.Extensions.JavaObjectExtensions.RunIfNativeInstanceAvailable``1(``0,System.Action{``0},System.String,System.Int32,System.String)">
            <summary>
            Runs the specified action if the native Java instance of the <paramref name="instance"/> is still available.
            </summary>
            <typeparam name="T">An <see cref="T:Android.Runtime.IJavaObject"/> instance.</typeparam>
            <param name="instance">The .NET instance to check</param>
            <param name="action">The action to execute if both the .NET instance and Java instance are available.</param>
        </member>
        <member name="T:Uno.Extensions.CollectionExtensions">
            <summary>
            Provides Extensions Methods for ICollection.
            </summary>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.AddNew``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Adds a new item with the default constructor
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the items of the specified collection to the end of the ICollection.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="collection">Collection in which to insert items.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.DisposableAdd``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item into the collection and returns an IDisposable which will remove the item when disposed.
            </summary>
            <typeparam name="T">Type of the items in collection</typeparam>
            <param name="collection"></param>
            <param name="item">The item to add</param>
            <returns>An IDisposable which will remove the item when disposed</returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes items in a collection that are identified with a predicate.
            </summary>
            <typeparam name="T">the type of the items</typeparam>
            <param name="collection">Collection in which to remove items.</param>
            <param name="predicate">The predicate used to identify if a item is to be removed or not.</param>
            <returns>Count of removed items</returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.ReplaceWith``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Replaces the items in a collection with a new set of items.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <param name="collection">The collection who's content will be replaced.</param>
            <param name="items">The replacing items.</param>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.AddDistinct``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to a collection if not already in it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item">Item to add</param>
            <returns>True if the item was added, else false.</returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.AddDistinct``1(System.Collections.Generic.ICollection{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Adds an item to a collection if not already in it using an EqualityComparer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item">Item to add</param>
            <param name="comparer">Equality comparer to use to determine if item is already in the collection</param>
            <returns>True if the item was added, else false.</returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.AddDistinct``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
            Adds an item to a collection if not already in it using a predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="item">Item to add</param>
            <param name="predicate">Predicate to use to determine if item is already in the collection</param>
            <returns>True if the item was added, else false.</returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.AddRangeDistinct``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds to a collection the items of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> which are not already in collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items">Items to add</param>
            <returns>Count of items added</returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.AddRangeDistinct``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Adds to a collection the items of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> which are not already in collection using an equlaity comparer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items">Items to add</param>
            <param name="comparer">Equality comparer to use to determine if an item is already in the collection</param>
            <returns>Count of items added</returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.AddRangeDistinct``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Adds to a collection the items of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> which are not already in collection using an equlaity comparer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items">Items to add</param>
            <param name="comparer">Predicate to use to determine if an item is already in the collection</param>
            <returns>Count of items added</returns>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.SelectToArray``2(``0[],System.Func{``0,``1})">
            <summary>
            Projects the specified array to another array.
            </summary>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.SelectToArray``2(``0[],System.Func{``0,System.Int32,``1})">
            <summary>
            Projects the specified array to another array, using the item index.
            </summary>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.SelectToArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            Projects the specified collection to an array.
            </summary>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.ToRangeArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Create an array from a portion of another array, as a faster equivalent of .Skip().Take().ToArray().
            </summary>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.SelectToList``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            Projects the specified collection to a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <remarks>This method can be useful when the enumeation of the result requires less allocations.(see <see cref="T:System.Collections.Generic.List`1.Enumerator"/>)</remarks>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.SelectToList``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Projects the specified collection to a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <remarks>This method can be useful when the enumeation of the result requires less allocations.(see <see cref="T:System.Collections.Generic.List`1.Enumerator"/>)</remarks>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.SelectToList``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            Projects a <see cref="T:System.Collections.Generic.List`1"/>. to an other <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <remarks>This method can be useful when the enumeation of the result requires less allocations.(see <see cref="T:System.Collections.Generic.List`1.Enumerator"/>)</remarks>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.SelectToList``2(System.Collections.Generic.List{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects the specified <see cref="T:System.Collections.Generic.List`1"/> to an other <see cref="T:System.Collections.Generic.List`1"/> with an index.
            </summary>
            <remarks>This method can be useful when the enumeation of the result requires less allocations.(see <see cref="T:System.Collections.Generic.List`1.Enumerator"/>)</remarks>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.WhereToList``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the specified <see cref="T:System.Collections.Generic.List`1"/> using a predicate.
            </summary>
            <remarks>This method can be useful when the enumeation of the result requires less allocations.(see <see cref="T:System.Collections.Generic.List`1.Enumerator"/>)</remarks>
        </member>
        <member name="M:Uno.Extensions.CollectionExtensions.ToRangeList``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:System.Collections.Generic.List`1"/> from a portion of another <see cref="T:System.Collections.Generic.List`1"/>, as a faster equivalent of .Skip().Take().ToList().
            </summary>
            <remarks>This method can be useful when the enumeation of the result requires less allocations.(see <see cref="T:System.Collections.Generic.List`1.Enumerator"/>)</remarks>
        </member>
        <member name="M:Uno.Extensions.DictionaryExtensions.UnoGetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key, or a default value.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">Default value if the key does not exsists in dictionary</param>
            <returns>the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</returns>
        </member>
        <member name="M:Uno.Extensions.DictionaryExtensions.UnoGetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key, or a default value.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">Default value if the key does not exsists in dictionary</param>
            <returns>the value associated with the specified key, if the key is found; otherwise, the <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="T:Uno.Extensions.EnumerableExtensions">
            <summary>
            Provides Extensions Methods for IEnumerable.
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Append an item at the end of an enumeration
            </summary>
            <remarks>
            Use .Prepend() to inject before the enumeration
            </remarks>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.PrependEx``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Add an item who will be enumerated first before the real enumeration
            </summary>
            <remarks>
            Use .Concat() to inject at the end of the enumeration
            </remarks>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Exclude some items from an enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="items">Items to exclude</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Exclude some items from an enumeration using an equality comparer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="equalityComparer">Equality comparer to use to compare items between enumerations</param>
            <param name="items">Items to exclude</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.AreDistinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if all element in the enumeration are disctinct.
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.AreDistinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Check if all element in the enumeration are distinct.
            </summary>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds an item in the sequence for which a projected value is minimized.
            </summary>
            <typeparam name="TSource">Sequence type.</typeparam>
            <typeparam name="TComparable">Projected value type.</typeparam>
            <param name="source">The sequence of items.</param>
            <param name="selector">Function which projects the sequence into a comparable value.</param>
            <returns>A tuple containing the minimum item and its projected value. If multiple items have the same projected value, this will return the first.</returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds an item in the sequence for which a projected value is maximized.
            </summary>
            <typeparam name="TSource">Sequence type.</typeparam>
            <typeparam name="TComparable">Projected value type.</typeparam>
            <param name="source">The sequence of items.</param>
            <param name="selector">Function which projects the sequence into a comparable value.</param>
            <returns>A tuple containing the maximum item and its projected value. If multiple items have the same projected value, this will return the first.</returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Range``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Takes "before" item and "after" item around the "start" item
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Intercept enumerated elements. SEE REMARKS FOR USAGE!
            </summary>
            <remarks>
            This method is not doing the enumeration,
            only intercept it when an enumeration occurs.
            </remarks>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Trim``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove null values while enumerating
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Trim``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>
            Remove null values while enumerating
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Safe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Prevent null enumeration.
            When null, it's replaced with an empty enumeration of the same type.
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.StdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculate a Standard Deviation over an enumerator of values.
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.Flatten``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerate the item first, followed by items of the predicate
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.AllEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Check if all items of an enumerable are equals, using an optional comparer
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.AllTrue(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether all elements of a sequence are true.
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.AllTrueOrDefault(System.Collections.Generic.IEnumerable{System.Boolean},System.Boolean)">
            <summary>
            Determines whether all elements of a sequence are true.
            </summary>
            <param name="defaultValue">Default value if source is null or empty</param>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.AnyTrue(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Determines whether any element of a sequence is true.
            </summary>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.AnyTrueOrDefault(System.Collections.Generic.IEnumerable{System.Boolean},System.Boolean)">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="defaultValue">Default value if source is null or empty</param>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.ConsecutiveValueCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Count number of consecutive equals values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.ToDictionaryDistinct``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> with unique keys from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function, and an element selector function.
            </summary>
            <typeparam name="TSource">Type of the source enumerable</typeparam>
            <typeparam name="TKey">Type of the keys of the result dictionary</typeparam>
            <typeparam name="TValue">Type of the value of the result dictionary</typeparam>
            <param name="source">Source enuemrable</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="valueSelector">A transform function to produce a result element value from each element.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type TElement selected from the input sequence.</returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.ToDictionaryDistinct``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> with unique keys from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <typeparam name="TSource">Type of the source enumerable</typeparam>
            <typeparam name="TKey">Type of the keys of the result dictionary</typeparam>
            <typeparam name="TValue">Type of the value of the result dictionary</typeparam>
            <param name="source">Source enuemrable</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="valueSelector">A transform function to produce a result element value from each element.</param>
            <param name="equalityComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type TElement selected from the input sequence.</returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.ToDictionaryDistinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> with unique keys from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function.
            </summary>
            <typeparam name="TSource">Type of the source enumerable and values of the result dictionary</typeparam>
            <typeparam name="TKey">Type of the keys of the result dictionary</typeparam>
            <param name="source">Source enuemrable</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type TElement selected from the input sequence.</returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.ToDictionaryDistinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> with unique keys from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function, and a comparer.
            </summary>
            <typeparam name="TSource">Type of the source enumerable and values of the result dictionary</typeparam>
            <typeparam name="TKey">Type of the keys of the result dictionary</typeparam>
            <param name="source">Source enuemrable</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="equalityComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type TElement selected from the input sequence.</returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Creates a Dictionary&lt;TKey,IEnumerable&lt;TSource&gt;&gt; from an IEnumerable&lt;IGrouping&lt;TSource&gt;&gt;;
            </summary>
            <typeparam name="TKey">Type of the keys of the result dictionary</typeparam>
            <typeparam name="TValue">Type of the value of the result dictionary</typeparam>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a Dictionary&lt;TKey,IEnumerable&lt;TSource&gt;&gt; from an IEnumerable&lt;IGrouping&lt;TSource&gt;&gt;;
            </summary>
            <typeparam name="TKey">Type of the keys of the result dictionary</typeparam>
            <typeparam name="TValue">Type of the value of the result dictionary</typeparam>
            <param name="equalityComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.FullOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},``0,``1,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys, including items without pair from both sides.
            </summary>
            <typeparam name="T1">The type of the elements of the first sequence.</typeparam>
            <typeparam name="T2">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="left">The first sequence to join.</param>
            <param name="right">The second sequence to join.</param>
            <param name="leftKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="rightKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="projection">A function to create a result element from two elements.</param>
            <param name="defaultLeft">The default value to use to invoke <paramref name="projection"/> when there is no matching element in first sequence.</param>
            <param name="defaultRight">The default value to use to invoke <paramref name="projection"/> when there is no matching element in second sequence.</param>
            <param name="keyComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to hash and compare keys.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has elements of type <typeparamref name="TResult"/> that are obtained by performing a full outer join on two sequences.</returns>
        </member>
        <member name="M:Uno.Extensions.EnumerableExtensions.SelectManyUntyped``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.IEnumerable})">
            <summary>
            A SelectMany that returns a non-generic IEnumerable.
            </summary>
        </member>
        <member name="P:Uno.Extensions.GroupDescriptor`2.Required">
            <summary> Group need to be there even if group is empty </summary>
        </member>
        <member name="T:Uno.Extensions.Specialized.EnumerableExtensions">
            <summary>
            Provides Extensions Methods for IEnumerable.
            </summary>
        </member>
        <member name="M:Uno.Extensions.Specialized.EnumerableExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Apply an action for every item of an enumerable
            </summary>
            <remarks>
            This method allows looping on every item of the source without enumerating it
            If enumeration is not a concern, you should avoid using this method if you're doing fuctionnal or declarative programming.
            </remarks>
        </member>
        <member name="T:Uno.Extensions.ListExtensions">
            <summary>
            Provides Extensions Methods for IList
            </summary>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a readonly instance of the specified list.
            </summary>
            <typeparam name="T">The type of the IList</typeparam>
            <param name="items">The list</param>
            <returns>A readonly instance of the specified list.</returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.AddOrReplaceRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the items of the specified collection to the end of the ICollection, but only if they
            are not already present.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="list">List in which to insert items.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.AddOrReplaceRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Adds the items of the specified collection to the end of the ICollection, 
            and updates existing items if they are found by the predicate
            </summary>
            <typeparam name="T">List type</typeparam>
            <param name="list"></param>
            <param name="items"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.RemoveAllAt``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Remove all items after <paramref name="index"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.Replace``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Replace some items in a list using a selector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="selector">Select items that have to be replaced</param>
            <param name="replacement">Teh remplacement item</param>
            <returns>Number of items replaced</returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.ToDivergentEnumerable``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by enumerating the given list both backwards and forwards, starting at the given index
            </summary>
            <param name="list">List to enumerate</param>
            <param name="startingAt">Index to start enumerating from</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.ToDivergentEnumerable``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by enumerating the given list both backwards and forwards, starting at the given index
            </summary>
            <param name="list">List to enumerate</param>
            <param name="startingAt">Index to start enumerating from</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.ContainsIndex``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets wether a list contains a given index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">List to test</param>
            <param name="index">Index to search</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.ContainsIndex``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            Gets wether a list contains a given index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">List to test</param>
            <param name="index">Index to search</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.FindNearestItem``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Returns the nearest item satisfying the given predicate in the list, starting at the given index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">List to search</param>
            <param name="predicate">A function to test each element for a condition</param>
            <param name="startingAt">Index to start searching from</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.FindNearestItem``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Returns the nearest item satisfying the given predicate in the list, starting at the given index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">List to search</param>
            <param name="predicate">A function to test each element for a condition</param>
            <param name="startingAt">Index to start searching from</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.IndexOf(System.Collections.IList,System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="list">The source list to look into.</param>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <param name="comparer">The comparer to use to locate the <paramref name="value" />.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Uno.Extensions.ListExtensions.SequenceKeyEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether two lists are key-equal, using the default <see cref="T:Uno.Equality.KeyEqualityComparer"/> for <see cref="T:Uno.Equality.IKeyEquatable"/>.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="first">The first list.</param>
            <param name="second">The second list.</param>
            <returns>True if the two source lists are of equal length and their corresponding elements are key-equal; otherwise false.</returns>
        </member>
        <member name="M:Uno.Extensions.ObservableCollectionExtensions.Update``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Updates an ObservableCollection using the provided enumerable, resulting in equal sequences.
            </summary>
            <param name="collection">The collection to update</param>
            <param name="updated">The enumerable to update from</param>
            <param name="tryDispose">Tells the method to try disposing removed items and new items that were not added.
            <param name="comparer"></param>
            <em>ONLY PASS true WHEN USING DIFFERENT INSTANCES THAT USE EQUALS TO MATCH EXISTING INSTANCES. Matching items are not compared by reference.</em></param>
            <remarks>If items come from an AVVM, make sure it's not configured to automatically dispose all previous items. Otherwise, this extension
            will keep items in the collection that are getting disposed by the AVVM.</remarks>
        </member>
        <member name="M:Uno.Extensions.ObservableCollectionExtensions.UpdateWithResults``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Updates an ObservableCollection using the provided enumerable, resulting in equal sequences.
            </summary>
            <param name="collection">The collection to update</param>
            <param name="updated">The enumerable to update from</param>
            <param name="tryDispose">Tells the method to try disposing removed items and new items that were not added.
            <param name="comparer"></param>
            <em>ONLY PASS true WHEN USING DIFFERENT INSTANCES THAT USE EQUALS TO MATCH EXISTING INSTANCES. Matching items are not compared by reference.</em></param>
            <remarks>If items come from an AVVM, make sure it's not configured to automatically dispose all previous items. Otherwise, this extension
            will keep items in the collection that are getting disposed by the AVVM.</remarks>
            <returns>A instance of <see cref="T:Uno.Extensions.ObservableCollectionUpdateResults`1"/> which details what the update has done.</returns>
        </member>
        <member name="M:Uno.Extensions.ObservableCollectionExtensions.UpdateAsync``1(System.Collections.Generic.IList{``0},System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Updates an ObservableCollection using the provided enumerable, resulting in equal sequences. For any item that was
            kept for an equal new instance, UpdateAsync is called if it implements IUpdatable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="ct"></param>
            <param name="updated"></param>
            <param name="tryDispose"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ObservableCollectionExtensions.InternalUpdate``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Private version for having a single implementation of adds, removes and updates, but be able to plug async IUpdatable.UpdateAsync call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="updated"></param>
            <param name="tryDispose"></param>
            <param name="needKept">If true, returns kept item pairs. New items that were kept are <em>NOT</em> disposed.
            We assume the caller will perform the async update, then dispose NewItem.</param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Uno.Extensions.ObservableCollectionUpdateResults`1">
            <summary>
            Provides the results of a call to <see cref="M:Uno.Extensions.ObservableCollectionExtensions.UpdateWithResults``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})"/> 
            with details about what what was added, moved and removed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Uno.Extensions.ObservableCollectionUpdateResults`1.Added">
            <summary>
            Gets the added items
            </summary>
        </member>
        <member name="P:Uno.Extensions.ObservableCollectionUpdateResults`1.Moved">
            <summary>
            Gets the moved items
            </summary>
        </member>
        <member name="P:Uno.Extensions.ObservableCollectionUpdateResults`1.Removed">
            <summary>
            Gets the removed items
            </summary>
        </member>
        <member name="T:Uno.Extensions.ActionAsyncExtensions">
            <summary>
            Extensions of <see cref="T:Uno.ActionAsync"/>
            </summary>
        </member>
        <member name="M:Uno.Extensions.ActionAsyncExtensions.SafeInvoke(Uno.ActionAsync,System.Threading.CancellationToken)">
            <summary>
            Invoke the <paramref name="action"/> if not null.
            </summary>
            <param name="action">Action to invoke</param>
            <param name="ct">A CanellationToken</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ActionAsyncExtensions.SafeInvoke``1(Uno.ActionAsync{``0},System.Threading.CancellationToken,``0)">
            <summary>
            Invoke the <paramref name="action"/> if not null.
            </summary>
            <param name="action">Action to invoke</param>
            <param name="ct">A CanellationToken</param>
            <param name="param">Parameter of action</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.DoubleExtensions.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the value between a minimum and maximum (clamping means limiting to a certain range)
            </summary>
            <param name="valueToClamp">value to clamp</param>
            <param name="minimum">minimal value possible</param>
            <param name="maximum">maximum value possible</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.DoubleExtensions.RoundAwayFromZero(System.Double)">
            <summary>
            When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.DoubleExtensions.EnsureNumber(System.Double,System.Double)">
            <summary>
            Returns a specified fallback if double is NaN
            </summary>
            <param name="value"></param>
            <param name="targetValueIfNan"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.EnumHelper.GetNames``1">
            <summary>
            This is an alternative to Enum.GetNames() who is faster because are
            not sorting the results
            </summary>
            <remarks>
            The result order is the same than EnumHelper.GetValues().
            Note: Considerer using memoization if called often.
            </remarks>
        </member>
        <member name="M:Uno.Extensions.EnumHelper.GetValues``1">
            <summary>
            This is an alternative to Enum.GetValues() who is faster because are
            not sorting the results.
            </summary>
            <remarks>
            The result order is the same than EnumHelper.GetNames().
            Note: Considerer using memoization if called often.
            </remarks>
        </member>
        <member name="M:Uno.Extensions.FuncExtensions.ApplyMemoized``2(``0,System.Func{``0,``1})">
            <summary>
            Invokes the specified selector on the specified source. The result of the computation will be memoized for the specified source.
            </summary>
            <remarks>
            This method uses the selector instance to associate the results to the source instance. 
            Make sure to use a stable instance, e.g. not a lambda with closures over local or instance variables.
            </remarks>
            <typeparam name="TSource">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the computation result</typeparam>
            <param name="source">The source instance.</param>
            <param name="selector">The method group to use.</param>
            <returns>The memoized result</returns>
        </member>
        <member name="M:Uno.Extensions.FuncExtensions.ApplyMemoized``3(``0,System.Func{``0,``2,``1},``2)">
            <summary>
            Invokes the specified selector on the specified source, with the specified parameter. The result of the computation will be memoized for the specified source and parameter.
            </summary>
            <remarks>
            This method uses the selector instance to associate the results to the source instance. 
            Make sure to use a stable instance, e.g. not a lambda with closures over local or instance variables.
            </remarks>
            <typeparam name="TSource">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the computation result</typeparam>
            <typeparam name="TParam">A parameter to pass the selector call</typeparam>
            <param name="source">The source instance.</param>
            <param name="selector">The method group to use.</param>
            <returns>The memoized result</returns>
        </member>
        <member name="M:Uno.Extensions.FuncExtensions.ApplyMemoized``4(``0,System.Func{``0,``2,``3,``1},``2,``3)">
            <summary>
            Invokes the specified selector on the specified source, with the specified parameters. The result of the computation will be memoized for the specified source and parameters.
            </summary>
            <remarks>
            This method uses the selector instance to associate the results to the source instance. 
            Make sure to use a stable instance, e.g. not a lambda with closures over local or instance variables.
            </remarks>
            <typeparam name="TSource">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the computation result</typeparam>
            <typeparam name="TParam1">A parameter to pass the selector call</typeparam>
            <typeparam name="TParam2">A parameter to pass the selector call</typeparam>
            <param name="source">The source instance.</param>
            <param name="selector">The method group to use.</param>
            <returns>The memoized result</returns>
        </member>
        <member name="M:Uno.Extensions.FuncExtensions.AsWeakMemoized``2(System.Func{``0,``1},``0)">
            <summary>
            Creates a func that invokes the specified selector on the specified source. The result of the computation will be memoized for the specified source.
            </summary>
            <typeparam name="TSource">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the computation result</typeparam>
            <param name="source">The source instance.</param>
            <param name="selector">The method group to use.</param>
            <returns>A function that will return the memoized result</returns>
        </member>
        <member name="M:Uno.Extensions.FuncExtensions.AsWeakMemoized``3(System.Func{``0,``2,``1},``0)">
            <summary>
            Creates a func that invokes the specified selector on the specified source, with the specified parameter. The result of the computation will be memoized for the specified source and parameter.
            </summary>
            <typeparam name="TSource">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the computation result</typeparam>
            <typeparam name="TParam">A parameter to pass the selector call</typeparam>
            <param name="source">The source instance.</param>
            <param name="selector">The method group to use.</param>
            <returns>A function that will return the memoized result</returns>
        </member>
        <member name="M:Uno.Extensions.FuncExtensions.AsWeakMemoized``4(System.Func{``0,``2,``3,``1},``0)">
            <summary>
            Creates a func that invokes the specified selector on the specified source, with the specified parameters. The result of the computation will be memoized for the specified source and parameters.
            </summary>
            <typeparam name="TSource">The type of the parameter</typeparam>
            <typeparam name="TResult">The type of the computation result</typeparam>
            <typeparam name="TParam1">A parameter to pass the selector call</typeparam>
            <typeparam name="TParam2">A parameter to pass the selector call</typeparam>
            <param name="selector">The method group to use.</param>
            <param name="source">The source instance.</param>
            <returns>A function that will return the memoized result</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a parameter-less memoizer for the the specified task provider. The task provider is guaranteed to be executed only once.
            </summary>
            <typeparam name="T">The return value type</typeparam>
            <param name="func">A function that will call the create the task.</param>
            <returns>A function that will return a task </returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``1(Uno.FuncAsync{``0})">
            <summary>
            Creates a parameter-less memoizer for the the specified task provider. The task provider is guaranteed to be executed only once.
            </summary>
            <typeparam name="T">The return value type</typeparam>
            <param name="func">A function that will call the create the task.</param>
            <returns>A function that will return a task </returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``2(Uno.FuncAsync{``0,``1})">
            <summary>
            Creates a memoizer with one parameter for the the specified task provider. The task provider is guaranteed to be executed only once per parameter instance.
            </summary>
            <typeparam name="TResult">The return value type</typeparam>
            <typeparam name="TParam"></typeparam>
            <param name="func">A function that will call the create the task.</param>
            <returns>A function that will return a task </returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``1(System.Func{``0})">
            <summary>
            Parameter less memoizer, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="T">The return type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``2(System.Func{``0,``1})">
            <summary>
            Memoizer with one parameter, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="TParam">The return type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``3(System.Func{``0,``1,``2})">
            <summary>
            Memoizer with two parameters, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="TParam1">The first parameter type to memoize</typeparam>
            <typeparam name="TParam2">The second parameter type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Memoizer with three parameters, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="TParam1">The first parameter type to memoize</typeparam>
            <typeparam name="TParam2">The second parameter type to memoize</typeparam>
            <typeparam name="TParam3">The third parameter type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Memoizer with four parameters, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="TParam1">The first parameter type to memoize</typeparam>
            <typeparam name="TParam2">The second parameter type to memoize</typeparam>
            <typeparam name="TParam3">The third parameter type to memoize</typeparam>
            <typeparam name="TParam4">The fourth parameter type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsMemoized``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Memoizer with five parameters, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="TParam1">The first parameter type to memoize</typeparam>
            <typeparam name="TParam2">The second parameter type to memoize</typeparam>
            <typeparam name="TParam3">The third parameter type to memoize</typeparam>
            <typeparam name="TParam4">The fourth parameter type to memoize</typeparam>
            <typeparam name="TParam5">The fifth parameter type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsLockedMemoized``1(System.Func{``0})">
            <summary>
            Parameter less thread-safe memoizer, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="T">The return type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsLockedMemoized``2(System.Func{``0,``1})">
            <summary>
            Memoizer with one parameter, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="T">The return type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsLockedMemoized``3(System.Func{``0,``1,``2})">
            <summary>
            Memoizer with two parameters, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="T">The return type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsLockedMemoized``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Memoizer with three parameters, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="T">The return type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="M:Uno.Extensions.FuncMemoizeExtensions.AsLockedMemoized``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Memoizer with four parameters, used to perform a lazy-cached evaluation. (see http://en.wikipedia.org/wiki/Memoization)
            </summary>
            <typeparam name="T">The return type to memoize</typeparam>
            <param name="func">the function to evaluate</param>
            <returns>A memoized value</returns>
        </member>
        <member name="T:Uno.Extensions.MatchExtensions">
            <summary>
            Provide extentions for the System.Text.RegularExpressions.Match class
            </summary>
        </member>
        <member name="M:Uno.Extensions.MatchExtensions.AsEnumerable(System.Text.RegularExpressions.Match)">
            <summary>
            Converts a Regular Expression Match instance to an enumerable of Regular Expression Match instances
            </summary>
            <param name="match">A Regular Expression Match instance</param>
            <returns>An enumerable of matches</returns>
        </member>
        <member name="M:Uno.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads the text container into the specified stream.
            </summary>
            <param name="stream"></param>
            <returns>The string using the default encoding.</returns>
            <remarks>The stream will be disposed when calling this method.</remarks>
        </member>
        <member name="M:Uno.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads the text container into the specified stream.
            </summary>
            <param name="stream"></param>
            <returns>The string using the default encoding.</returns>
            <remarks>The stream will be disposed when calling this method.</remarks>
        </member>
        <member name="M:Uno.Extensions.StreamExtensions.StartsWith(System.IO.Stream,System.Byte[])">
            <summary>
            Warning, if stream cannot be seek, will read from current position!
            Warning, stream position will not been restored!
            </summary>
            <param name="stream"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.StreamExtensions.ToMemoryStream(System.IO.Stream)">
            <summary>
            Create a MemoryStream, copy <see cref="!:source"/> to it, and set position to 0.
            </summary>
            <param name="source">Stream to copy</param>
            <returns>Newly created memory stream, position set to 0</returns>
        </member>
        <member name="M:Uno.Extensions.StreamExtensions.ToSeekable(System.IO.Stream)">
            <summary>
            Check if <see cref="!:stream"/> is seekable (CanSeek), if not copy it to a MemoryStream. 
            WARNING: Some stream (like UnmanagedMemoryStream) return CanSeek = true but are not seekable. Prefer using ToMemoryStream() to be 100% safe.
            </summary>
            <param name="stream">A stream</param>
            <returns>A seekable stream (orginal if seekable, a MemoryStream copy of <see cref="!:stream"/> else)</returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Check if the specified string occures in the current System.String object. A parameter specifies the type of search to use for the specified string.
            </summary>
            <param name="instance"></param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.IsNumber(System.String)">
            <summary>
            Check if every characters in the string is considered as a "Unicode Number". WARNING: READ REMARKS!!
            </summary>
            <remarks>
             In addition to including digits, numbers include characters, fractions, subscripts, superscripts,
            Roman numerals, currency numerators, and encircled numbers. This method contrasts with the IsDigit
            method, which determines whether a Char is a radix-10 digit.
            </remarks>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.IsDigit(System.String)">
            <summary>
            Check if every characters in the string is considered as a "Unicode Decimal Digit". (char 0-9)
            </summary>
            <remarks>
            This contrasts with IsNumber, which determines whether a Char is of any numeric Unicode category.
            Numbers include characters such as fractions, subscripts, superscripts, Roman numerals,
            currency numerators, encircled numbers, and script-specific digits.
            </remarks>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns a string that contains a specified number of characters from the left side of a string.
            </summary>
            <param name="instance"><see cref="T:System.String"/> expression from which the leftmost characters are returned.</param>
            <param name="length"><see cref="T:System.Int32"/> expression. Numeric expression indicating how many characters to return.</param>
            <returns>If zero, a zero-length string ("") is returned. If greater than or equal to the number of characters in value, the complete string is returned.</returns>
            <exception cref="T:System.ArgumentException">length &lt; 0</exception>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the right side of a string.
            </summary>
            <param name="instance"><see cref="T:System.String"/> expression from which the rightmost characters are returned.</param>
            <param name="length"><see cref="T:System.Int32"/> expression. Numeric expression indicating how many characters to return.</param>
            <returns>If zero, a zero-length string ("") is returned. If greater than or equal to the number of characters in value, the complete string is returned.</returns>
            <exception cref="T:System.ArgumentException">length &lt; 0</exception>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.LeftRightInternal(System.String,System.Int32,System.Func{System.String})">
            <summary>
            Returns a string that contains a specified number of characters of a string.
            </summary>
            <param name="instance"><see cref="T:System.String"/> expression from which the characters are returned.</param>
            <param name="length"><see cref="T:System.Int32"/> expression. Numeric expression indicating how many characters to return.</param>
            <param name="predicate">Func <see cref="T:System.String"/> expression that returns the substring.</param>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.Append(System.String,System.String)">
            <summary>
            Append a chunk at the end of a string
            </summary>
            <param name="target">target string object</param>
            <param name="chunk">Chunk to add</param>
            <returns>New string with the chunk at appended at the end.</returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.Append(System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Append a chunk at the end of a string only if the condition is met.
            </summary>
            <param name="target">target string object</param>
            <param name="chunk">Chunk to add</param>
            <param name="condition">Condition to meet for the chunk to be added</param>
            <returns>New string with the chunk at appended at the end or original string if condition is not met.</returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.AppendIfMissing(System.String,System.String)">
            <summary>
            Append a chunk at the end of a string only if the string doen't end by it.
            </summary>
            <param name="target">target string object</param>
            <param name="chunk">Chunk to add</param>
            <returns>New string with the chunk at appended at the end or the original string if the target already end by chunk.</returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.TrimStart(System.String,System.String)">
            <summary>
            Removes all leading occurrences of <see cref="!:trimText"/> from the current System.String object
            </summary>
            <param name="trimText">A string to remove</param>
            <returns>The string that remains after all occurrences of the <see cref="!:trimText"/> are removed from the start of the current string.</returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Removes all trailing occurrences of <see cref="!:trimText"/> from the current System.String object
            </summary>
            <param name="trimText">A string to remove</param>
            <returns>The string that remains after all occurrences of the <see cref="!:trimText"/> are removed from the end of the current string.</returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.UppercaseFirst(System.String)">
            <summary>
            Uppercases the first character of the string.
            If the string is <c>null</c> or <c>""</c> then it returns <c>string.Empty</c>
            </summary>
            <param name="s">The string.</param>
            <returns>The string where the first character is in uppercase or <c>string.Empty</c> if the string is <c>null</c> or <c>""</c></returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Removes diacritics (e.g. accents) from a given string.
            </summary>
            <param name="s">The string.</param>
            <returns>The string without diacritics, e.g. Montréal to Montreal, or <c>string.Empty</c> if the string is <c>null</c> or <c>""</c>.</returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            Improves upon <see cref="M:System.String.Format(System.String,System.Object[])"/> to allow a 4th and 5th
            group in numerical custom formats, for values 1 and -1. See <see cref="M:Uno.Extensions.StringExtensions.Format(System.IFormatProvider,System.String,System.Object[])"/>
            for details.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.StringExtensions.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Improves upon <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> to allow a 4th and 5th
            group in numerical custom formats, for values 1 and -1. Just like the 3rd group, which applies to value 0,
            these groups will get used if the first group (positive) or second group (negative) would display the same
            string as if 1 or -1 was the argument. For example, given the en-US culture, the "{0:C;C;broke;a buck}"
            format would display "$1.42" for value 1.42, display "broke" for values 0, -0.004 or 0.003, and display
            "a buck" for values 0.995, 1 or 1.0025.
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.DateTimeExtensions.FromUnixTimeSeconds(System.Int64,System.TimeSpan)">
            <summary>
            Creates a DateTimeOffset from a standard Unix timestamp and offset
            </summary>
            <param name="seconds">Number of seconds since the 1970/01/01 00:00 UTC</param>
            <param name="offset">Offset of the DateTimeOffset</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.DateTimeExtensions.FromUnixTimeMilliseconds(System.Int64,System.TimeSpan)">
            <summary>
            Creates a DateTimeOffset from a standard Unix timestamp and offset
            </summary>
            <param name="seconds">Number of seconds since the 1970/01/01 00:00 UTC</param>
            <param name="offset">Offset of the DateTimeOffset</param>
            <returns></returns>
        </member>
        <member name="P:Uno.Extensions.IIndentedStringBuilder.CurrentLevel">
            <summary>
            Gets the current indentation level
            </summary>
        </member>
        <member name="M:Uno.Extensions.IIndentedStringBuilder.Append(System.String)">
            <summary>
            Appends text using the current indentation level
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Uno.Extensions.IIndentedStringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends formatted text using the current indentation level
            </summary>
        </member>
        <member name="M:Uno.Extensions.IIndentedStringBuilder.AppendLine">
            <summary>
            Appends a line using the current indentation level 
            </summary>
        </member>
        <member name="M:Uno.Extensions.IIndentedStringBuilder.AppendLine(System.String)">
            <summary>
            Writes the provided text and adds line using the current indentation level 
            </summary>
        </member>
        <member name="M:Uno.Extensions.IIndentedStringBuilder.Block(System.Int32)">
            <summary>
            Creates an indentation block
            </summary>
            <param name="count">The indentation level of the new block.</param>
            <returns>A disposable that will close the block</returns>
        </member>
        <member name="M:Uno.Extensions.IIndentedStringBuilder.Block(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Creates an indentation block, e.g. using a C# curly braces.
            </summary>
            <returns>A disposable that will close the block</returns>
        </member>
        <member name="M:Uno.Extensions.IIndentedStringBuilder.Indent(System.Int32)">
            <summary>
            Adds an indentation 
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.IIndentedStringBuilder.ToString">
            <summary>
            Provides a string representing the complete builder.
            </summary>
        </member>
        <member name="T:Uno.Extensions.IndentedStringBuilder">
            <summary>
            A C# code indented builder.
            </summary>
        </member>
        <member name="M:Uno.Extensions.IndentedStringBuilder.AppendLine">
            <summary>
            Appends a newline.
            </summary>
            <remarks>
            This method presents correct behavior, as opposed to its <see cref="M:Uno.Extensions.IndentedStringBuilder.AppendLine(System.String)"/>
            overload. Therefore, this method should be used whenever a newline is desired.
            </remarks>
        </member>
        <member name="M:Uno.Extensions.IndentedStringBuilder.AppendLine(System.String)">
            <summary>
            Appends the given string, *without* appending a newline at the end.
            </summary>
            <param name="text">The string to append.</param>
            <remarks>
            Even though this method seems like it appends a newline, it doesn't. To append a
            newline, call <see cref="M:Uno.Extensions.IndentedStringBuilder.AppendLine"/> after this method, as the parameterless
            overload has the correct behavior.
            </remarks>
        </member>
        <member name="M:Uno.Extensions.ObjectExtensions.Apply``2(``0,System.Func{``0,``1})">
            <summary>
            A helper method to allow for locally defined extension-method like methods. Avoids the creation of an external static class
            in the context of fluent expressions.
            </summary>
        </member>
        <member name="M:Uno.Extensions.ObjectExtensions.Apply``1(``0,System.Action{``0})">
            <summary>
            A helper method that allows the execution of an action in a fluent expression.
            </summary>
            <param name="action">The action to execute on the source object</param>
            <returns>The source instance</returns>
        </member>
        <member name="M:Uno.Extensions.ObjectExtensions.Apply``1(``0,System.Boolean,System.Action{``0})">
            <summary>
            A helper method that allows the execution of an action in a fluent expression. The action will be executed if the condition is true.
            </summary>
            <param name="condition">A boolean value that indicates if the action should be executed.</param>
            <param name="action">The action to execute, the parameter will contain source</param>
            <returns>Returns the source instance</returns>
        </member>
        <member name="M:Uno.Extensions.ObjectExtensions.IsOneOf``1(``0,``0[])">
            <summary>
            Gets a boolean value that determines if a specific value is within a list of accepted values.
            Use this when it's not necessary or when it's overkill to declare the list of accepted values
            as a readonly field. For example, can be used to check if one enum value is within a set without that
            enum being marked as [Flags].
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source">The source value.</param>
            <param name="acceptedValues">The list of accepted values.</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.ObjectExtensions.IsOneOf``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Gets a boolean value that determines if a specific value is within a list of accepted values.
            Use this when it's not necessary or when it's overkill to declare the list of accepted values
            as a readonly field. For example, can be used to check if one enum value is within a set without that
            enum being marked as [Flags].
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source">The source value.</param>
            <param name="comparer">The comparer to use to determine equality.</param>
            <param name="acceptedValues">The list of accepted values.</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Extensions.TypeExtensions.GetAllInterfaces(System.Type)">
            <summary>
            Recursively get all interfaces of a type
            </summary>
        </member>
        <member name="M:Uno.Extensions.TypeExtensions.GetBaseTypes(System.Type)">
            <summary>
            Gets the inheritance hierarchy of supplied type.
            </summary>
        </member>
        <member name="M:Uno.Extensions.TypeExtensions.EnumerableOf(System.Type)">
            <summary>
            Determine if <see cref="!:type"/> implements IEnumerable&lt;T&gt;.
            </summary>
            <returns>The type of ITEM or null if <see cref="!:type"/> is not IEnumerable</returns>
        </member>
        <member name="M:Uno.Extensions.TypeExtensions.GetFlattenedDeclaredProperty(System.Type,System.String)">
            <summary>
            Gets the declared property by searching the flattened hierarchy.
            </summary>
            <param name="type">The type to search into</param>
            <param name="name">The name of the declared property</param>
            <returns>The property info if found, otherwise null.</returns>
        </member>
        <member name="M:Uno.Extensions.TypeExtensions.GetFlattenedDeclaredField(System.Type,System.String)">
            <summary>
            Gets the declared field by searching the flattened hierarchy.
            </summary>
            <param name="type">The type to search into</param>
            <param name="name">The name of the declared field</param>
            <returns>The field info if found, otherwise null.</returns>
        </member>
        <member name="M:Uno.Extensions.TypeExtensions.IsNullableCached(System.Type)">
            <summary>
            Returns a cached result of the the IsNullable method, as it works
            in O(n) where n is the depth of the hierarchy.
            </summary>
        </member>
        <member name="M:Uno.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Gets whether null can be assigned to a variable of the given <see cref="!:type"/>
            </summary>
            <param name="type">The type on which to test nullability</param>
            <returns></returns>
        </member>
        <member name="T:Uno.Extensions.FuncAsyncExtensions">
            <summary>
            Extensions of <see cref="!:FuncAsync"/>.
            </summary>
        </member>
        <member name="M:Uno.Extensions.FuncAsyncExtensions.SafeInvoke``1(Uno.FuncAsync{``0},System.Threading.CancellationToken)">
            <summary>
            Invoke the <paramref name="func"/> if not null.
            </summary>
            <param name="func">Func to invoke</param>
            <param name="ct">A CanellationToken</param>
            <returns>The result of func, or default(TResult) if the func was null.</returns>
        </member>
        <member name="M:Uno.Extensions.FuncAsyncExtensions.SafeInvoke``2(Uno.FuncAsync{``0,``1},System.Threading.CancellationToken,``0)">
            <summary>
            Invoke the <paramref name="func"/> if not null.
            </summary>
            <param name="func">Func to invoke</param>
            <param name="ct">A CanellationToken</param>
            <param name="param">Parameter of func</param>
            <returns>The result of func, or default(TResult) if the func was null.</returns>
        </member>
        <member name="M:Uno.Extensions.FuncAsyncExtensions.LockInvocation``1(Uno.FuncAsync{``0},Uno.Extensions.InvocationLockingMode)">
            <summary>
            Prevents parallel execution of the FuncAsync
            </summary>
            <param name="func">Func to lock</param>
            <param name="mode">Mode to use for locking</param>
            <returns>A FuncAsync which cannot have nmultiple instance running at a same time</returns>
        </member>
        <member name="M:Uno.Extensions.FuncAsyncExtensions.LockInvocation``2(Uno.FuncAsync{``0,``1},Uno.Extensions.InvocationLockingMode)">
            <summary>
            Prevents parallel execution of the FuncAsync for a SAME PARAMETER
            </summary>
            <param name="func">Func to lock</param>
            <param name="mode">Mode to use for locking FOR A SAME PARAMETER</param>
            <returns>A FuncAsync which cannot have nmultiple instance running at a same time</returns>
        </member>
        <member name="T:Uno.Extensions.InvocationLockingMode">
            <summary>
            Modes for asynchronous action / func invocation lock
            </summary>
        </member>
        <member name="F:Uno.Extensions.InvocationLockingMode.Serial">
            <summary>
            Invocations are queued and sequencially
            </summary>
        </member>
        <member name="F:Uno.Extensions.InvocationLockingMode.Share">
            <summary>
            Invocation re-use result of any pending running instance
            </summary>
        </member>
        <member name="M:Uno.FoundationFeatureConfiguration.RestoreDefaults">
            <summary>
            Used by tests cleanup to restore the default configuration for other tests!
            </summary>
        </member>
        <member name="P:Uno.FoundationFeatureConfiguration.Rect.AllowNegativeWidthHeight">
            <summary>
            If this flag is set to true, the <see cref="T:Windows.Foundation.Rect"/> won't throw an exception
            if it's been created with a negative width / height.
            This should be kept to `true` until https://github.com/unoplatform/uno/issues/606 get fixed.
            </summary>
            <remarks>This hides some errors from invalid measure/arrange which have to be fixed!</remarks>
        </member>
        <member name="M:Uno.Client.ICommandExtensions.ExecuteIfPossible(System.Windows.Input.ICommand,System.Object)">
            <summary>
            Executes the command if CanExecute returns true.
            </summary>
            <param name="command">The command</param>
            <param name="parameter">The parameter to use with the execution</param>
        </member>
        <member name="T:Uno.NotImplementedAttribute">
            <summary>
            Marks a member or symbol as not implemented by Uno.
            </summary>
        </member>
        <member name="M:Uno.NotImplementedAttribute.#ctor">
            <summary>
            Creates an instance
            </summary>
        </member>
        <member name="M:Uno.NotImplementedAttribute.#ctor(System.String[])">
            <summary>
            Creates an instance with C# constants for which the symbol is not implemented.
            </summary>
            <param name="platforms">The list of not-implemented platforms</param>
        </member>
        <member name="P:Uno.NotImplementedAttribute.Platforms">
            <summary>
            The list of platforms that are not implemented. When empty, all platforms are not implemented.
            </summary>
        </member>
        <member name="T:Uno.UnoOnlyAttribute">
            <summary>
            This member is only available in Uno and not part of the UWP/WinUI contract.
            </summary>
        </member>
        <member name="T:Uno.IUpdatable`1">
            <summary>
            Identifies an object that can get refreshed from another object of the same type. 	/// 
            </summary>
            <typeparam name="T"></typeparam>
            <remarks> This is useful for items bound to the view. When a newer instance with its Equals
            returning true for the old item comes in play, the old item is kept, but updated from that
            new instance.</remarks>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.SelectToSpan``2(System.Collections.Generic.List{``0},System.Span{``1},System.Func{``0,``1})">
            <summary>
            Selects the values of a <see cref="T:System.Collections.Generic.List`1"/> to a pre-allocated <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TIn">The input type</typeparam>
            <typeparam name="TOut">The output type</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to be projected</param>
            <param name="span">The output span</param>
            <param name="selector">A selector method that projects <typeparamref name="TIn"/> to <typeparamref name="TOut"/></param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.SelectToSpan``2(System.Span{``0},System.Span{``1},System.Func{``0,``1})">
            <summary>
            Selects the values of a <see cref="T:System.Span`1"/> to a pre-allocated <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TIn">The input type</typeparam>
            <typeparam name="TOut">The output type</typeparam>
            <param name="list">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="span">The output span</param>
            <param name="selector">A selector method that projects <typeparamref name="TIn"/> to <typeparamref name="TOut"/></param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.SelectToSpan``2(System.Span{``0},System.Span{``1},System.Func{``0,System.Int32,``1})">
            <summary>
            Selects the values of a <see cref="T:System.Span`1"/> to a pre-allocated <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TIn">The input type</typeparam>
            <typeparam name="TOut">The output type</typeparam>
            <param name="list">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="span">The output span</param>
            <param name="selector">A selector method that projects <typeparamref name="TIn"/> to <typeparamref name="TOut"/> with the index of the value to project</param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.SelectToSpan``2(``0[],System.Span{``1},System.Func{``0,``1})">
            <summary>
            Selects the values of a <see cref="T:System.Array"/> to a pre-allocated <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TIn">The input type</typeparam>
            <typeparam name="TOut">The output type</typeparam>
            <param name="list">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="span">The output span</param>
            <param name="selector">A selector method that projects <typeparamref name="TIn"/> to <typeparamref name="TOut"/></param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.WhereToSpan``1(System.Span{``0},System.Span{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the values of a <see cref="T:System.Span`1"/> to a pre-allocated <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TValue">The type of values to filter</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="target">The output span</param>
            <param name="predicate">A predicate to filter the values</param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.SelectToMemory``2(System.Span{``0},System.Func{``0,``1})">
            <summary>
            Selects the values of a <see cref="T:System.Span`1"/> to a new <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="TIn">The input type</typeparam>
            <typeparam name="TOut">The output type</typeparam>
            <param name="list">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="span">The output span</param>
            <param name="selector">A selector method that projects <typeparamref name="TIn"/> to <typeparamref name="TOut"/></param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.SelectToMemory``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Selects the values of a <see cref="T:System.Collections.Generic.IList`1"/> to a new <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="TIn">The input type</typeparam>
            <typeparam name="TOut">The output type</typeparam>
            <param name="list">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="span">The output span</param>
            <param name="selector">A selector method that projects <typeparamref name="TIn"/> to <typeparamref name="TOut"/></param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.WhereToMemory``1(System.Span{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the values of a <see cref="T:System.Span`1"/> to a new <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="TValue">The type of values to filter</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="predicate">A predicate to filter the values</param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.WhereToMemory``1(System.Span{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters the values of a <see cref="T:System.Span`1"/> to a new <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="TValue">The type of values to filter</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="predicate">A predicate to filter the values with the index of the value to filter</param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.WhereToMemory``2(System.Span{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            Filters the values of a <see cref="T:System.Span`1"/>, then projects the values to a new <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="TValue">The type of values to filter</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to be projected</param>
            <param name="predicate">A predicate to filter the values with the index of the value to filter</param>
            <param name="selector">A selector method that projects <typeparamref name="TValue"/> to <typeparamref name="TResult"/></param>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.Count``1(System.Span{``0},System.Func{``0,System.Boolean})">
            <summary>
            Provides a Count of values given a predicate
            </summary>
            <typeparam name="T">The type of the values</typeparam>
            <param name="span">The span to count the values in</param>
            <param name="predicate">The predicate to filter the values</param>
            <returns>The count of values</returns>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.Any``1(System.Span{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines if the provided span contains values given a predicate
            </summary>
            <typeparam name="T">The type of the values</typeparam>
            <param name="span">The span to analyze</param>
            <param name="predicate">The predicate to filter the values</param>
            <returns><c>true</c> if the predicate returned true, otherwise <c>false</c></returns>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.ToDictionary``3(System.Span{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.Dictionary`2"/> from the values of a span.
            </summary>
            <param name="span">The input span</param>
            <param name="keySelector">The selector to create a key of the dictionary</param>
            <param name="valueSelector">The selector to create the value with the corresponding key</param>
            <returns>A new <see cref="T:System.Collections.Generic.Dictionary`2"/></returns>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.Sum(System.Span{System.Double})">
            <summary>
            Computes the sum of all the values of a <see cref="T:System.Span`1"/> where <c>T</c> is a double
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.Sum``1(System.Span{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the sum of all the values of a <see cref="T:System.Span`1"/>, using a predicate to get each value.
            </summary>
            <typeparam name="TIn"></typeparam>
            <param name="span">The span to use</param>
            <param name="selector">A selector to get the value</param>
            <returns>The sum of all the projected values</returns>
        </member>
        <member name="M:Uno.Collections.MemoryExtensions.SliceClamped``1(System.Span{``0},System.Int32,System.Int32)">
            <summary>
            Creates a slice for which the <paramref name="start"/> and <paramref name="range"/> are clamped to the size of <paramref name="span"/>.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="span">The span to slice</param>
            <param name="start">The starting index</param>
            <param name="range">The length of the slice</param>
            <returns>A slice of the source span</returns>
        </member>
        <member name="T:Uno.Collections.UnsafeWeakAttachedDictionary`2">
            <summary>
            A dictionary of values that live as long as the owner is alive. This class is not-threadsafe and must always be used for the same thread.
            </summary>
            <typeparam name="TOwner">The type of the owner</typeparam>
            <typeparam name="TKey">The key type</typeparam>
        </member>
        <member name="M:Uno.Collections.UnsafeWeakAttachedDictionary`2.GetValue``1(`0,`1,System.Func{``0})">
            <summary>
            Gets the value associated with the specified key, for the specified owner instance.
            </summary>
            <param name="owner">The owner instance for the specified key</param>
            <param name="key">The key to get</param>
            <param name="defaultSelector">The selector called when the value does not exist for the specified owner. Otherwise, default(TValue) is used.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Uno.Collections.UnsafeWeakAttachedDictionary`2.SetValue``1(`0,`1,``0)">
            <summary>
            Sets the value for the specified key, for the specified owner.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="owner"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Uno.Collections.UnsafeWeakAttachedDictionary`2.GetValuesForOwner(`0)">
            <summary>
            Get the values dictionary for the specified owner
            </summary>
            <param name="owner">The owner of the values</param>
            <returns>A values dictionary</returns>
        </member>
        <member name="M:Uno.Collections.UnsafeWeakAttachedDictionary`2.CopyValues(`0,`0)">
            <summary>
            Copies all values from one owner to another.
            </summary>
            <param name="existingOwner">The <typeparamref name="TOwner"/> to take values from.</param>
            <param name="newOwner">The <typeparamref name="TOwner"/> to assign values to.</param>
        </member>
        <member name="T:Uno.Collections.WeakAttachedDictionary`2">
            <summary>
            A dictionary of values that live as long as the owner is alive. This class is thread-safe.
            </summary>
            <typeparam name="TOwner">The type of the owner</typeparam>
            <typeparam name="TKey">The key type</typeparam>
        </member>
        <member name="M:Uno.Collections.WeakAttachedDictionary`2.GetValue``1(`0,`1,System.Func{``0})">
            <summary>
            Gets the value associated with the specified key, for the specified owner instance.
            </summary>
            <param name="owner">The owner instance for the specified key</param>
            <param name="key">The key to get</param>
            <param name="defaultSelector">The selector called when the value does not exist for the specified owner. Otherwise, default(TValue) is used.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Uno.Collections.WeakAttachedDictionary`2.GetValue``1(`0,`1,System.Func{`1,``0})">
            <summary>
            Gets the value associated with the specified key, for the specified owner instance.
            </summary>
            <param name="owner">The owner instance for the specified key</param>
            <param name="key">The key to get</param>
            <param name="defaultSelector">The selector called when the value does not exist for the specified owner. Otherwise, default(TValue) is used.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Uno.Collections.WeakAttachedDictionary`2.SetValue``1(`0,`1,``0)">
            <summary>
            Sets the value for the specified key, for the specified owner.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="owner"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Uno.Collections.WeakAttachedDictionary`2.CopyValues(`0,`0)">
            <summary>
            Copies all values from one owner to another.
            </summary>
            <param name="existingOwner">The <typeparamref name="TOwner"/> to take values from.</param>
            <param name="newOwner">The <typeparamref name="TOwner"/> to assign values to.</param>
        </member>
        <member name="T:Uno.Collections.ImmutableList`1">
            <summary>
            An immutable list implementation, designed for safe concurrent access.
            </summary>
            <remarks>
            It is possible to mutate the content of this immutable list. Not all
            protections are in place to ensure a perfect immutability. Don't use it
            if you are exposing it outside your code. For true immutability
            protection, you should prefer those from Micrososft's Immutable Collections.
            </remarks>
        </member>
        <member name="P:Uno.Collections.ImmutableList`1.Empty">
            <summary>
            Provides an empty list
            </summary>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.#ctor">
            <summary>
            Creates an empty list
            </summary>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.#ctor(`0[],System.Boolean)">
            <summary>
            Initializes the list with the provided array.
            </summary>
            <param name="data">An array as source</param>
            <param name="copyData">If the array should be copied</param>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes the list with the provided array.
            </summary>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.RemoveAll(System.Predicate{`0})">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.SetItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.Add(`0)">
            <summary>
            Returns a new list with the specifed value appended at the end.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.Remove(`0)">
            <summary>
            Returns a new list with specified value removed.
            </summary>
            <param name="value">The value to remove</param>
            <returns>A new list</returns>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.Contains(`0)">
            <summary>
            Determines whether the list contains a specified element
            </summary>
            <param name="value">The value to locate.</param>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index to remove</param>
            <returns>A new list with the item removed</returns>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified value
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Uno.Collections.ImmutableList`1.Data">
            <summary>
            The underlying data available for thread-safe access
            </summary>
            <remarks>
            Please, don't mutate it! There's not protection against this.
            </remarks>
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Uno.Collections.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Uno.Collections.ImmutableList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Uno.Collections.ImmutableList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Uno.Disposables.AnonymousDisposable">
            <summary>
            Represents an Action-based disposable.
            </summary>
        </member>
        <member name="M:Uno.Disposables.AnonymousDisposable.#ctor(System.Action)">
            <summary>
            Constructs a new disposable with the given action used for disposal.
            </summary>
            <param name="dispose">Disposal action which will be run upon calling Dispose.</param>
        </member>
        <member name="P:Uno.Disposables.AnonymousDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="M:Uno.Disposables.AnonymousDisposable.Dispose">
            <summary>
            Calls the disposal action if and only if the current instance hasn't been disposed yet.
            </summary>
        </member>
        <member name="T:Uno.Disposables.CancellationDisposable">
            <summary>
            Represents a disposable resource that has an associated <seealso cref="T:System.Threading.CancellationToken"/> that will be set to the cancellation requested state upon disposal.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CancellationDisposable.#ctor(System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.CancellationDisposable"/> class that uses an existing <seealso cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
            <param name="cts"><seealso cref="T:System.Threading.CancellationTokenSource"/> used for cancellation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cts"/> is null.</exception>
        </member>
        <member name="M:Uno.Disposables.CancellationDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.CancellationDisposable"/> class that uses a new <seealso cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="P:Uno.Disposables.CancellationDisposable.Token">
            <summary>
            Gets the <see cref="T:System.Threading.CancellationToken"/> used by this CancellationDisposable.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CancellationDisposable.Dispose">
            <summary>
            Cancels the underlying <seealso cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="P:Uno.Disposables.CancellationDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:Uno.Disposables.CompositeDisposable">
            <summary>
            Represents a group of disposable resources that are disposed together.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.CompositeDisposable"/> class with no disposables contained by it initially.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.CompositeDisposable"/> class with the specified number of disposables.
            </summary>
            <param name="capacity">The number of disposables that the new CompositeDisposable can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.CompositeDisposable"/> class from a group of disposables.
            </summary>
            <param name="disposables">Disposables that will be disposed together.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> is null.</exception>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.CompositeDisposable"/> class from a group of disposables.
            </summary>
            <param name="disposables">Disposables that will be disposed together.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> is null.</exception>
        </member>
        <member name="P:Uno.Disposables.CompositeDisposable.Count">
            <summary>
            Gets the number of disposables contained in the CompositeDisposable.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.Add(System.IDisposable)">
            <summary>
            Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
            </summary>
            <param name="item">Disposable to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.Remove(System.IDisposable)">
            <summary>
            Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
            </summary>
            <param name="item">Disposable to remove.</param>
            <returns>true if found; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.Dispose">
            <summary>
            Disposes all disposables in the group and removes them from the group.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.Clear">
            <summary>
            Removes and disposes all disposables from the CompositeDisposable, but does not dispose the CompositeDisposable.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.Contains(System.IDisposable)">
            <summary>
            Determines whether the CompositeDisposable contains a specific disposable.
            </summary>
            <param name="item">Disposable to search for.</param>
            <returns>true if the disposable was found; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
            <summary>
            Copies the disposables contained in the CompositeDisposable to an array, starting at a particular array index.
            </summary>
            <param name="array">Array to copy the contained disposables to.</param>
            <param name="arrayIndex">Target index at which to copy the first disposable of the group.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero. -or - <paramref name="arrayIndex"/> is larger than or equal to the array length.</exception>
        </member>
        <member name="P:Uno.Disposables.CompositeDisposable.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CompositeDisposable.
            </summary>
            <returns>An enumerator to iterate over the disposables.</returns>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the CompositeDisposable.
            </summary>
            <returns>An enumerator to iterate over the disposables.</returns>
        </member>
        <member name="P:Uno.Disposables.CompositeDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="M:Uno.Disposables.CompositeDisposableExtensions.Add(Uno.Disposables.CompositeDisposable,System.Action)">
            <summary>
            Adds an action to be executed when the CompositeDisposable is disposed.
            </summary>
            <param name="disposable">The composite disposable instance</param>
            <param name="action">The action to execute</param>
            <returns>The source composite disposable</returns>
        </member>
        <member name="T:Uno.Disposables.ConditionalDisposable">
            <summary>
            A disposable that can call an action when a dependent object has been collected.
            </summary>
        </member>
        <member name="M:Uno.Disposables.ConditionalDisposable.#ctor(System.Object,System.WeakReference)">
            <summary>
            Creates a <see cref="T:Uno.Disposables.ConditionalDisposable"/> instance using 
            <paramref name="target"/> as a reference for its lifetime.
            </summary>
            <param name="conditionSource">An optional secondary reference, used to avoid calling action if it has been collected</param>
            <param name="target">The instance to use to keep the disposable alive</param>
        </member>
        <member name="T:Uno.Disposables.DefaultDisposable">
            <summary>
            Represents a disposable that does nothing on disposal.
            </summary>
        </member>
        <member name="F:Uno.Disposables.DefaultDisposable.Instance">
            <summary>
            Singleton default disposable.
            </summary>
        </member>
        <member name="M:Uno.Disposables.DefaultDisposable.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Uno.Disposables.Disposable">
            <summary>
            Provides a set of static methods for creating Disposables.
            </summary>
        </member>
        <member name="P:Uno.Disposables.Disposable.Empty">
            <summary>
            Gets the disposable that does nothing when disposed.
            </summary>
        </member>
        <member name="M:Uno.Disposables.Disposable.Create(System.Action)">
            <summary>
            Creates a disposable object that invokes the specified action when disposed.
            </summary>
            <param name="dispose">Action to run during the first call to <see cref="M:System.IDisposable.Dispose"/>. The action is guaranteed to be run at most once.</param>
            <returns>The disposable object that runs the given action upon disposal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dispose"/> is null.</exception>
        </member>
        <member name="M:Uno.Disposables.DisposableExtensions.DisposeWith``1(``0,System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>
            Register an object who implements IDisposable to be disposed by a CompositeDisposable.
            </summary>
            <remarks>
            The parameter could be anything who implements ICollection&lt;IDisposable&gt;.
            This extension is designed for usage in a fluent declaration.
            </remarks>
        </member>
        <member name="M:Uno.Disposables.DisposableExtensions.DisposeWith``1(``0,Uno.Disposables.SerialDisposable)">
            <summary>
            Register an object who implements IDisposable to be disposed by a SerialDisposable.
            </summary>
            <remarks>
            This extension is designed for usage in a fluent declaration.
            </remarks>
        </member>
        <member name="M:Uno.Disposables.DisposableExtensions.SafeDispose(System.IDisposable)">
            <summary>
            Dispose the object if not null
            </summary>
        </member>
        <member name="M:Uno.Disposables.DisposableExtensions.TryDispose(System.Object)">
            <summary>
            Dispose the object if not null and if it implements IDisposable
            </summary>
            <returns>
            True means the object was successfully disposed.
            </returns>
        </member>
        <member name="M:Uno.Disposables.DisposableExtensions.DisposeAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Dispose all items of an enumerable sequence
            <remarks>IF one dispose fails, continue other an raise a single Aggregate exception</remarks>
            </summary>
            <exception cref="T:System.AggregateException">Raised if any dispose fails</exception>
        </member>
        <member name="T:Uno.Disposables.ICancelable">
            <summary>
            Disposable resource with dipsosal state tracking.
            </summary>
        </member>
        <member name="P:Uno.Disposables.ICancelable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:Uno.Disposables.IExtensibleDisposable">
            <summary>
            Represents a disposable object on which some external disposables can be linked to, in order to share its lifetime.
            <remarks>
            Default implementation:<br />
            <br />
            private readonly CompositeDisposable _subscriptions = new CompositeDisposable();<br />
            public IDisposable RegisterExtension(IDisposable disposable) => _subscriptions.DisposableAdd(disposable);<br />
            public void Dispose() => _subscriptions.Dispose();
            </remarks>
            </summary>
        </member>
        <member name="P:Uno.Disposables.IExtensibleDisposable.Extensions">
            <summary>
            Currently registered extensions
            </summary>
            <remarks>
            To get a known service, use Extensions.<see cref="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)"/>.
            </remarks>
        </member>
        <member name="M:Uno.Disposables.IExtensibleDisposable.RegisterExtension``1(``0)">
            <summary>
            Registers an extension and links its lifetime (disposal) with the lifetime of the extended disposable
            </summary>
            <remarks>
            The extension will be disposed with the extended disposable or when it's unregistered.
            To unregister, dispose the returned disposable.  You can discard the
            returned disposable if you're not planning to unregister the extension.
            </remarks>
        </member>
        <member name="T:Uno.Disposables.RefCountDisposable">
            <summary>
            Represents a disposable resource that only disposes its underlying disposable resource when all <see cref="M:Uno.Disposables.RefCountDisposable.GetDisposable">dependent disposable objects</see> have been disposed.
            </summary>
        </member>
        <member name="F:Uno.Disposables.RefCountDisposable._count">
            <summary>
            Holds the number of active child disposables and the
            indicator bit (31) if the main _disposable has been marked
            for disposition.
            </summary>
        </member>
        <member name="M:Uno.Disposables.RefCountDisposable.#ctor(System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.RefCountDisposable"/> class with the specified disposable.
            </summary>
            <param name="disposable">Underlying disposable.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposable"/> is null.</exception>
        </member>
        <member name="M:Uno.Disposables.RefCountDisposable.#ctor(System.IDisposable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.RefCountDisposable"/> class with the specified disposable.
            </summary>
            <param name="disposable">Underlying disposable.</param>
            <param name="throwWhenDisposed">Indicates whether subsequent calls to <see cref="M:Uno.Disposables.RefCountDisposable.GetDisposable"/> should throw when this instance is disposed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposable"/> is null.</exception>
        </member>
        <member name="P:Uno.Disposables.RefCountDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="M:Uno.Disposables.RefCountDisposable.GetDisposable">
            <summary>
            Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
            </summary>
            <returns>A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed and is configured to throw in this case by <see cref="M:Uno.Disposables.RefCountDisposable.#ctor(System.IDisposable,System.Boolean)"/>.</exception>
        </member>
        <member name="M:Uno.Disposables.RefCountDisposable.Dispose">
            <summary>
            Disposes the underlying disposable only when all dependent disposables have been disposed.
            </summary>
        </member>
        <member name="T:Uno.Disposables.SerialDisposable">
            <summary>
            Represents a disposable resource whose underlying disposable resource can be replaced by another disposable resource, causing automatic disposal of the previous underlying disposable resource.
            </summary>
        </member>
        <member name="M:Uno.Disposables.SerialDisposable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Uno.Disposables.SerialDisposable"/> class.
            </summary>
        </member>
        <member name="P:Uno.Disposables.SerialDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="P:Uno.Disposables.SerialDisposable.Disposable">
            <summary>
            Gets or sets the underlying disposable.
            </summary>
            <remarks>If the SerialDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object. Assigning this property disposes the previous disposable object.</remarks>
        </member>
        <member name="M:Uno.Disposables.SerialDisposable.Dispose">
            <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
        </member>
        <member name="T:Uno.NullDisposable">
            <summary>
            An empty implementation of the IDisposable class.
            </summary>
        </member>
        <member name="F:Uno.NullDisposable.Instance">
            <summary>
            Provider for a instance of the NullDisposable
            </summary>
        </member>
        <member name="M:Uno.NullDisposable.#ctor">
            <summary>
            Private constructor, use Instance.
            </summary>
        </member>
        <member name="M:Uno.NullDisposable.Dispose">
            <summary>
            See IDisposable.
            </summary>
        </member>
        <member name="T:Uno.Equality.CollectionEqualityComparer`1">
            <summary>
            An EqualityComparre which compare sequence of items
            </summary>
        </member>
        <member name="M:Uno.Equality.CollectionEqualityComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            ctor
            </summary>
            <param name="comparer">Comparer to use to compare each item</param>
        </member>
        <member name="M:Uno.Equality.CollectionEqualityComparer`1.Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Uno.Equality.CollectionEqualityComparer`1.GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Uno.Equality.IKeyEquatable">
            <summary>
            Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of version of instances.
            </summary>
        </member>
        <member name="M:Uno.Equality.IKeyEquatable.GetKeyHashCode">
            <summary>
            Gets the hash code of the key of this object.
            </summary>
            <returns>A hash code for the current object's key.</returns>
        </member>
        <member name="M:Uno.Equality.IKeyEquatable.KeyEquals(System.Object)">
            <summary>
            Indicates whether the key of current object is equal to another object's key of the same type.
            </summary>
            <param name="other">The object to compare with this object.</param>
            <returns>True is the current object is another version of the <paramref name="other"/> parameter; otherwise false</returns>
        </member>
        <member name="T:Uno.Equality.IKeyEquatable`1">
            <summary>
            Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of version of instances.
            </summary>
        </member>
        <member name="M:Uno.Equality.IKeyEquatable`1.GetKeyHashCode">
            <summary>
            Gets the hash code of the key of this object.
            </summary>
            <returns>A hash code for the current object's key.</returns>
        </member>
        <member name="M:Uno.Equality.IKeyEquatable`1.KeyEquals(`0)">
            <summary>
            Indicates whether the key of current object is equal to another object's key of the same type.
            </summary>
            <param name="other">The object to compare with this object.</param>
            <returns>True is the current object is another version of the <paramref name="other"/> parameter; otherwise false</returns>
        </member>
        <member name="T:Uno.Equality.KeyEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> which compares the key of the objects.
            </summary>
            <remarks>
            For this comparer, the compared objects MUST IMPLEMENT <see cref="T:Uno.Equality.IKeyEquatable"/> (the non-generic version)
            i.e. **not <see cref="T:Uno.Equality.IKeyEquatable`1"/>**
            </remarks>
        </member>
        <member name="P:Uno.Equality.KeyEqualityComparer.Default">
            <summary>
            Gets the default instance of the <see cref="T:Uno.Equality.KeyEqualityComparer"/>.
            </summary>
        </member>
        <member name="T:Uno.Equality.KeyEqualityComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> which compares the key of the objects.
            </summary>
            <typeparam name="T">Type of the object to compare</typeparam>
        </member>
        <member name="P:Uno.Equality.KeyEqualityComparer`1.Default">
            <summary>
            Gets the default instance of the <see cref="T:Uno.Equality.KeyEqualityComparer`1"/>.
            </summary>
        </member>
        <member name="M:Uno.Equality.KeyEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:Uno.Equality.KeyEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc />
        </member>
        <member name="M:Uno.Core.Equality.EqualityComparerExtensions.ToEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Create a non-generic <see cref="T:System.Collections.IEqualityComparer"/> from a generic version.
            </summary>
        </member>
        <member name="T:Uno.Core.Comparison.FastTypeComparer">
            <summary>
            A fast type comparer for dictionaries, to avoid going through object.Equals type checking. 
            To be used along with <see cref="T:System.Collections.Generic.Dictionary`2"/> when <see cref="T:System.Type"/> is the key.
            </summary>
        </member>
        <member name="P:Uno.Core.Comparison.FastTypeComparer.Default">
            <summary>
            Provides a single instance
            </summary>
        </member>
        <member name="F:Uno.Actions.Null">
            <summary>
            An action which does nothing.
            </summary>
        </member>
        <member name="F:Uno.Actions.NullAsync">
            <summary>
            An ActionAsync which does nothing.
            </summary>
        </member>
        <member name="M:Uno.Actions.CreateOnce(System.Action)">
            <summary>
            Creates an action that will only execute once the provided action, even if called multiple times. This is Thread Safe.
            </summary>
            <param name="action">The action to be executed once</param>
            <returns>An action.</returns>
        </member>
        <member name="T:Uno.Actions`1">
            <summary>
            Container for stock actions.
            </summary>
            <typeparam name="T">The type of the argument for the actions.</typeparam>
        </member>
        <member name="F:Uno.Actions`1.Null">
            <summary>
            A Null action, that performs nothing.
            </summary>
        </member>
        <member name="F:Uno.Actions`1.NullAsync">
            <summary>
            A Null action, that performs nothing.
            </summary>
        </member>
        <member name="F:Uno.Actions`2.Null">
            <summary>
            A Null action, that performs nothing.
            </summary>
        </member>
        <member name="F:Uno.Actions`2.NullAsync">
            <summary>
            A Null action, that performs nothing.
            </summary>
        </member>
        <member name="T:Uno.CachedTuple">
            <summary>
            A tuple implementation that caches the GetHashCode value for faster lookup performance.
            </summary>
        </member>
        <member name="M:Uno.CachedTuple.Create``2(``0,``1)">
            <summary>
            Creates a tuple with two values.
            </summary>
        </member>
        <member name="M:Uno.CachedTuple.Create``3(``0,``1,``2)">
            <summary>
            Creates a tuple with three values.
            </summary>
        </member>
        <member name="M:Uno.CachedTuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates a tuple with four values.
            </summary>
        </member>
        <member name="T:Uno.CachedTuple`2">
            <summary>
            A tuple with two values implementation that caches the GetHashCode value for faster lookup performance.
            </summary>
        </member>
        <member name="F:Uno.CachedTuple`2.Comparer">
            <summary>
            Gets a comparer for the current tuple
            </summary>
        </member>
        <member name="T:Uno.CachedTuple`3">
            <summary>
            A tuple with three values implementation that caches the GetHashCode value for faster lookup performance.
            </summary>
        </member>
        <member name="F:Uno.CachedTuple`3.Comparer">
            <summary>
            Gets a comparer for the current tuple
            </summary>
        </member>
        <member name="T:Uno.CachedTuple`4">
            <summary>
            A tuple with four values implementation that caches the GetHashCode value for faster lookup performance.
            </summary>
        </member>
        <member name="M:Uno.Funcs.CreateAsync``1(Uno.FuncAsync{``0})">
            <summary>
            Creates a parameterless cancellable async function.
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateAsync``2(Uno.FuncAsync{``0,``1})">
            <summary>
            Creates a parameterized cancellable async function.
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateAsync``3(Uno.FuncAsync{``0,``1,``2})">
            <summary>
            Creates a parameterized cancellable async function.
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateAsync``4(Uno.FuncAsync{``0,``1,``2,``3})">
            <summary>
            Creates a parameterized cancellable async function.
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.Create``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a parameterless cancellable async function.
            </summary>
            <typeparam name="TResult">The return value</typeparam>
            <param name="function">The source function</param>
            <returns>A func of the source</returns>
        </member>
        <member name="M:Uno.Funcs.Create``2(System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Creates a parameterized cancellable async function.
            </summary>
            <typeparam name="TResult">The return value</typeparam>
            <param name="function">The source function</param>
            <returns>A func of the source</returns>
        </member>
        <member name="M:Uno.Funcs.CreateMemoized``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a parameterless memoized task providing function. <seealso cref="T:Uno.Extensions.FuncMemoizeExtensions"/>
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateMemoized``2(System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Creates a parameterless memoized task providing function. <seealso cref="T:Uno.Extensions.FuncMemoizeExtensions"/>
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateAsyncMemoized``1(Uno.FuncAsync{``0})">
            <summary>
            Creates a parameterless memoized task providing function. <seealso cref="T:Uno.Extensions.FuncMemoizeExtensions"/>
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateAsyncMemoized``2(Uno.FuncAsync{``0,``1})">
            <summary>
            Creates a parameterless memoized task providing function. <seealso cref="T:Uno.Extensions.FuncMemoizeExtensions"/>
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.Create``1(System.Func{``0})">
            <summary>
            Creates a function, to allow for type inference from the returned value.
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.Create``2(System.Func{``0,``1})">
            <summary>
            Creates a function, to allow for type inference from the returned value.
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.Create``3(System.Func{``0,``1,``2})">
            <summary>
            Creates a function, to allow for type inference from the returned value.
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.Create``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Creates a function, to allow for type inference from the returned value.
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateMemoized``1(System.Func{``0})">
            <summary>
            Creates a parameterless memoized function. <seealso cref="T:Uno.Extensions.FuncMemoizeExtensions"/>
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateLockedMemoized``1(System.Func{``0})">
            <summary>
            Creates a parameterless thread-safe memoized function. <seealso cref="T:Uno.Extensions.FuncMemoizeExtensions"/>
            </summary>
            <typeparam name="TResult">The returned type</typeparam>
            <param name="function">The source function</param>
            <returns>A function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateMemoized``2(System.Func{``0,``1})">
            <summary>
            Creates a parameterized memoized function.
            </summary>
            <typeparam name="TParam">The parameter</typeparam>
            <typeparam name="TResult">The return value</typeparam>
            <param name="function">The function to memoize</param>
            <returns>The memoized function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateMemoized``3(System.Func{``0,``1,``2})">
            <summary>
            Creates a parameterized memoized function.
            </summary>
            <typeparam name="TParam1">The first parameter</typeparam>
            <typeparam name="TParam2">The second parameter</typeparam>
            <typeparam name="TResult">The return value</typeparam>
            <param name="function">The function to memoize</param>
            <returns>The memoized function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateMemoized``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Creates a parameterized memoized function.
            </summary>
            <typeparam name="TParam1">The first parameter</typeparam>
            <typeparam name="TParam2">The second parameter</typeparam>
            <typeparam name="TParam3">The third parameter</typeparam>
            <typeparam name="TResult">The return value</typeparam>
            <param name="function">The function to memoize</param>
            <returns>The memoized function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateMemoized``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Creates a parameterized memoized function.
            </summary>
            <typeparam name="TParam1">The first parameter</typeparam>
            <typeparam name="TParam2">The second parameter</typeparam>
            <typeparam name="TParam3">The third parameter</typeparam>
            <typeparam name="TParam4">The fourth parameter</typeparam>
            <typeparam name="TResult">The return value</typeparam>
            <param name="function">The function to memoize</param>
            <returns>The memoized function</returns>
        </member>
        <member name="M:Uno.Funcs.CreateMemoized``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Creates a parameterized memoized function.
            </summary>
            <typeparam name="TParam1">The first parameter</typeparam>
            <typeparam name="TParam2">The second parameter</typeparam>
            <typeparam name="TParam3">The third parameter</typeparam>
            <typeparam name="TParam4">The fourth parameter</typeparam>
            <typeparam name="TParam5">The fifth parameter</typeparam>
            <typeparam name="TResult">The return value</typeparam>
            <param name="function">The function to memoize</param>
            <returns>The memoized function</returns>
        </member>
        <member name="T:Uno.LegacyAttribute">
            <summary>
            Marks a member or a class as legacy. To be used in conjuction with the Obsolete attribute
            to mark elements as obsolete, but fail compilation based on static analysis rules.
            </summary>
        </member>
        <member name="T:Uno.Null">
            <summary>
            A container for a object that has no meaning (replaces void).
            </summary>
        </member>
        <member name="M:Uno.Null.#ctor">
            <summary>
            Private constructor, no one will ever construct these things, pass null.
            </summary>
        </member>
        <member name="T:Uno.Conversion.EnumConversionStrategy">
            <summary>
            Will convert to and from enum, usually with strings
            </summary>
            <remarks>
            System.ComponentModel.DescriptionAttribute is can be used as result
            or parsing value, if not empty.
            A description attribute with "?" is considered default value.
            </remarks>
        </member>
        <member name="M:Uno.Conversion.IConversionExtensions.Conversion(System.Object)">
            <summary>
            Create extension point (prefer the usage of method extensions)
            </summary>
        </member>
        <member name="M:Uno.Conversion.IConversionExtensions.RegisterStrategy(Uno.Conversion.IConversionStrategy)">
            <summary>
            Register a conversion strategy
            </summary>
        </member>
        <member name="M:Uno.Conversion.IConversionExtensions.RegisterFallbackStrategy(Uno.Conversion.IConversionStrategy)">
            <summary>
            Register a conversion strategy to be used as fallback
            </summary>
        </member>
        <member name="M:Uno.Conversion.IConversionExtensions.CanConvert(Uno.Conversion.ConversionExtensionPoint,System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Check if it's possible to do a conversion
            </summary>
        </member>
        <member name="M:Uno.Conversion.IConversionExtensions.To(Uno.Conversion.ConversionExtensionPoint,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Initiate the conversion
            </summary>
            <remarks>
            This method is usually called by the extension point.
            </remarks>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Uno.Conversion.ConversionExtensionsExtensions.RegisterStrategy``1(Uno.Conversion.IConversionExtensions)">
            <summary>
            Fluently register a conversion strategy
            </summary>
        </member>
        <member name="M:Uno.Conversion.ConversionExtensionsExtensions.RegisterCustomStrategy``2(Uno.Conversion.IConversionExtensions,System.Func{``0,System.Globalization.CultureInfo,``1})">
            <summary>
            Fluently register a custom conversion strategy
            </summary>
        </member>
        <member name="M:Uno.Conversion.ConversionExtensionsExtensions.RegisterCustomStrategy``2(Uno.Conversion.IConversionExtensions,System.Func{``0,``1})">
            <summary>
            Fluently register a custom conversion strategy
            </summary>
        </member>
        <member name="M:Uno.Conversion.ConversionExtensionsExtensions.RegisterFallbackStrategy``1(Uno.Conversion.IConversionExtensions)">
            <summary>
            Fluently register a conversion strategy to be used as fallback
            </summary>
        </member>
        <member name="M:Uno.Conversion.ConversionExtensionsExtensions.To``1(Uno.Conversion.IConversionExtensions,Uno.Conversion.ConversionExtensionPoint,System.Globalization.CultureInfo)">
            <summary>
            Convert source to a specified generic type
            </summary>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Uno.Conversion.IConversionStrategy.CanConvert(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            If the strategy can support a specific value as input
            </summary>
            <returns>true=supported</returns>
        </member>
        <member name="M:Uno.Conversion.IConversionStrategy.Convert(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Issue the conversion result
            </summary>
            <returns>result</returns>
        </member>
        <member name="T:Uno.ReferenceEqualityComparer`1">
            <summary>
            A reference equality comparer for instances.
            </summary>
        </member>
        <member name="M:Uno.Reflection.FieldDescriptor.ToCompiledSetValue">
            <summary>
            Creates a compiled method that will allow a the assignation of the specified field.
            </summary>
            <param name="fieldInfo">The field to assign</param>
            <returns>A delegate taking an instance as the first parameter, and the value as the second parameter.</returns>
        </member>
        <member name="M:Uno.Reflection.FieldDescriptor.ToCompiledSetValue(System.Boolean)">
            <summary>
            Creates a compiled method that will allow a the assignation of the specified field.
            </summary>
            <param name="fieldInfo">The field to assign</param>
            <param name="strict">Removes some type checking to enhance performance if set to false.</param>
            <returns>A delegate taking an instance as the first parameter, and the value as the second parameter.</returns>
            <remarks>
            The use of the strict parameter is required if the caller of the generated method does not validate 
            parameter types before the call. Invalid parameters could result in unexpected behavior.
            </remarks>
        </member>
        <member name="M:Uno.Reflection.FieldDescriptor.ToCompiledSetValue(System.RuntimeTypeHandle,System.RuntimeFieldHandle,System.Boolean)">
            <summary>
            Creates a compiled method that will allow a the assignation of the specified field.
            </summary>
            <param name="typeHandle">The declaring type for the specified RuntimeFieldHandle</param>
            <param name="fieldHandle">The field in the specified RuntimeTypeHandle</param>
            <param name="strict">Removes some type checking to enhance performance.</param>
            <returns>A delegate taking an instance as the first parameter, and the value as the second parameter.</returns>
            <remarks>
            The use of the strict parameter is required if the caller of the generated method does not validate 
            parameter types before the call. Invalid parameters could result in unexpected behavior.
            </remarks>
        </member>
        <member name="M:Uno.Reflection.FieldDescriptor.ToCompiledGetValue">
            <summary>
            Creates a compiled method that will get the value of a field 
            </summary>
            <param name="fieldInfo">The field to get the value from.</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Reflection.FieldDescriptor.ToCompiledGetValue(System.Boolean)">
            <summary>
            Creates a compiled method that will get the value of a field.
            </summary>
            <param name="fieldInfo">The field to get the value from.</param>
            <param name="strict">Removes some type checking to enhance performance if set to false.</param>
            <returns>A delegate taking an instance as the first parameter, and returns the value of the field.</returns>
            <remarks>
            The use of the strict parameter is required if the caller of the generated method does not validate 
            parameter types before the call. An invalid parameter could result in unexpected behavior.
            </remarks>
        </member>
        <member name="M:Uno.Reflection.FieldDescriptor.ToCompiledGetValue(System.RuntimeTypeHandle,System.RuntimeFieldHandle,System.Boolean)">
            <summary>
            Creates a compiled method that will get the value of a field.
            </summary>
            <param name="typeHandle">The declaring type for the specified RuntimeFieldHandle</param>
            <param name="fieldHandle">The field in the specified RuntimeTypeHandle</param>
            <param name="strict">Removes some type checking to enhance performance if set to false.</param>
            <returns></returns>
            <remarks>
            The use of the strict parameter is required if the caller of the generated method does not validate 
            parameter types before the call. An invalid parameter could result in unexpected behavior.
            </remarks>
        </member>
        <member name="M:Uno.Reflection.IMethodDescriptor.ToCompiledMethodInvoke">
            <summary>
            Build a compiled method that will call the specified method.
            </summary>
            <param name="MethodInfo">The method to invoke</param>
            <returns>A delegate that will call the requested method</returns>
        </member>
        <member name="M:Uno.Reflection.IMethodDescriptor.ToCompiledMethodInvoke(System.Boolean)">
            <summary>
            Build a compiled method that will call the specified method.
            </summary>
            <param name="MethodInfo">The method to invoke</param>
            <param name="strict">Removes some type checking to enhance performance if set to false.</param>
            <returns>A delegate that will call the requested method</returns>
            <remarks>
            The use of the strict parameter is required if the caller of the generated method does not validate 
            parameter types before the call. An invalid parameter could result in unexpected behavior.
            </remarks>
        </member>
        <member name="M:Uno.Reflection.IValueMemberDescriptor.ToCompiledSetValue">
            <summary>
            Creates a compiled method that will allow a the assignation of the current member.
            </summary>
            <returns>A delegate taking an instance as the first parameter, and the value as the second parameter.</returns>
        </member>
        <member name="M:Uno.Reflection.IValueMemberDescriptor.ToCompiledSetValue(System.Boolean)">
            <summary>
            Creates a compiled method that will allow a the assignation of the current member.
            </summary>
            <param name="strict">Removes some type checking to enhance performance if set to false.</param>
            <returns>A delegate taking an instance as the first parameter, and the value as the second parameter.</returns>
            <remarks>
            The use of the strict parameter is required if the caller of the generated method does not validate 
            parameter types before the call. Invalid parameters could result in unexpected behavior.
            </remarks>
        </member>
        <member name="M:Uno.Reflection.IValueMemberDescriptor.ToCompiledGetValue">
            <summary>
            Creates a compiled method that will get the value of  of the current member. 
            </summary>
            <param name="fieldInfo">The field to get the value from.</param>
            <returns></returns>
        </member>
        <member name="M:Uno.Reflection.IValueMemberDescriptor.ToCompiledGetValue(System.Boolean)">
            <summary>
            Creates a compiled method that will get the value of  of the current member.
            </summary>
            <param name="fieldInfo">The field to get the value from.</param>
            <param name="strict">Removes some type checking to enhance performance if set to false.</param>
            <returns>A delegate taking an instance as the first parameter, and returns the value of the field.</returns>
            <remarks>
            The use of the strict parameter is required if the caller of the generated method does not validate 
            parameter types before the call. An invalid parameter could result in unexpected behavior.
            </remarks>
        </member>
        <member name="T:Uno.Threading.AsyncLock">
            <summary>
            An asynchronous lock, that can be used in conjuction with C# async/await
            </summary>
        </member>
        <member name="M:Uno.Threading.AsyncLock.LockAsync(System.Threading.CancellationToken)">
            <summary>
            Acquires the lock, then provides a disposable to release it.
            </summary>
            <param name="ct">A cancellation token to cancel the lock</param>
            <returns>An IDisposable instance that allows the release of the lock.</returns>
        </member>
        <member name="T:Uno.Threading.FastTaskCompletionSource`1">
            <summary>
            This is a lightweight alternative to TaskCompletionSource.
            </summary>
            <remarks>
            In most situation, the TaskCompletionSource could be replaced directly by this one.
            It is sligthly more efficient to use the .Task insead of directly awaiting this object.
            </remarks>
        </member>
        <member name="P:Uno.Threading.FastTaskCompletionSource`1.Termination">
            <summary>
            Current state of the object
            </summary>
        </member>
        <member name="P:Uno.Threading.FastTaskCompletionSource`1.IsCompleted">
            <summary>
            If any termination has been set
            </summary>
        </member>
        <member name="P:Uno.Threading.FastTaskCompletionSource`1.IsCanceled">
            <summary>
            If SetCanceled has been called.
            </summary>
            <remarks>
            Calling SetException with a "TaskCanceledException" will produce the same result.
            </remarks>
        </member>
        <member name="P:Uno.Threading.FastTaskCompletionSource`1.ExceptionInfo">
            <summary>
            The capture of the original exception, if any.
            </summary>
            <remarks>
            Will be null until a SetException() has been called.
            NOTE: will be null if SetException is called with a "TaskCanceledException".
            </remarks>
        </member>
        <member name="P:Uno.Threading.FastTaskCompletionSource`1.Result">
            <summary>
            The result, if any.
            </summary>
            <remarks>
            Will be null until a SetResult() has been called.
            </remarks>
        </member>
        <member name="P:Uno.Threading.FastTaskCompletionSource`1.Exception">
            <summary>
            Get the captured exception (if any) - null if none or N/A
            </summary>
            <remarks>
            Will be null until a SetException() has been called.
            NOTE: will be null if SetException is called with a "TaskCanceledException".
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.SetCanceled">
            <summary>
            Set the termination as "Canceled"
            </summary>
            <remarks>
            Will throw an InvalidOperationException if a termination has been set.
            Calling SetException with a "TaskCanceledException" will produce the same result.
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.TrySetCanceled">
            <summary>
            Set the termination as "Canceled"
            </summary>
            <remarks>
            Calling SetException with a "TaskCanceledException" will produce the same result.
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.SetException(System.Exception)">
            <summary>
            Set the termination on an exception
            </summary>
            <remarks>
            Will throw an InvalidOperationException if a termination has been set.
            Calling SetException with a "TaskCanceledException" will result as a if SetCanceled() has been called.
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.SetException(System.Runtime.ExceptionServices.ExceptionDispatchInfo)">
            <summary>
            Set the termination on an exception wrapped in an ExceptionDispatchInfo
            </summary>
            <remarks>
            Will throw an InvalidOperationException if a termination has been set.
            Calling SetException with a "TaskCanceledException" will result as a if SetCanceled() has been called.
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Set the termination on an exception
            </summary>
            <remarks>
            Calling SetException with a "TaskCanceledException" will result as a if SetCanceled() has been called.
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.TrySetException(System.Runtime.ExceptionServices.ExceptionDispatchInfo)">
            <summary>
            Set the termination on an exception wrapped in an ExceptionDispatchInfo
            </summary>
            <remarks>
            Calling SetException with a "TaskCanceledException" will result as a if SetCanceled() has been called.
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.SetResult(`0)">
            <summary>
            Set the termination on a result
            </summary>
            <remarks>
            Will throw an InvalidOperationException if a termination has been set.
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.TrySetResult(`0)">
            <summary>
            Set the termination on a result
            </summary>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.GetResult">
            <summary>
            GetResult or throw an exception, according to termination. BLOCKING: DON'T CALL THIS!
            </summary>
            <remarks>
            BLOCKING CALL!  Will wait until a termination has been set.
            The method is resigned for the "await" pattern, should not be called from code.
            </remarks>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.GetAwaiter">
            <summary>
            "await" pattern implementation.
            </summary>
        </member>
        <member name="M:Uno.Threading.FastTaskCompletionSource`1.OnCompleted(System.Action)">
            <summary>
            "await" pattern implementation.
            </summary>
        </member>
        <member name="P:Uno.Threading.FastTaskCompletionSource`1.Task">
            <summary>
            Task you can use to await for the result.
            </summary>
        </member>
        <member name="M:Uno.Transactional.Update``1(``0@,System.Func{``0,``0})">
            <summary>
            Transactionally updates the <paramref name="original"/> reference using the provided <paramref name="selector"/>.
            </summary>
            <typeparam name="T">The type of the reference to update</typeparam>
            <param name="original">A ref variable to the original value</param>
            <param name="selector">A selector method that creates an updated version of the original value</param>
            <returns>Successful updated version</returns>
        </member>
        <member name="M:Uno.Transactional.Update(System.Object@,System.Func{System.Object,System.Object})">
            <summary>
            Transactionally updates the <paramref name="original"/> reference using the provided <paramref name="selector"/>.
            </summary>
            <param name="original">A ref variable to the original value</param>
            <param name="selector">A selector method that creates an updated version of the original value</param>
            <returns>Successful updated version</returns>
        </member>
        <member name="M:Uno.Transactional.Update``2(``0@,``1,System.Func{``0,``1,``0})">
            <summary>
            Transactionally updates the <paramref name="original"/> reference using the provided <paramref name="selector"/>.
            </summary>
            <remarks>
            This version let you pass a parameter to prevent creation of a display class for capturing data in your lambda
            </remarks>
            <typeparam name="T">The type of the reference to update</typeparam>
            <param name="original">A ref variable to the <paramref name="original"/> value</param>
            <param name="selector">A selector method that creates an updated version of the original value</param>
            <returns>Successful updated version</returns>
        </member>
        <member name="M:Uno.Transactional.Update``3(``0@,``1,``2,System.Func{``0,``1,``2,``0})">
            <summary>
            Transactionally updates the <paramref name="original"/> reference using the provided <paramref name="selector"/>.
            </summary>
            <remarks>
            This version let you pass a parameters to prevent creation of a display class for capturing data in your lambda
            </remarks>
            <typeparam name="T">The type of the reference to update</typeparam>
            <param name="original">A ref variable to the original value</param>
            <param name="selector">A selector method that creates an updated version of the original value</param>
            <returns>Successful updated version</returns>
        </member>
        <member name="M:Uno.Transactional.Update``2(``0@,System.Func{``0,System.Tuple{``0,``1}})">
            <summary>
            Transactionally updates the <paramref name="original"/> reference using the provided
            <paramref name="selector"/>, and returns a selected value from the <paramref name="selector"/>.
            </summary>
            <typeparam name="TSource">The type of the reference to update</typeparam>
            <typeparam name="TResult">The inner value from the updated TSource returned by the selector</typeparam>
            <param name="original">The original value reference</param>
            <param name="selector">The selector returning a Tuple with updated value as Item1 and Update result as Item2.</param>
            <returns>The inner value returned by the selector.</returns>
        </member>
        <member name="M:Uno.Transactional.Update``3(``0@,``1,System.Func{``0,``1,System.Tuple{``0,``2}})">
            <summary>
            Transactionally updates the <paramref name="original"/> reference using the provided
            <paramref name="selector"/>, and returns a selected value from the <paramref name="selector"/>.
            </summary>
            <typeparam name="TSource">The type of the reference to update</typeparam>
            <typeparam name="TResult">The inner value from the updated TSource returned by the selector</typeparam>
            <param name="original">The original value reference</param>
            <param name="selector">The selector returning a Tuple with updated value as Item1 and Update result as Item2.</param>
            <returns>The inner value returned by the selector.</returns>
        </member>
        <member name="M:Uno.Transactional.GetOrAdd``3(``0@,``1,System.Func{``1,``2})">
            <summary>
            Transactionally get or add an item to an ImmutableDictionary.  The factory is called to create the item when required.
            </summary>
        </member>
        <member name="M:Uno.Transactional.GetOrAdd``4(``0@,``1,``2,System.Func{``1,``2,``3})">
            <summary>
            Transactionally get or add an item to an ImmutableDictionary.  The factory is called to create the item when required.
            </summary>
            <remarks>This overload is used primarily to avoid creating a closure, which are expensive when running under Mono’s full AOT.</remarks>
        </member>
        <member name="M:Uno.Transactional.TryAdd``3(``0@,``1,System.Func{``1,``2},``2@)">
            <summary>
            Transactionally add an item to an ImmutableDictionary if not already present.  The factory is called to create the item when required.
            </summary>
        </member>
        <member name="M:Uno.Transactional.TryRemove``3(``0@,``1,``2@)">
            <summary>
            Transactionally remove an item from an ImmutableDictionary if exists.
            </summary>
        </member>
        <member name="M:Uno.Transactional.Remove``3(``0@,System.Func{System.Collections.Generic.KeyValuePair{``1,``2},System.Boolean})">
            <summary>
            Transactionally remove an item from a list.
            </summary>
            <returns>True if the item was in the list, false else.</returns>
        </member>
        <member name="M:Uno.Transactional.SetItem``3(``0@,``1,``2)">
            <summary>
            Transactionally set an item of an ImmutableDictionary.
            </summary>
        </member>
        <member name="M:Uno.Transactional.SetItem``3(``0@,``1,System.Func{``1,``2})">
            <summary>
            Transactionally set an item of an ImmutableDictionary.
            </summary>
        </member>
        <member name="M:Uno.Transactional.TryUpdateItem``3(``0@,``1,``2)">
            <summary>
            Transactionally update an item of an ImmutableDictionary, *but only if it already exists in the dictionary*.
            The factory is called to create the item when required, and may be invoked multiple times.
            </summary>
        </member>
        <member name="M:Uno.Transactional.TryUpdateItem``2(System.Collections.Immutable.IImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1,``1})">
            <summary>
            Transactionally update an item of an ImmutableDictionary, *but only if it already exists in the dictionary*.
            The factory is called to create the item when required, and may be invoked multiple times.
            </summary>
        </member>
        <member name="M:Uno.Transactional.TryUpdateItem``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1,``1})">
            <summary>
            Transactionally update an item of an ImmutableDictionary, *but only if it already exists in the dictionary*.
            The factory is called to create the item when required, and may be invoked multiple times.
            </summary>
        </member>
        <member name="M:Uno.Transactional.TryUpdateItem``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}@,``0,System.Func{``0,``1,``1})">
            <summary>
            Transactionally update an item of an ImmutableDictionary, *but only if it already exists in the dictionary*.
            The factory is called to create the item when required, and may be invoked multiple times.
            </summary>
        </member>
        <member name="M:Uno.Transactional.UpdateItem``2(System.Collections.Immutable.IImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1,``1})">
            <summary>
            Transactionally update an item of an ImmutableDictionary. 
            The factory is called to update the item, and may be invoked multiple times.
            </summary>
        </member>
        <member name="M:Uno.Transactional.UpdateItem``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1,``1})">
            <summary>
            Transactionally get or add an item to an ImmutableDictionary.  The factory is called to create the item when required.
            The factory is called to udpate, and may be invoked multiple times.
            </summary>
        </member>
        <member name="M:Uno.Transactional.UpdateItem``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}@,``0,System.Func{``0,``1,``1})">
            <summary>
            Transactionally update an item of an ImmutableDictionary.
            The factory is called to udpate, and may be invoked multiple times.
            </summary>
        </member>
        <member name="M:Uno.Transactional.Enqueue``2(``0@,``1)">
            <summary>
            Transactionally enqueue and item into an ImmutableQueue
            </summary>
        </member>
        <member name="M:Uno.Transactional.Enqueue``2(``0@,System.Func{``0,``1})">
            <summary>
            Transactionally enqueue and item into an ImmutableQueue
            </summary>
        </member>
        <member name="M:Uno.Transactional.TryDequeue``2(``0@,``1@)">
            <summary>
            Transactionally dequeue an item from a queue.
            </summary>
            <returns>true if successful, false means queue was empty</returns>
        </member>
        <member name="M:Uno.Transactional.Dequeue``2(``0@)">
            <summary>
            Transactionally dequeue an item from a queue. An exception is thrown if queue is empty.
            </summary>
            <returns>dequeued item</returns>
        </member>
        <member name="M:Uno.Transactional.Add``2(``0@,``1)">
            <summary>
            Transactionally add an item to a list.
            </summary>
        </member>
        <member name="M:Uno.Transactional.AddDistinct``2(``0@,``1)">
            <summary>
            Transactionally add an item to a list if not already present.
            </summary>
        </member>
        <member name="M:Uno.Transactional.AddDistinct``2(``0@,``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Transactionally add an item to a list if not already present.
            </summary>
        </member>
        <member name="M:Uno.Transactional.TryAddDistinct``2(``0@,``1)">
            <summary>
            Transactionally try to add an item to a list if not already present.
            </summary>
            <returns>True if item was added, false if item was already present</returns>
        </member>
        <member name="M:Uno.Transactional.TryAddDistinct``2(``0@,``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Transactionally try to add an item to a list if not already present.
            </summary>
            <returns>True if item was added, false if item was already present</returns>
        </member>
        <member name="M:Uno.Transactional.Remove``2(``0@,``1)">
            <summary>
            Transactionally remove an item from a list.
            </summary>
            <returns>True if the item was in the list, false else.</returns>
        </member>
        <member name="M:Uno.Transactional.Remove``2(``0@,System.Func{``1,System.Boolean})">
            <summary>
            Remove item(s) from an immutable list using a selector.
            </summary>
            <returns>True if the item was in the list, false else.</returns>
        </member>
        <member name="M:Uno.Transactional.RemoveRange``2(``0@,``1[])">
            <summary>
            Transactionally remove the specified items from a list.
            </summary>
            <returns>Number of items which were effectively removed from the list.</returns>
        </member>
        <member name="M:Uno.Transactional.RemoveRange``2(``0@,``1[],System.Collections.Generic.IEnumerable{``1}@)">
            <summary>
            Transactionally remove the specified items from a list.
            </summary>
            <param name="removedItems">Items which were effectively removed from the list.</param>
            <returns>Number of items which were effectively removed from the list.</returns>
        </member>
    </members>
</doc>
